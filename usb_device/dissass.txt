
GRUB_SWITCH_GRUBSW_CUSTOM.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	7f c1       	rjmp	.+766    	; 0x300 <__ctors_end>
       2:	00 00       	nop
       4:	a4 c1       	rjmp	.+840    	; 0x34e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c1       	rjmp	.+836    	; 0x34e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c1       	rjmp	.+832    	; 0x34e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c1       	rjmp	.+828    	; 0x34e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c1       	rjmp	.+824    	; 0x34e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c1       	rjmp	.+820    	; 0x34e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c1       	rjmp	.+816    	; 0x34e <__bad_interrupt>
      1e:	00 00       	nop
      20:	96 c1       	rjmp	.+812    	; 0x34e <__bad_interrupt>
      22:	00 00       	nop
      24:	94 c1       	rjmp	.+808    	; 0x34e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_10>
      2c:	90 c1       	rjmp	.+800    	; 0x34e <__bad_interrupt>
      2e:	00 00       	nop
      30:	8e c1       	rjmp	.+796    	; 0x34e <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c1       	rjmp	.+792    	; 0x34e <__bad_interrupt>
      36:	00 00       	nop
      38:	8a c1       	rjmp	.+788    	; 0x34e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	88 c1       	rjmp	.+784    	; 0x34e <__bad_interrupt>
      3e:	00 00       	nop
      40:	86 c1       	rjmp	.+780    	; 0x34e <__bad_interrupt>
      42:	00 00       	nop
      44:	84 c1       	rjmp	.+776    	; 0x34e <__bad_interrupt>
      46:	00 00       	nop
      48:	82 c1       	rjmp	.+772    	; 0x34e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	80 c1       	rjmp	.+768    	; 0x34e <__bad_interrupt>
      4e:	00 00       	nop
      50:	7e c1       	rjmp	.+764    	; 0x34e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_21>
      58:	7a c1       	rjmp	.+756    	; 0x34e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	78 c1       	rjmp	.+752    	; 0x34e <__bad_interrupt>
      5e:	00 00       	nop
      60:	76 c1       	rjmp	.+748    	; 0x34e <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c1       	rjmp	.+744    	; 0x34e <__bad_interrupt>
      66:	00 00       	nop
      68:	72 c1       	rjmp	.+740    	; 0x34e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	70 c1       	rjmp	.+736    	; 0x34e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c1       	rjmp	.+732    	; 0x34e <__bad_interrupt>
      72:	00 00       	nop
      74:	6c c1       	rjmp	.+728    	; 0x34e <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c1       	rjmp	.+724    	; 0x34e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	68 c1       	rjmp	.+720    	; 0x34e <__bad_interrupt>
      7e:	00 00       	nop
      80:	66 c1       	rjmp	.+716    	; 0x34e <__bad_interrupt>
      82:	00 00       	nop
      84:	64 c1       	rjmp	.+712    	; 0x34e <__bad_interrupt>
      86:	00 00       	nop
      88:	62 c1       	rjmp	.+708    	; 0x34e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	60 c1       	rjmp	.+704    	; 0x34e <__bad_interrupt>
      8e:	00 00       	nop
      90:	5e c1       	rjmp	.+700    	; 0x34e <__bad_interrupt>
      92:	00 00       	nop
      94:	5c c1       	rjmp	.+696    	; 0x34e <__bad_interrupt>
      96:	00 00       	nop
      98:	5a c1       	rjmp	.+692    	; 0x34e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	58 c1       	rjmp	.+688    	; 0x34e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	56 c1       	rjmp	.+684    	; 0x34e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	54 c1       	rjmp	.+680    	; 0x34e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	52 c1       	rjmp	.+676    	; 0x34e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 08       	sbc	r4, r3
      ae:	ac 08       	sbc	r10, r12
      b0:	78 09       	sbc	r23, r8
      b2:	de 08       	sbc	r13, r14
      b4:	78 09       	sbc	r23, r8
      b6:	6d 08       	sbc	r6, r13
      b8:	7f 07       	cpc	r23, r31
      ba:	78 09       	sbc	r23, r8
      bc:	24 08       	sbc	r2, r4
      be:	90 08       	sbc	r9, r0
      c0:	2b 09       	sbc	r18, r11
      c2:	52 09       	sbc	r21, r2

000000c4 <__trampolines_end>:
      c4:	04 03       	mulsu	r16, r20
      c6:	09 04       	cpc	r0, r9

000000c8 <usb_user_serial_number>:
      c8:	1c 03 30 00 30 00 30 00 30 00 30 00 30 00 30 00     ..0.0.0.0.0.0.0.
      d8:	30 00 30 00 30 00 30 00 30 00 30 00                 0.0.0.0.0.0.

000000e4 <usb_user_product_string_descriptor>:
      e4:	20 03 54 00 48 00 45 00 20 00 47 00 52 00 55 00      .T.H.E. .G.R.U.
      f4:	42 00 20 00 53 00 57 00 49 00 54 00 43 00 48 00     B. .S.W.I.T.C.H.

00000104 <usb_user_manufacturer_string_descriptor>:
     104:	1a 03 55 00 4e 00 47 00 20 00 53 00 4f 00 46 00     ..U.N.G. .S.O.F.
     114:	54 00 57 00 41 00 52 00 45 00                       T.W.A.R.E.

0000011e <usb_conf_desc>:
     11e:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
     12e:	50 00 07 05 81 02 40 00 00 07 05 02 02 40 00 00     P.....@......@..

0000013e <usb_dev_desc>:
     13e:	12 01 00 02 00 00 00 40 09 12 15 20 00 10 01 02     .......@... ....
     14e:	03 01                                               ..

00000150 <sbc_std_inquiry_data>:
     150:	00 80 03 02 1f 00 00 00                             ........

00000158 <g_sbc_revision_id>:
     158:	37 2e 34 37                                         7.47

0000015c <g_sbc_product_id>:
     15c:	54 48 45 20 47 52 55 42 20 53 57 49 54 43 48 20     THE GRUB SWITCH 

0000016c <g_sbc_vendor_id>:
     16c:	55 4e 47 20 53 4f 46 54                             UNG SOFT

00000174 <dir_table>:
     174:	42 4f 4f 54 54 48 49 53 20 20 20 08 00 00 80 0a     BOOTTHIS   .....
     184:	5a 0b 5a 0b 00 00 80 0a 5a 0b 00 00 00 00 00 00     Z.Z.....Z.......
     194:	53 57 49 54 43 48 20 20 47 52 42 23 00 00 c0 0a     SWITCH  GRB#....
     1a4:	5a 0b 5a 0b 00 00 c0 0a 5a 0b 03 00 00 00 00 00     Z.Z.....Z.......
     1b4:	41 2e 00 65 00 6e 00 74 00 72 00 0f 00 0b 69 00     A..e.n.t.r....i.
     1c4:	65 00 73 00 2e 00 74 00 78 00 00 00 74 00 00 00     e.s...t.x...t...
     1d4:	45 4e 54 52 49 45 7e 31 54 58 54 26 00 00 a0 0a     ENTRIE~1TXT&....
     1e4:	5a 0b 5a 0b 00 00 a0 0a 5a 0b 04 00 00 00 00 00     Z.Z.....Z.......
     1f4:	41 2e 00 62 00 6f 00 6f 00 74 00 0f 00 14 70 00     A..b.o.o.t....p.
     204:	69 00 6e 00 73 00 2e 00 74 00 00 00 78 00 74 00     i.n.s...t...x.t.
     214:	42 4f 4f 54 50 49 7e 31 54 58 54 27 00 00 80 0a     BOOTPI~1TXT'....
     224:	5a 0b 5a 0b 00 00 80 0a 5a 0b 05 00 12 00 00 00     Z.Z.....Z.......

00000234 <pt_cluster>:
     234:	55 aa f8 ff ff 00 f0 ff ff ff ff                    U..........

0000023f <sector0>:
     23f:	eb 3c 90 6d 6b 66 73 2e 66 61 74 00 02 02 01 00     .<.mkfs.fat.....
     24f:	01 10 00 44 00 f8 01 00 20 00 40 00 00 00 00 00     ...D.... .@.....
     25f:	00 00 00 00 80 00 29 55 19 85 19 42 4f 4f 54 54     ......)U...BOOTT
     26f:	48 49 53 20 20 20 46 41 54 31 32 20 20 20 0e 1f     HIS   FAT12   ..
     27f:	be 5b 7c ac 22 c0 74 0b 56 b4 0e bb 07 00 cd 10     .[|.".t.V.......
     28f:	5e eb f0 32 e4 cd 16 cd 19 eb fe 54 68 69 73 20     ^..2.......This 
     29f:	69 73 20 6e 6f 74 20 61 20 62 6f 6f 74 61 62 6c     is not a bootabl
     2af:	65 20 64 69 73 6b 2e 20 20 50 6c 65 61 73 65 20     e disk.  Please 
     2bf:	69 6e 73 65 72 74 20 61 20 62 6f 6f 74 61 62 6c     insert a bootabl
     2cf:	65 20 66 6c 6f 70 70 79 20 61 6e 64 0d 0a 70 72     e floppy and..pr
     2df:	65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f 20 74     ess any key to t
     2ef:	72 79 20 61 67 61 69 6e 20 2e 2e 2e 20 0d 0a 00     ry again ... ...
	...

00000300 <__ctors_end>:
     300:	11 24       	eor	r1, r1
     302:	1f be       	out	0x3f, r1	; 63
     304:	cf ef       	ldi	r28, 0xFF	; 255
     306:	da e0       	ldi	r29, 0x0A	; 10
     308:	de bf       	out	0x3e, r29	; 62
     30a:	cd bf       	out	0x3d, r28	; 61

0000030c <__low_level_init>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     31a:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     31e:	0f be       	out	0x3f, r0	; 63
#endif
char __low_level_init()
{
  Clear_prescaler();
  return 1;
}
     320:	81 e0       	ldi	r24, 0x01	; 1

00000322 <__do_copy_data>:
     322:	11 e0       	ldi	r17, 0x01	; 1
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b1 e0       	ldi	r27, 0x01	; 1
     328:	ec ed       	ldi	r30, 0xDC	; 220
     32a:	f3 e2       	ldi	r31, 0x23	; 35
     32c:	02 c0       	rjmp	.+4      	; 0x332 <__do_copy_data+0x10>
     32e:	05 90       	lpm	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	a8 36       	cpi	r26, 0x68	; 104
     334:	b1 07       	cpc	r27, r17
     336:	d9 f7       	brne	.-10     	; 0x32e <__do_copy_data+0xc>

00000338 <__do_clear_bss>:
     338:	22 e0       	ldi	r18, 0x02	; 2
     33a:	a8 e6       	ldi	r26, 0x68	; 104
     33c:	b1 e0       	ldi	r27, 0x01	; 1
     33e:	01 c0       	rjmp	.+2      	; 0x342 <.do_clear_bss_start>

00000340 <.do_clear_bss_loop>:
     340:	1d 92       	st	X+, r1

00000342 <.do_clear_bss_start>:
     342:	a8 3c       	cpi	r26, 0xC8	; 200
     344:	b2 07       	cpc	r27, r18
     346:	e1 f7       	brne	.-8      	; 0x340 <.do_clear_bss_loop>
     348:	03 d0       	rcall	.+6      	; 0x350 <main>
     34a:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <_exit>

0000034e <__bad_interrupt>:
     34e:	58 ce       	rjmp	.-848    	; 0x0 <__vectors>

00000350 <main>:


int main(void)
{
  // watchdog disable
  wdtdrv_disable();
     350:	0e 94 09 0b 	call	0x1612	; 0x1612 <wdtdrv_disable>
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	80 e8       	ldi	r24, 0x80	; 128
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     362:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     366:	0f be       	out	0x3f, r0	; 63

  // clear timing
  Clear_prescaler();

  // deactive JTAG (twice inside 4 cycles)
  U8 mcucr_buf = (MCUCR | (1 << JTD));
     368:	85 b7       	in	r24, 0x35	; 53
     36a:	80 68       	ori	r24, 0x80	; 128
  MCUCR = mcucr_buf;
     36c:	85 bf       	out	0x35, r24	; 53
  MCUCR = mcucr_buf;

  // start tasks
  scheduler();
     36e:	85 bf       	out	0x35, r24	; 53

  return 0;
}
     370:	28 d2       	rcall	.+1104   	; 0x7c2 <scheduler>
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	08 95       	ret

00000378 <storage_task_init>:
//! @return none
//!
//!/
void storage_task_init(void)
{
   Led_init();
     378:	86 9a       	sbi	0x10, 6	; 16

   init_aux0_output();
     37a:	51 9a       	sbi	0x0a, 1	; 10
     37c:	59 98       	cbi	0x0b, 1	; 11
   set_wrprot_input_pullup();
     37e:	6e 98       	cbi	0x0d, 6	; 13
     380:	76 9a       	sbi	0x0e, 6	; 14

   cf_mem_init();    // Init the hw/sw ressources required to drive the DF.
     382:	0e 94 1c 0b 	call	0x1638	; 0x1638 <cf_mem_init>
   Usb_enable_sof_interrupt();
     386:	e2 ee       	ldi	r30, 0xE2	; 226
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	84 60       	ori	r24, 0x04	; 4
     38e:	80 83       	st	Z, r24
     390:	08 95       	ret

00000392 <sof_action>:
//! the USB Start Of Frame interrupt subroutine is executed (1ms)
//! Usefull to manage time delays
//!
void sof_action()
{
   cpt_sof++;
     392:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <cpt_sof>
     396:	8f 5f       	subi	r24, 0xFF	; 255
     398:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <cpt_sof>
     39c:	08 95       	ret

0000039e <usb_mass_storage_cbw>:
bit cbw_error;
U8  c;
U8  dummy;

   cbw_error = FALSE;
   Usb_select_endpoint(EP_MS_OUT);           //! check if dCBWSignature is correct
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   if (0x55 != Usb_read_byte())
     3a4:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      { cbw_error = TRUE; } //! 'U'
   if (0x53 != Usb_read_byte())
     3a8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     3ac:	83 35       	cpi	r24, 0x53	; 83
     3ae:	29 f4       	brne	.+10     	; 0x3ba <usb_mass_storage_cbw+0x1c>
{
bit cbw_error;
U8  c;
U8  dummy;

   cbw_error = FALSE;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	95 35       	cpi	r25, 0x55	; 85
     3b4:	19 f4       	brne	.+6      	; 0x3bc <usb_mass_storage_cbw+0x1e>
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <usb_mass_storage_cbw+0x1e>
   Usb_select_endpoint(EP_MS_OUT);           //! check if dCBWSignature is correct
   if (0x55 != Usb_read_byte())
      { cbw_error = TRUE; } //! 'U'
   if (0x53 != Usb_read_byte())
      { cbw_error = TRUE; } //! 'S'
     3ba:	81 e0       	ldi	r24, 0x01	; 1
   if (0x42 != Usb_read_byte())
     3bc:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     3c0:	92 34       	cpi	r25, 0x42	; 66
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <usb_mass_storage_cbw+0x28>
      { cbw_error = TRUE; } //! 'B'
     3c4:	81 e0       	ldi	r24, 0x01	; 1
   if (0x43 != Usb_read_byte())
     3c6:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     3ca:	93 34       	cpi	r25, 0x43	; 67
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <usb_mass_storage_cbw+0x34>
      { cbw_error = TRUE; } //! 'C'
   if (cbw_error)
     3ce:	88 23       	and	r24, r24
     3d0:	a9 f0       	breq	.+42     	; 0x3fc <usb_mass_storage_cbw+0x5e>
   {
      Usb_ack_receive_out();
     3d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3d6:	8b 7f       	andi	r24, 0xFB	; 251
     3d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3e0:	8f 77       	andi	r24, 0x7F	; 127
     3e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      Usb_select_endpoint(EP_MS_IN);
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      Usb_enable_stall_handshake();
     3ec:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3f0:	80 62       	ori	r24, 0x20	; 32
     3f2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      endpoint_status[(EP_MS_IN & MSK_EP_DIR)] = 0x01;
     3f6:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <endpoint_status+0x1>
      return;
     3fa:	08 95       	ret
   }

   dCBWTag[0] = Usb_read_byte();             //! Store CBW Tag to be repeated in CSW
     3fc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     400:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
   dCBWTag[1] = Usb_read_byte();
     404:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     408:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <__data_end+0x1>
   dCBWTag[2] = Usb_read_byte();
     40c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     410:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end+0x2>
   dCBWTag[3] = Usb_read_byte();
     414:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     418:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <__data_end+0x3>
   
   LSB0(g_scsi_data_remaining) = Usb_read_byte();
     41c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     420:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <g_scsi_data_remaining>
   LSB1(g_scsi_data_remaining) = Usb_read_byte();
     424:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     428:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <g_scsi_data_remaining+0x1>
   LSB2(g_scsi_data_remaining) = Usb_read_byte();
     42c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     430:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <g_scsi_data_remaining+0x2>
   LSB3(g_scsi_data_remaining) = Usb_read_byte();
     434:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     438:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <g_scsi_data_remaining+0x3>

   if (Usb_read_byte() != 0x00)              //! if (bmCBWFlags.bit7 == 1) {direction = IN}
     43c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     440:	88 23       	and	r24, r24
     442:	21 f0       	breq	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
   {
      Usb_set_ms_data_direction_in();
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <ms_data_direction>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
   }
   else
   {
      Usb_set_ms_data_direction_out();
     44c:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <ms_data_direction>
   }

   usb_LUN = Usb_read_byte();
     450:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     454:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <usb_LUN>

   if (!ms_multiple_drive)
     458:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <ms_multiple_drive>
     45c:	81 11       	cpse	r24, r1
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
   {
      usb_LUN = 0; // only LUN
     460:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <usb_LUN>
   }

   dummy      = Usb_read_byte();                // dummy CBWCBLength read
     464:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     468:	e9 ea       	ldi	r30, 0xA9	; 169
     46a:	f2 e0       	ldi	r31, 0x02	; 2


   for (c=0; c<16; c++)                         // store scsi_command
   {
      g_scsi_command[c] = Usb_read_byte();
     46c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     470:	81 93       	st	Z+, r24
   }

   dummy      = Usb_read_byte();                // dummy CBWCBLength read


   for (c=0; c<16; c++)                         // store scsi_command
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	e9 3b       	cpi	r30, 0xB9	; 185
     476:	f8 07       	cpc	r31, r24
     478:	c9 f7       	brne	.-14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
   {
      g_scsi_command[c] = Usb_read_byte();
   }
   Usb_ack_receive_out();
     47a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     47e:	8b 7f       	andi	r24, 0xFB	; 251
     480:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     484:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     488:	8f 77       	andi	r24, 0x7F	; 127
     48a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   if (Is_usb_ms_data_direction_in())
     48e:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <ms_data_direction>
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	11 f4       	brne	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
   {
      Usb_select_endpoint(EP_MS_IN);
     496:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   }

   if (TRUE != scsi_decode_command())
     49a:	df d4       	rcall	.+2494   	; 0xe5a <scsi_decode_command>
     49c:	81 30       	cpi	r24, 0x01	; 1
   {
      U8 ep;
      Usb_enable_stall_handshake();
     49e:	89 f0       	breq	.+34     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4a0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     4a4:	80 62       	ori	r24, 0x20	; 32
     4a6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      if (Is_usb_ms_data_direction_in())
     4aa:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <ms_data_direction>
     4ae:	81 30       	cpi	r24, 0x01	; 1
      {
         ep = (EP_MS_IN & MSK_EP_DIR);
      }else{
         ep = (EP_MS_OUT & MSK_EP_DIR);
     4b0:	11 f0       	breq	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	e2 e0       	ldi	r30, 0x02	; 2
   {
      U8 ep;
      Usb_enable_stall_handshake();
      if (Is_usb_ms_data_direction_in())
      {
         ep = (EP_MS_IN & MSK_EP_DIR);
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
      }else{
         ep = (EP_MS_OUT & MSK_EP_DIR);
      }
      endpoint_status[ep] = 0x01;
     4b6:	e1 e0       	ldi	r30, 0x01	; 1
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	e3 54       	subi	r30, 0x43	; 67
     4bc:	fd 4f       	sbci	r31, 0xFD	; 253
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	80 83       	st	Z, r24
     4c2:	08 95       	ret

000004c4 <usb_mass_storage_csw>:
//!
//! @param none
//!
//! @return none
void usb_mass_storage_csw (void)
{
     4c4:	cf 93       	push	r28
   Usb_select_endpoint(EP_MS_IN);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   while (Is_usb_endpoint_stall_requested())
   {
      Usb_select_endpoint(EP_CONTROL);
      if (Is_usb_receive_setup())       { usb_process_request(); }
      Usb_select_endpoint(EP_MS_IN);
     4cc:	c1 e0       	ldi	r28, 0x01	; 1
//!
//! @return none
void usb_mass_storage_csw (void)
{
   Usb_select_endpoint(EP_MS_IN);
   while (Is_usb_endpoint_stall_requested())
     4ce:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     4d2:	85 ff       	sbrs	r24, 5
     4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <usb_mass_storage_csw+0x24>
   {
      Usb_select_endpoint(EP_CONTROL);
     4d6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if (Is_usb_receive_setup())       { usb_process_request(); }
     4da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4de:	83 fd       	sbrc	r24, 3
      Usb_select_endpoint(EP_MS_IN);
     4e0:	f3 d4       	rcall	.+2534   	; 0xec8 <usb_process_request>
     4e2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   }

   Usb_select_endpoint(EP_MS_OUT);
     4e6:	f3 cf       	rjmp	.-26     	; 0x4ce <usb_mass_storage_csw+0xa>
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   while (Is_usb_endpoint_stall_requested())
     4ee:	c2 e0       	ldi	r28, 0x02	; 2
     4f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     4f4:	85 ff       	sbrs	r24, 5
   {
      Usb_select_endpoint(EP_CONTROL);
     4f6:	09 c0       	rjmp	.+18     	; 0x50a <usb_mass_storage_csw+0x46>
     4f8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if (Is_usb_receive_setup())       { usb_process_request(); }
     4fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     500:	83 fd       	sbrc	r24, 3
      Usb_select_endpoint(EP_MS_OUT);
     502:	e2 d4       	rcall	.+2500   	; 0xec8 <usb_process_request>
     504:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   }


   Usb_select_endpoint(EP_MS_IN);
     508:	f3 cf       	rjmp	.-26     	; 0x4f0 <usb_mass_storage_csw+0x2c>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   while(!Is_usb_write_enabled())
     510:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     514:	85 fd       	sbrc	r24, 5
   {
      if(!Is_usb_endpoint_enabled())   return; // USB Reset
     516:	05 c0       	rjmp	.+10     	; 0x522 <usb_mass_storage_csw+0x5e>
     518:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     51c:	80 fd       	sbrc	r24, 0
     51e:	f8 cf       	rjmp	.-16     	; 0x510 <usb_mass_storage_csw+0x4c>
   }
                                                         //! write CSW Signature
   Usb_write_byte(0x55);                                 //! 'U'
     520:	34 c0       	rjmp	.+104    	; 0x58a <usb_mass_storage_csw+0xc6>
     522:	85 e5       	ldi	r24, 0x55	; 85
     524:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(0x53);                                 //! 'S'
     528:	83 e5       	ldi	r24, 0x53	; 83
     52a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(0x42);                                 //! 'B'
     52e:	92 e4       	ldi	r25, 0x42	; 66
     530:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(0x53);                                 //! 'S'
     534:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                                                         //! write stored CBW Tag
   Usb_write_byte(dCBWTag[0]);
     538:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
     53c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(dCBWTag[1]);
     540:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <__data_end+0x1>
     544:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(dCBWTag[2]);
     548:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end+0x2>
     54c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(dCBWTag[3]);
     550:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <__data_end+0x3>
     554:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                                                         //! write data residue value
   Usb_write_byte( LSB0(g_scsi_data_remaining) );
     558:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     55c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte( LSB1(g_scsi_data_remaining) );
     560:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     564:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte( LSB2(g_scsi_data_remaining) );
     568:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     56c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte( LSB3(g_scsi_data_remaining) );
     570:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     574:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   //! write command status
   Usb_write_byte(g_scsi_status);                        //! 0 -> PASS, 1 -> FAIL
     578:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <g_scsi_status>
     57c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   Usb_send_in();
     580:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     584:	8f 77       	andi	r24, 0x7F	; 127
     586:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <storage_task>:
//! @param none
//!
//! @return none
void storage_task(void)
{
   if (Is_device_enumerated())
     58e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <usb_configuration_nb>
     592:	88 23       	and	r24, r24
     594:	49 f0       	breq	.+18     	; 0x5a8 <storage_task+0x1a>
   {
      Usb_select_endpoint(EP_MS_OUT);
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if (Is_usb_receive_out())
     59c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5a0:	82 ff       	sbrs	r24, 2
      {
         usb_mass_storage_cbw();
         usb_mass_storage_csw();
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <storage_task+0x1a>
     5a4:	fc de       	rcall	.-520    	; 0x39e <usb_mass_storage_cbw>
     5a6:	8e cf       	rjmp	.-228    	; 0x4c4 <usb_mass_storage_csw>
     5a8:	08 95       	ret

000005aa <usb_user_read_request>:
//!
//! @return TRUE,  when the request is processed
//! @return FALSE, if the request is'nt know (STALL handshake is managed by the main standard request function).
//!
Bool usb_user_read_request(U8 type, U8 request)
{
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <usb_user_read_request+0x6>
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
   U16   wInterface;
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
     5b4:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   wValue_msb = Usb_read_byte();
     5b8:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   //** Specific request from Class MassStorage
   if( USB_SETUP_SET_CLASS_INTER == type )
     5bc:	81 32       	cpi	r24, 0x21	; 33
     5be:	11 f5       	brne	.+68     	; 0x604 <usb_user_read_request+0x5a>
   {
      switch( request )
     5c0:	6f 3f       	cpi	r22, 0xFF	; 255
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <usb_user_read_request+0x1c>
     5c4:	53 c0       	rjmp	.+166    	; 0x66c <usb_user_read_request+0xc2>
      {
         case SETUP_MASS_STORAGE_RESET:
         // wValue must be 0
         // wIndex = Interface
         if( (0!=wValue_lsb) || (0!=wValue_msb) )
     5c6:	21 11       	cpse	r18, r1
     5c8:	51 c0       	rjmp	.+162    	; 0x66c <usb_user_read_request+0xc2>
     5ca:	91 11       	cpse	r25, r1
     5cc:	4f c0       	rjmp	.+158    	; 0x66c <usb_user_read_request+0xc2>
            break;
         LSB(wInterface)=Usb_read_byte();
     5ce:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5d2:	89 83       	std	Y+1, r24	; 0x01
         MSB(wInterface)=Usb_read_byte();
     5d4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     5d8:	8a 83       	std	Y+2, r24	; 0x02
         if( INTERFACE_NB != wInterface )
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	9a 81       	ldd	r25, Y+2	; 0x02
     5de:	89 2b       	or	r24, r25
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <usb_user_read_request+0x3a>
     5e2:	44 c0       	rjmp	.+136    	; 0x66c <usb_user_read_request+0xc2>
            break;
         Usb_ack_receive_setup();
     5e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5e8:	87 7f       	andi	r24, 0xF7	; 247
     5ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         Usb_send_control_in();
     5ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5f2:	8e 7f       	andi	r24, 0xFE	; 254
     5f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         while(!Is_usb_in_ready());
     5f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5fc:	80 ff       	sbrs	r24, 0
     5fe:	fc cf       	rjmp	.-8      	; 0x5f8 <usb_user_read_request+0x4e>
         return TRUE;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	35 c0       	rjmp	.+106    	; 0x66e <usb_user_read_request+0xc4>
         break;
      }
   }
   if( USB_SETUP_GET_CLASS_INTER == type )
     604:	81 3a       	cpi	r24, 0xA1	; 161
     606:	91 f5       	brne	.+100    	; 0x66c <usb_user_read_request+0xc2>
   {
      switch( request )
     608:	6e 3f       	cpi	r22, 0xFE	; 254
     60a:	81 f5       	brne	.+96     	; 0x66c <usb_user_read_request+0xc2>
      {
         case SETUP_MASS_STORAGE_GET_MAX_LUN:
         // wValue must be 0
         // wIndex = Interface
         if( (0!=wValue_lsb) || (0!=wValue_msb) )
     60c:	21 11       	cpse	r18, r1
     60e:	2e c0       	rjmp	.+92     	; 0x66c <usb_user_read_request+0xc2>
     610:	91 11       	cpse	r25, r1
     612:	2c c0       	rjmp	.+88     	; 0x66c <usb_user_read_request+0xc2>
            break;
         LSB(wInterface)=Usb_read_byte();
     614:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     618:	89 83       	std	Y+1, r24	; 0x01
         MSB(wInterface)=Usb_read_byte();
     61a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     61e:	8a 83       	std	Y+2, r24	; 0x02
         if( INTERFACE_NB != wInterface )
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	89 2b       	or	r24, r25
     626:	11 f5       	brne	.+68     	; 0x66c <usb_user_read_request+0xc2>
            break;
         Usb_ack_receive_setup();
     628:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     62c:	87 7f       	andi	r24, 0xF7	; 247
     62e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         Usb_write_byte( 0 ); // max LUN number is 0 (single device)
     632:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
         Usb_send_control_in();
     636:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     63a:	8e 7f       	andi	r24, 0xFE	; 254
     63c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         while(!Is_usb_in_ready());
     640:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     644:	80 ff       	sbrs	r24, 0
     646:	fc cf       	rjmp	.-8      	; 0x640 <usb_user_read_request+0x96>
         while( !Is_usb_receive_out() );
     648:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     64c:	82 ff       	sbrs	r24, 2
     64e:	fc cf       	rjmp	.-8      	; 0x648 <usb_user_read_request+0x9e>
         Usb_ack_receive_out();
     650:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     654:	8b 7f       	andi	r24, 0xFB	; 251
     656:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     65a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     65e:	8f 77       	andi	r24, 0x7F	; 127
     660:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         ms_multiple_drive = 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <ms_multiple_drive>
         return TRUE;
     66a:	01 c0       	rjmp	.+2      	; 0x66e <usb_user_read_request+0xc4>
         break;
      }
   }
   
   return FALSE;  // No supported request
     66c:	80 e0       	ldi	r24, 0x00	; 0
}
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <usb_user_endpoint_init>:
//! @brief This function configures the endpoints
//!
//! @param conf_nb configuration number choosed by USB host
//!
void usb_user_endpoint_init(U8 conf_nb)
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
   usb_configure_endpoint(EP_MS_IN,      \
     67c:	c9 ee       	ldi	r28, 0xE9	; 233
     67e:	d0 e0       	ldi	r29, 0x00	; 0
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	88 83       	st	Y, r24
     684:	64 e3       	ldi	r22, 0x34	; 52
     686:	81 e8       	ldi	r24, 0x81	; 129
     688:	a1 d7       	rcall	.+3906   	; 0x15cc <usb_config_ep>
                          TYPE_BULK,     \
                          DIRECTION_IN,  \
                          SIZE_64,       \
                          TWO_BANKS,     \
                          NYET_ENABLED);
   usb_configure_endpoint(EP_MS_OUT,     \
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	88 83       	st	Y, r24
     68e:	64 e3       	ldi	r22, 0x34	; 52
     690:	80 e8       	ldi	r24, 0x80	; 128
                          TYPE_BULK,     \
                          DIRECTION_OUT, \
                          SIZE_64,       \
                          TWO_BANKS,     \
                          NYET_ENABLED);
}
     692:	df 91       	pop	r29
                          TYPE_BULK,     \
                          DIRECTION_IN,  \
                          SIZE_64,       \
                          TWO_BANKS,     \
                          NYET_ENABLED);
   usb_configure_endpoint(EP_MS_OUT,     \
     694:	cf 91       	pop	r28
     696:	9a c7       	rjmp	.+3892   	; 0x15cc <usb_config_ep>

00000698 <usb_user_interface_get>:
//! @return alternate setting configurated
//!
U8   usb_user_interface_get( U16 wInterface )
{
   return 0;  // Only one alternate setting possible for all interface
}
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	08 95       	ret

0000069c <usb_user_interface_reset>:
//! @param alternate_setting  alternate setting selected
//!
void usb_user_interface_reset(U16 wInterface, U8 alternate_setting)
{  
   // default setting selected = reset data toggle
   if( INTERFACE_NB == wInterface )
     69c:	89 2b       	or	r24, r25
     69e:	19 f5       	brne	.+70     	; 0x6e6 <usb_user_interface_reset+0x4a>
   {
      // Interface Mass Storage
      Usb_select_endpoint(EP_MS_IN);
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      Usb_disable_stall_handshake();
     6a6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     6aa:	80 61       	ori	r24, 0x10	; 16
     6ac:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      Usb_reset_endpoint(EP_MS_IN);
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
     6b6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
      Usb_reset_data_toggle();
     6ba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     6be:	88 60       	ori	r24, 0x08	; 8
     6c0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      Usb_select_endpoint(EP_MS_OUT);
     6c4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      Usb_disable_stall_handshake();
     6c8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     6cc:	80 61       	ori	r24, 0x10	; 16
     6ce:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      Usb_reset_endpoint(EP_MS_OUT);
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
     6d8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
      Usb_reset_data_toggle();
     6dc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     6e0:	88 60       	ori	r24, 0x08	; 8
     6e2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     6e6:	08 95       	ret

000006e8 <usb_user_get_descriptor>:
//!
//! @return FALSE, if the global descriptor no filled
//!
Bool usb_user_get_descriptor(U8 type, U8 string)
{
   switch(type)
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	21 f5       	brne	.+72     	; 0x734 <usb_user_get_descriptor+0x4c>
   {
      case DESCRIPTOR_STRING:
      switch (string)
     6ec:	61 30       	cpi	r22, 0x01	; 1
     6ee:	89 f0       	breq	.+34     	; 0x712 <usb_user_get_descriptor+0x2a>
     6f0:	50 f0       	brcs	.+20     	; 0x706 <usb_user_get_descriptor+0x1e>
     6f2:	62 30       	cpi	r22, 0x02	; 2
     6f4:	a1 f0       	breq	.+40     	; 0x71e <usb_user_get_descriptor+0x36>
     6f6:	63 30       	cpi	r22, 0x03	; 3
     6f8:	e9 f4       	brne	.+58     	; 0x734 <usb_user_get_descriptor+0x4c>
         return TRUE;
         break;
           
#if (USB_DEVICE_SN_USE==ENABLE)              
         case SN_INDEX:
         data_to_transfer = sizeof (usb_user_serial_number);
     6fa:	8c e1       	ldi	r24, 0x1C	; 28
     6fc:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <data_to_transfer>
         pbuffer = &(usb_user_serial_number.bLength);
     700:	88 ec       	ldi	r24, 0xC8	; 200
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	11 c0       	rjmp	.+34     	; 0x728 <usb_user_get_descriptor+0x40>
   {
      case DESCRIPTOR_STRING:
      switch (string)
      {
         case LANG_ID:
         data_to_transfer = sizeof (usb_user_language_id);
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <data_to_transfer>
         pbuffer = &(usb_user_language_id.bLength);
     70c:	84 ec       	ldi	r24, 0xC4	; 196
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0b c0       	rjmp	.+22     	; 0x728 <usb_user_get_descriptor+0x40>
         return TRUE;
         break;
        
         case MAN_INDEX:
         data_to_transfer = sizeof (usb_user_manufacturer_string_descriptor);
     712:	8a e1       	ldi	r24, 0x1A	; 26
     714:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <data_to_transfer>
         pbuffer = &(usb_user_manufacturer_string_descriptor.bLength);
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	05 c0       	rjmp	.+10     	; 0x728 <usb_user_get_descriptor+0x40>
         return TRUE;
         break;
        
         case PROD_INDEX:
         data_to_transfer = sizeof (usb_user_product_string_descriptor);
     71e:	80 e2       	ldi	r24, 0x20	; 32
     720:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <data_to_transfer>
         pbuffer = &(usb_user_product_string_descriptor.bLength);
     724:	84 ee       	ldi	r24, 0xE4	; 228
     726:	90 e0       	ldi	r25, 0x00	; 0
         break;
           
#if (USB_DEVICE_SN_USE==ENABLE)              
         case SN_INDEX:
         data_to_transfer = sizeof (usb_user_serial_number);
         pbuffer = &(usb_user_serial_number.bLength);
     728:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <pbuffer+0x1>
     72c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <pbuffer>
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
         f_get_serial_string=TRUE;
         data_to_transfer += (SN_LENGTH*4);
#endif
         return TRUE;
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	08 95       	ret
         break;
#endif
      }
      break;
   }
   return FALSE;
     734:	80 e0       	ldi	r24, 0x00	; 0
}
     736:	08 95       	ret

00000738 <mem_test_unit_ready>:
{
   if (lun == 0)
      return (U8 code*)lun_name;

   return 0;   // Remove compiler warning
}
     738:	81 11       	cpse	r24, r1
     73a:	01 c0       	rjmp	.+2      	; 0x73e <mem_test_unit_ready+0x6>
     73c:	7e c7       	rjmp	.+3836   	; 0x163a <cf_test_unit_ready>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	08 95       	ret

00000744 <mem_read_capacity>:
     744:	81 11       	cpse	r24, r1
     746:	02 c0       	rjmp	.+4      	; 0x74c <mem_read_capacity+0x8>
     748:	cb 01       	movw	r24, r22
     74a:	80 c7       	rjmp	.+3840   	; 0x164c <cf_read_capacity>
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	08 95       	ret

00000752 <mem_wr_protect>:
     752:	81 11       	cpse	r24, r1
     754:	01 c0       	rjmp	.+2      	; 0x758 <mem_wr_protect+0x6>
     756:	84 c7       	rjmp	.+3848   	; 0x1660 <cf_wr_protect>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	08 95       	ret

0000075c <memory_2_usb>:
//!   It is ready    ->    CTRL_GOOD
//!   A error occur  ->    CTRL_FAIL
//!   Memory unplug  ->    CTRL_NO_PRESENT
//!
Ctrl_status    memory_2_usb( U8 lun , U32 addr , U16 nb_sector )
{
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	6a 01       	movw	r12, r20
     766:	7b 01       	movw	r14, r22
   Ctrl_status status=CTRL_FAIL;

   if (lun == 0)
     768:	81 11       	cpse	r24, r1
     76a:	08 c0       	rjmp	.+16     	; 0x77c <memory_2_usb+0x20>
      status = cf_read_10(addr , nb_sector);
     76c:	a9 01       	movw	r20, r18
     76e:	c7 01       	movw	r24, r14
     770:	b6 01       	movw	r22, r12

   return   status;
}
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
Ctrl_status    memory_2_usb( U8 lun , U32 addr , U16 nb_sector )
{
   Ctrl_status status=CTRL_FAIL;

   if (lun == 0)
      status = cf_read_10(addr , nb_sector);
     778:	cf 90       	pop	r12

   return   status;
}
     77a:	79 c7       	rjmp	.+3826   	; 0x166e <cf_read_10>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <usb_2_memory>:
//!   It is ready    ->    CTRL_GOOD
//!   A error occur  ->    CTRL_FAIL
//!   Memory unplug  ->    CTRL_NO_PRESENT
//!
Ctrl_status    usb_2_memory( U8 lun , U32 addr , U16 nb_sector )
{
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	6a 01       	movw	r12, r20
     794:	7b 01       	movw	r14, r22
   Ctrl_status status=CTRL_FAIL;

   if (lun == 0)
     796:	81 11       	cpse	r24, r1
     798:	08 c0       	rjmp	.+16     	; 0x7aa <usb_2_memory+0x20>
      status = cf_write_10(addr , nb_sector);
     79a:	a9 01       	movw	r20, r18
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12

   return   status;
}
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
Ctrl_status    usb_2_memory( U8 lun , U32 addr , U16 nb_sector )
{
   Ctrl_status status=CTRL_FAIL;

   if (lun == 0)
      status = cf_write_10(addr , nb_sector);
     7a6:	cf 90       	pop	r12

   return   status;
}
     7a8:	6b c7       	rjmp	.+3798   	; 0x1680 <cf_write_10>
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	df 90       	pop	r13
     7b4:	cf 90       	pop	r12
     7b6:	08 95       	ret

000007b8 <scheduler_init>:
   #ifdef Scheduler_task_1_init
      Scheduler_task_1_init();  
      Scheduler_call_next_init();
   #endif
   #ifdef Scheduler_task_2_init
      Scheduler_task_2_init();  
     7b8:	2f d6       	rcall	.+3166   	; 0x1418 <usb_task_init>
     7ba:	de cd       	rjmp	.-1092   	; 0x378 <storage_task_init>

000007bc <scheduler_tasks>:
      #ifdef Scheduler_task_1
         Scheduler_task_1();
         Scheduler_call_next_task();
      #endif
      #ifdef Scheduler_task_2
         Scheduler_task_2();
     7bc:	33 d6       	rcall	.+3174   	; 0x1424 <usb_task>
     7be:	e7 de       	rcall	.-562    	; 0x58e <storage_task>
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <scheduler_tasks>

000007c2 <scheduler>:
//! @param  :none
//! @return :none
void scheduler (void)
{
   scheduler_init();
   scheduler_tasks();
     7c2:	fa df       	rcall	.-12     	; 0x7b8 <scheduler_init>
     7c4:	fb df       	rcall	.-10     	; 0x7bc <scheduler_tasks>

000007c6 <send_informational_exceptions_page>:
 */
Bool sbc_prevent_allow_medium_removal(void)
{
   sbc_lun_status_is_good();
   return TRUE;
}
     7c6:	e1 ef       	ldi	r30, 0xF1	; 241
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	8c e1       	ldi	r24, 0x1C	; 28
     7cc:	80 83       	st	Z, r24
     7ce:	8a e0       	ldi	r24, 0x0A	; 10
     7d0:	80 83       	st	Z, r24
     7d2:	10 82       	st	Z, r1
     7d4:	85 e0       	ldi	r24, 0x05	; 5
     7d6:	80 83       	st	Z, r24
     7d8:	10 82       	st	Z, r1
     7da:	10 82       	st	Z, r1
     7dc:	10 82       	st	Z, r1
     7de:	10 82       	st	Z, r1
     7e0:	10 82       	st	Z, r1
     7e2:	10 82       	st	Z, r1
     7e4:	10 82       	st	Z, r1
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 83       	st	Z, r24
     7ea:	08 95       	ret

000007ec <sbc_header_mode_sense>:
     7ec:	cf 93       	push	r28
     7ee:	c8 2f       	mov	r28, r24
     7f0:	81 11       	cpse	r24, r1
     7f2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7f6:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7fa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7fe:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <usb_LUN>
     802:	a7 df       	rcall	.-178    	; 0x752 <mem_wr_protect>
     804:	88 23       	and	r24, r24
     806:	21 f0       	breq	.+8      	; 0x810 <sbc_header_mode_sense+0x24>
     808:	80 e8       	ldi	r24, 0x80	; 128
     80a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     80e:	02 c0       	rjmp	.+4      	; 0x814 <sbc_header_mode_sense+0x28>
     810:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     814:	cc 23       	and	r28, r28
     816:	31 f0       	breq	.+12     	; 0x824 <sbc_header_mode_sense+0x38>
     818:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     81c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     820:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     824:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <send_read_write_error_recovery_page>:
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     832:	9a e0       	ldi	r25, 0x0A	; 10
     834:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     838:	90 e8       	ldi	r25, 0x80	; 128
     83a:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     83e:	23 e0       	ldi	r18, 0x03	; 3
     840:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     844:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     848:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     84c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     850:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     854:	8d 30       	cpi	r24, 0x0D	; 13
     856:	40 f0       	brcs	.+16     	; 0x868 <send_read_write_error_recovery_page+0x3c>
     858:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     85c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     860:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     864:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     868:	08 95       	ret

0000086a <sbc_lun_status_is_good>:
     86a:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <g_scsi_status>
     86e:	ea eb       	ldi	r30, 0xBA	; 186
     870:	f2 e0       	ldi	r31, 0x02	; 2
     872:	10 82       	st	Z, r1
     874:	11 82       	std	Z+1, r1	; 0x01
     876:	12 82       	std	Z+2, r1	; 0x02
     878:	08 95       	ret

0000087a <sbc_request_sense>:
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	62 97       	sbiw	r28, 0x12	; 18
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <g_scsi_command+0x4>
     896:	83 31       	cpi	r24, 0x13	; 19
     898:	08 f0       	brcs	.+2      	; 0x89c <sbc_request_sense+0x22>
     89a:	82 e1       	ldi	r24, 0x12	; 18
     89c:	90 e7       	ldi	r25, 0x70	; 112
     89e:	99 83       	std	Y+1, r25	; 0x01
     8a0:	1a 82       	std	Y+2, r1	; 0x02
     8a2:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <g_scsi_sense>
     8a6:	9b 83       	std	Y+3, r25	; 0x03
     8a8:	1c 82       	std	Y+4, r1	; 0x04
     8aa:	1d 82       	std	Y+5, r1	; 0x05
     8ac:	1e 82       	std	Y+6, r1	; 0x06
     8ae:	1f 82       	std	Y+7, r1	; 0x07
     8b0:	9a e0       	ldi	r25, 0x0A	; 10
     8b2:	98 87       	std	Y+8, r25	; 0x08
     8b4:	19 86       	std	Y+9, r1	; 0x09
     8b6:	1a 86       	std	Y+10, r1	; 0x0a
     8b8:	1b 86       	std	Y+11, r1	; 0x0b
     8ba:	1c 86       	std	Y+12, r1	; 0x0c
     8bc:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <g_scsi_sense+0x1>
     8c0:	9d 87       	std	Y+13, r25	; 0x0d
     8c2:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <g_scsi_sense+0x2>
     8c6:	9e 87       	std	Y+14, r25	; 0x0e
     8c8:	1f 86       	std	Y+15, r1	; 0x0f
     8ca:	18 8a       	std	Y+16, r1	; 0x10
     8cc:	19 8a       	std	Y+17, r1	; 0x11
     8ce:	1a 8a       	std	Y+18, r1	; 0x12
     8d0:	9e 01       	movw	r18, r28
     8d2:	2f 5f       	subi	r18, 0xFF	; 255
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	f9 01       	movw	r30, r18
     8d8:	9e 2f       	mov	r25, r30
     8da:	92 1b       	sub	r25, r18
     8dc:	98 17       	cp	r25, r24
     8de:	20 f4       	brcc	.+8      	; 0x8e8 <sbc_request_sense+0x6e>
     8e0:	91 91       	ld	r25, Z+
     8e2:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8e6:	f8 cf       	rjmp	.-16     	; 0x8d8 <sbc_request_sense+0x5e>
     8e8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8ec:	9f 77       	andi	r25, 0x7F	; 127
     8ee:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8f2:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     8f6:	50 91 a6 02 	lds	r21, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     8fa:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     8fe:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     902:	8a 01       	movw	r16, r20
     904:	9b 01       	movw	r18, r22
     906:	08 1b       	sub	r16, r24
     908:	11 09       	sbc	r17, r1
     90a:	21 09       	sbc	r18, r1
     90c:	31 09       	sbc	r19, r1
     90e:	00 93 a5 02 	sts	0x02A5, r16	; 0x8002a5 <g_scsi_data_remaining>
     912:	10 93 a6 02 	sts	0x02A6, r17	; 0x8002a6 <g_scsi_data_remaining+0x1>
     916:	20 93 a7 02 	sts	0x02A7, r18	; 0x8002a7 <g_scsi_data_remaining+0x2>
     91a:	30 93 a8 02 	sts	0x02A8, r19	; 0x8002a8 <g_scsi_data_remaining+0x3>
     91e:	a5 df       	rcall	.-182    	; 0x86a <sbc_lun_status_is_good>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	62 96       	adiw	r28, 0x12	; 18
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	08 95       	ret

00000938 <sbc_lun_status_is_not_present>:

//! This fonction send the UFI status "lun not present"
//!
void sbc_lun_status_is_not_present(void)
{
   Sbc_send_failed();
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_NOT_READY, SBC_ASC_MEDIUM_NOT_PRESENT, 0x00);
     93e:	ea eb       	ldi	r30, 0xBA	; 186
     940:	f2 e0       	ldi	r31, 0x02	; 2
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	80 83       	st	Z, r24
     946:	8a e3       	ldi	r24, 0x3A	; 58
     948:	81 83       	std	Z+1, r24	; 0x01
     94a:	12 82       	std	Z+2, r1	; 0x02
     94c:	08 95       	ret

0000094e <sbc_lun_status_is_busy_or_change>:

//! This fonction send the UFI status busy and change
//!
void sbc_lun_status_is_busy_or_change(void)
{
   Sbc_send_failed();
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_UNIT_ATTENTION, SBC_ASC_NOT_READY_TO_READY_CHANGE, 0x00 );
     954:	ea eb       	ldi	r30, 0xBA	; 186
     956:	f2 e0       	ldi	r31, 0x02	; 2
     958:	86 e0       	ldi	r24, 0x06	; 6
     95a:	80 83       	st	Z, r24
     95c:	88 e2       	ldi	r24, 0x28	; 40
     95e:	81 83       	std	Z+1, r24	; 0x01
     960:	12 82       	std	Z+2, r1	; 0x02
     962:	08 95       	ret

00000964 <sbc_lun_status_is_fail>:

//! This fonction send the UFI status FAIL
//!
void sbc_lun_status_is_fail(void)
{
   Sbc_send_failed();
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_HARDWARE_ERROR, SBC_ASC_NO_ADDITIONAL_SENSE_INFORMATION, 0x00);
     96a:	ea eb       	ldi	r30, 0xBA	; 186
     96c:	f2 e0       	ldi	r31, 0x02	; 2
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	80 83       	st	Z, r24
     972:	11 82       	std	Z+1, r1	; 0x01
     974:	12 82       	std	Z+2, r1	; 0x02
     976:	08 95       	ret

00000978 <sbc_test_unit_ready>:
}


Bool sbc_test_unit_ready(void)
{
   switch ( mem_test_unit_ready(usb_LUN) )
     978:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <usb_LUN>
     97c:	dd de       	rcall	.-582    	; 0x738 <mem_test_unit_ready>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	91 05       	cpc	r25, r1
     982:	39 f0       	breq	.+14     	; 0x992 <sbc_test_unit_ready+0x1a>
     984:	83 30       	cpi	r24, 0x03	; 3
     986:	91 05       	cpc	r25, r1
     988:	31 f0       	breq	.+12     	; 0x996 <sbc_test_unit_ready+0x1e>
     98a:	89 2b       	or	r24, r25
   {
      case CTRL_GOOD :
      sbc_lun_status_is_good();
     98c:	31 f4       	brne	.+12     	; 0x99a <sbc_test_unit_ready+0x22>
      case CTRL_NO_PRESENT :
      sbc_lun_status_is_not_present();
      break;

      case CTRL_BUSY :
      sbc_lun_status_is_busy_or_change();
     98e:	6d df       	rcall	.-294    	; 0x86a <sbc_lun_status_is_good>
     990:	05 c0       	rjmp	.+10     	; 0x99c <sbc_test_unit_ready+0x24>
      break;
     992:	d2 df       	rcall	.-92     	; 0x938 <sbc_lun_status_is_not_present>

      case CTRL_FAIL :
      default :
      sbc_lun_status_is_fail();
     994:	03 c0       	rjmp	.+6      	; 0x99c <sbc_test_unit_ready+0x24>
     996:	db df       	rcall	.-74     	; 0x94e <sbc_lun_status_is_busy_or_change>
      break;
   }
   return TRUE;
}
     998:	01 c0       	rjmp	.+2      	; 0x99c <sbc_test_unit_ready+0x24>
     99a:	e4 df       	rcall	.-56     	; 0x964 <sbc_lun_status_is_fail>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	08 95       	ret

000009a0 <sbc_read_capacity>:


Bool sbc_read_capacity (void)
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <sbc_read_capacity+0x6>
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <sbc_read_capacity+0x8>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
   U32 mem_size_nb_sector;

   switch ( mem_read_capacity( usb_LUN, &mem_size_nb_sector ) )
     9ac:	be 01       	movw	r22, r28
     9ae:	6f 5f       	subi	r22, 0xFF	; 255
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <usb_LUN>
     9b6:	c6 de       	rcall	.-628    	; 0x744 <mem_read_capacity>
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	91 05       	cpc	r25, r1
     9bc:	a9 f1       	breq	.+106    	; 0xa28 <sbc_read_capacity+0x88>
     9be:	83 30       	cpi	r24, 0x03	; 3
     9c0:	91 05       	cpc	r25, r1
     9c2:	a1 f1       	breq	.+104    	; 0xa2c <sbc_read_capacity+0x8c>
     9c4:	89 2b       	or	r24, r25
     9c6:	a1 f5       	brne	.+104    	; 0xa30 <sbc_read_capacity+0x90>
   {
      case CTRL_GOOD :
      Usb_write_byte(MSB0(mem_size_nb_sector));    // return nb block
     9c8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte(MSB1(mem_size_nb_sector));
     9ce:	8b 81       	ldd	r24, Y+3	; 0x03
     9d0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte(MSB2(mem_size_nb_sector));
     9d4:	8a 81       	ldd	r24, Y+2	; 0x02
     9d6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte(MSB3(mem_size_nb_sector));
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte( 0               );           // return block size (= 512B)
     9e0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte( 0               );
     9e4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte( (U8)(512 >> 8)  );
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte( (U8)(512 & 0xFF));
     9ee:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

      Sbc_valid_write_usb(SBC_READ_CAPACITY_LENGTH);
     9f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9f6:	8f 77       	andi	r24, 0x7F	; 127
     9f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9fc:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     a00:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     a04:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     a08:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     a0c:	08 97       	sbiw	r24, 0x08	; 8
     a0e:	a1 09       	sbc	r26, r1
     a10:	b1 09       	sbc	r27, r1
     a12:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <g_scsi_data_remaining>
     a16:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <g_scsi_data_remaining+0x1>
     a1a:	a0 93 a7 02 	sts	0x02A7, r26	; 0x8002a7 <g_scsi_data_remaining+0x2>
     a1e:	b0 93 a8 02 	sts	0x02A8, r27	; 0x8002a8 <g_scsi_data_remaining+0x3>
      sbc_lun_status_is_good();
      return TRUE;
      break;

      case CTRL_NO_PRESENT :
      sbc_lun_status_is_not_present();
     a22:	23 df       	rcall	.-442    	; 0x86a <sbc_lun_status_is_good>
      break;

      case CTRL_BUSY :
      sbc_lun_status_is_busy_or_change();
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	06 c0       	rjmp	.+12     	; 0xa34 <sbc_read_capacity+0x94>
     a28:	87 df       	rcall	.-242    	; 0x938 <sbc_lun_status_is_not_present>
      break;

      case CTRL_FAIL :
      default :
      sbc_lun_status_is_fail();
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <sbc_read_capacity+0x92>
     a2c:	90 df       	rcall	.-224    	; 0x94e <sbc_lun_status_is_busy_or_change>
      break;
   }
   return FALSE;
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <sbc_read_capacity+0x92>
}
     a30:	99 df       	rcall	.-206    	; 0x964 <sbc_lun_status_is_fail>
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <sbc_lun_status_is_protected>:

//! This fonction send the UFI status FAIL because write protection
//!
void sbc_lun_status_is_protected(void)
{
   Sbc_send_failed();
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_DATA_PROTECT, SBC_ASC_WRITE_PROTECTED, 0x00);
     a48:	ea eb       	ldi	r30, 0xBA	; 186
     a4a:	f2 e0       	ldi	r31, 0x02	; 2
     a4c:	87 e0       	ldi	r24, 0x07	; 7
     a4e:	80 83       	st	Z, r24
     a50:	87 e2       	ldi	r24, 0x27	; 39
     a52:	81 83       	std	Z+1, r24	; 0x01
     a54:	12 82       	std	Z+2, r1	; 0x02
     a56:	08 95       	ret

00000a58 <sbc_lun_status_is_cdb_field>:

//! This fonction send the UFI status FAIL because CDB field is invalid
//!
void sbc_lun_status_is_cdb_field(void)
{
   Sbc_send_failed();
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_ILLEGAL_REQUEST, SBC_ASC_INVALID_FIELD_IN_CDB, 0x00);
     a5e:	ea eb       	ldi	r30, 0xBA	; 186
     a60:	f2 e0       	ldi	r31, 0x02	; 2
     a62:	85 e0       	ldi	r24, 0x05	; 5
     a64:	80 83       	st	Z, r24
     a66:	84 e2       	ldi	r24, 0x24	; 36
     a68:	81 83       	std	Z+1, r24	; 0x01
     a6a:	12 82       	std	Z+2, r1	; 0x02
     a6c:	08 95       	ret

00000a6e <sbc_inquiry>:
 * @return  FALSE: result KO,
 *          TRUE:  result OK
 *
 */
Bool sbc_inquiry (void)
{
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
   PGM_VOID_P ptr;
#else
   U8 code *ptr;
#endif

   if( (0 != (g_scsi_command[1] & 0x03) )       // CMDT and EPVD bits are 0
     a72:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <g_scsi_command+0x1>
     a76:	83 70       	andi	r24, 0x03	; 3
     a78:	21 f4       	brne	.+8      	; 0xa82 <sbc_inquiry+0x14>
   ||  (0 !=  g_scsi_command[2]         ) )     // PAGE or OPERATION CODE fields = 0x00?
     a7a:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <g_scsi_command+0x2>
     a7e:	88 23       	and	r24, r24
   {  
      // (CMDT=EVPD <> 0) or (PAGE CODE <> 0x00)
      // No standard inquiry asked
      sbc_lun_status_is_cdb_field();
     a80:	19 f0       	breq	.+6      	; 0xa88 <sbc_inquiry+0x1a>
      return FALSE;
     a82:	ea df       	rcall	.-44     	; 0xa58 <sbc_lun_status_is_cdb_field>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	40 c0       	rjmp	.+128    	; 0xb08 <__stack+0x9>
     a88:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <g_scsi_command+0x4>
     a8c:	91 36       	cpi	r25, 0x61	; 97
     a8e:	08 f0       	brcs	.+2      	; 0xa92 <sbc_inquiry+0x24>
   {
      allocation_length = SBC_MAX_INQUIRY_DATA;
   }

   // send first inquiry data (0 to 8)
   ptr = (code U8*) &sbc_std_inquiry_data;
     a90:	90 e6       	ldi	r25, 0x60	; 96
     a92:	20 e5       	ldi	r18, 0x50	; 80

   for ( i=0 ; ((i != 36) && (allocation_length > i)); i++)
     a94:	31 e0       	ldi	r19, 0x01	; 1
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	89 17       	cp	r24, r25
   {
      if( 8 == i )
     a9a:	c9 f0       	breq	.+50     	; 0xace <sbc_inquiry+0x60>
     a9c:	88 30       	cpi	r24, 0x08	; 8
      {  // send vendor id (8 to 16)
           ptr = (code U8 *) &g_sbc_vendor_id;
      }
      if( 16 == i )
     a9e:	29 f0       	breq	.+10     	; 0xaaa <sbc_inquiry+0x3c>
     aa0:	80 31       	cpi	r24, 0x10	; 16
      {  // send product id (16 to 32)
         ptr = (code U8 *) &g_sbc_product_id;
      }
      if( 32 == i )
     aa2:	31 f0       	breq	.+12     	; 0xab0 <sbc_inquiry+0x42>
     aa4:	80 32       	cpi	r24, 0x20	; 32
     aa6:	31 f4       	brne	.+12     	; 0xab4 <sbc_inquiry+0x46>

   for ( i=0 ; ((i != 36) && (allocation_length > i)); i++)
   {
      if( 8 == i )
      {  // send vendor id (8 to 16)
           ptr = (code U8 *) &g_sbc_vendor_id;
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <sbc_inquiry+0x4a>
     aaa:	2c e6       	ldi	r18, 0x6C	; 108
     aac:	31 e0       	ldi	r19, 0x01	; 1
      }
      if( 16 == i )
      {  // send product id (16 to 32)
         ptr = (code U8 *) &g_sbc_product_id;
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <sbc_inquiry+0x46>
     ab0:	2c e5       	ldi	r18, 0x5C	; 92

   for ( i=0 ; ((i != 36) && (allocation_length > i)); i++)
   {
      if( 8 == i )
      {  // send vendor id (8 to 16)
           ptr = (code U8 *) &g_sbc_vendor_id;
     ab2:	31 e0       	ldi	r19, 0x01	; 1
     ab4:	f9 01       	movw	r30, r18
      {  // send product id (16 to 32)
         ptr = (code U8 *) &g_sbc_product_id;
      }
      if( 32 == i )
      {  // send revision id (32 to 36)
         ptr = (code U8 *) &g_sbc_revision_id;
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <sbc_inquiry+0x4e>
     ab8:	e8 e5       	ldi	r30, 0x58	; 88
      }
#ifndef __GNUC__
      Usb_write_byte((U8)(*ptr++));
#else    // AVRGCC does not support point to PGM space
//warning with AVRGCC assumes devices descriptors are stored in the lower 64Kbytes of on-chip flash memory
      Usb_write_byte(pgm_read_byte_near((unsigned int)ptr++));
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	9f 01       	movw	r18, r30
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	e4 91       	lpm	r30, Z
     ac4:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   }

   // send first inquiry data (0 to 8)
   ptr = (code U8*) &sbc_std_inquiry_data;

   for ( i=0 ; ((i != 36) && (allocation_length > i)); i++)
     ac8:	8f 5f       	subi	r24, 0xFF	; 255
     aca:	84 32       	cpi	r24, 0x24	; 36
//warning with AVRGCC assumes devices descriptors are stored in the lower 64Kbytes of on-chip flash memory
      Usb_write_byte(pgm_read_byte_near((unsigned int)ptr++));
#endif

   }
   Sbc_valid_write_usb(i);
     acc:	29 f7       	brne	.-54     	; 0xa98 <sbc_inquiry+0x2a>
     ace:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ad2:	9f 77       	andi	r25, 0x7F	; 127
     ad4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ad8:	40 91 a5 02 	lds	r20, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     adc:	50 91 a6 02 	lds	r21, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     ae0:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     ae4:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     ae8:	8a 01       	movw	r16, r20
     aea:	9b 01       	movw	r18, r22
     aec:	08 1b       	sub	r16, r24
     aee:	11 09       	sbc	r17, r1
     af0:	21 09       	sbc	r18, r1
     af2:	31 09       	sbc	r19, r1
     af4:	00 93 a5 02 	sts	0x02A5, r16	; 0x8002a5 <g_scsi_data_remaining>
     af8:	10 93 a6 02 	sts	0x02A6, r17	; 0x8002a6 <g_scsi_data_remaining+0x1>
     afc:	20 93 a7 02 	sts	0x02A7, r18	; 0x8002a7 <g_scsi_data_remaining+0x2>
   sbc_lun_status_is_good();
     b00:	30 93 a8 02 	sts	0x02A8, r19	; 0x8002a8 <g_scsi_data_remaining+0x3>
     b04:	b2 de       	rcall	.-668    	; 0x86a <sbc_lun_status_is_good>
   return TRUE;      
}
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <sbc_read_10>:
   return FALSE;
}


Bool sbc_read_10 (void)
{
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	00 d0       	rcall	.+0      	; 0xb16 <sbc_read_10+0x8>
     b16:	00 d0       	rcall	.+0      	; 0xb18 <sbc_read_10+0xa>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <sbc_read_10+0xc>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
   U32   mass_addr;                       // rd or wr block address
   U16   mass_size;                       // rd or write nb of blocks

   MSB0(mass_addr) = g_scsi_command[2];   // read address
     b1e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <g_scsi_command+0x2>
     b22:	8c 83       	std	Y+4, r24	; 0x04
   MSB1(mass_addr) = g_scsi_command[3];
     b24:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <g_scsi_command+0x3>
     b28:	8b 83       	std	Y+3, r24	; 0x03
   MSB2(mass_addr) = g_scsi_command[4];
     b2a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <g_scsi_command+0x4>
     b2e:	8a 83       	std	Y+2, r24	; 0x02
   MSB3(mass_addr) = g_scsi_command[5];
     b30:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <g_scsi_command+0x5>
     b34:	89 83       	std	Y+1, r24	; 0x01

   MSB(mass_size) = g_scsi_command[7];    // read size
     b36:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <g_scsi_command+0x7>
     b3a:	8e 83       	std	Y+6, r24	; 0x06
   LSB(mass_size) = g_scsi_command[8];
     b3c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <g_scsi_command+0x8>
     b40:	8d 83       	std	Y+5, r24	; 0x05
   
   if( Is_usb_ms_data_direction_out() )
     b42:	10 91 a2 02 	lds	r17, 0x02A2	; 0x8002a2 <ms_data_direction>
     b46:	11 11       	cpse	r17, r1
   {
      sbc_lun_status_is_cdb_field();
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <sbc_read_10+0x40>
      return FALSE;
     b4a:	86 df       	rcall	.-244    	; 0xa58 <sbc_lun_status_is_cdb_field>
   }
   if( 0 == g_scsi_data_remaining )
     b4c:	56 c0       	rjmp	.+172    	; 0xbfa <sbc_read_10+0xec>
     b4e:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     b52:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     b56:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     b5a:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	a1 05       	cpc	r26, r1
     b62:	b1 05       	cpc	r27, r1
   {
      if( mass_size == (g_scsi_data_remaining/512) )
     b64:	41 f4       	brne	.+16     	; 0xb76 <sbc_read_10+0x68>
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	9e 81       	ldd	r25, Y+6	; 0x06
      {
         sbc_lun_status_is_good();
     b6a:	89 2b       	or	r24, r25
     b6c:	11 f4       	brne	.+4      	; 0xb72 <sbc_read_10+0x64>
      }else{
         sbc_lun_status_is_cdb_field();
     b6e:	7d de       	rcall	.-774    	; 0x86a <sbc_lun_status_is_good>
     b70:	3c c0       	rjmp	.+120    	; 0xbea <sbc_read_10+0xdc>
     b72:	72 df       	rcall	.-284    	; 0xa58 <sbc_lun_status_is_cdb_field>
      }
      return TRUE;
   }

   switch ( memory_2_usb( usb_LUN , mass_addr,  g_scsi_data_remaining/512 ) )
     b74:	3a c0       	rjmp	.+116    	; 0xbea <sbc_read_10+0xdc>
     b76:	39 e0       	ldi	r19, 0x09	; 9
     b78:	b6 95       	lsr	r27
     b7a:	a7 95       	ror	r26
     b7c:	97 95       	ror	r25
     b7e:	87 95       	ror	r24
     b80:	3a 95       	dec	r19
     b82:	d1 f7       	brne	.-12     	; 0xb78 <sbc_read_10+0x6a>
     b84:	49 81       	ldd	r20, Y+1	; 0x01
     b86:	5a 81       	ldd	r21, Y+2	; 0x02
     b88:	6b 81       	ldd	r22, Y+3	; 0x03
     b8a:	7c 81       	ldd	r23, Y+4	; 0x04
     b8c:	9c 01       	movw	r18, r24
     b8e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <usb_LUN>
     b92:	e4 dd       	rcall	.-1080   	; 0x75c <memory_2_usb>
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	91 05       	cpc	r25, r1
     b98:	51 f1       	breq	.+84     	; 0xbee <sbc_read_10+0xe0>
     b9a:	83 30       	cpi	r24, 0x03	; 3
     b9c:	91 05       	cpc	r25, r1
     b9e:	49 f1       	breq	.+82     	; 0xbf2 <sbc_read_10+0xe4>
     ba0:	89 2b       	or	r24, r25
   {
      case CTRL_GOOD :
      if( mass_size == (g_scsi_data_remaining/512) )
     ba2:	49 f5       	brne	.+82     	; 0xbf6 <sbc_read_10+0xe8>
     ba4:	4d 81       	ldd	r20, Y+5	; 0x05
     ba6:	5e 81       	ldd	r21, Y+6	; 0x06
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     bb0:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     bb4:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     bb8:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     bbc:	29 e0       	ldi	r18, 0x09	; 9
     bbe:	b6 95       	lsr	r27
     bc0:	a7 95       	ror	r26
     bc2:	97 95       	ror	r25
     bc4:	87 95       	ror	r24
     bc6:	2a 95       	dec	r18
     bc8:	d1 f7       	brne	.-12     	; 0xbbe <sbc_read_10+0xb0>
     bca:	48 17       	cp	r20, r24
     bcc:	59 07       	cpc	r21, r25
      {
         sbc_lun_status_is_good();
     bce:	6a 07       	cpc	r22, r26
     bd0:	7b 07       	cpc	r23, r27
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <sbc_read_10+0xca>
      }else{
         sbc_lun_status_is_cdb_field();
     bd4:	4a de       	rcall	.-876    	; 0x86a <sbc_lun_status_is_good>
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <sbc_read_10+0xcc>
      }
      g_scsi_data_remaining = 0;
     bd8:	3f df       	rcall	.-386    	; 0xa58 <sbc_lun_status_is_cdb_field>
     bda:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <g_scsi_data_remaining>
     bde:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <g_scsi_data_remaining+0x1>
      default :
      sbc_lun_status_is_fail();
      return FALSE;
      break;
   }
   return TRUE;
     be2:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <g_scsi_data_remaining+0x2>
      }
      g_scsi_data_remaining = 0;
      break;

      case CTRL_NO_PRESENT :
      sbc_lun_status_is_not_present();
     be6:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <g_scsi_data_remaining+0x3>
      return FALSE;
      break;

      case CTRL_BUSY :
      sbc_lun_status_is_busy_or_change();
     bea:	11 e0       	ldi	r17, 0x01	; 1
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <sbc_read_10+0xec>
     bee:	a4 de       	rcall	.-696    	; 0x938 <sbc_lun_status_is_not_present>
      return FALSE;
      break;

      case CTRL_FAIL :
      default :
      sbc_lun_status_is_fail();
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <sbc_read_10+0xea>
     bf2:	ad de       	rcall	.-678    	; 0x94e <sbc_lun_status_is_busy_or_change>
      return FALSE;
     bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <sbc_read_10+0xea>
      break;
   }
   return TRUE;
}
     bf6:	b6 de       	rcall	.-660    	; 0x964 <sbc_lun_status_is_fail>
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	81 2f       	mov	r24, r17
     bfc:	26 96       	adiw	r28, 0x06	; 6
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	08 95       	ret

00000c10 <sbc_write_10>:


Bool sbc_write_10 (void)
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	00 d0       	rcall	.+0      	; 0xc16 <sbc_write_10+0x6>
     c16:	00 d0       	rcall	.+0      	; 0xc18 <sbc_write_10+0x8>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <sbc_write_10+0xa>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
   U32   mass_addr;                       // rd or wr block address
   U16   mass_size;                       // rd or write nb of blocks

   MSB0(mass_addr) = g_scsi_command[2];   // read address
     c1e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <g_scsi_command+0x2>
     c22:	8c 83       	std	Y+4, r24	; 0x04
   MSB1(mass_addr) = g_scsi_command[3];
     c24:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <g_scsi_command+0x3>
     c28:	8b 83       	std	Y+3, r24	; 0x03
   MSB2(mass_addr) = g_scsi_command[4];
     c2a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <g_scsi_command+0x4>
     c2e:	8a 83       	std	Y+2, r24	; 0x02
   MSB3(mass_addr) = g_scsi_command[5];
     c30:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <g_scsi_command+0x5>
     c34:	89 83       	std	Y+1, r24	; 0x01

   MSB(mass_size) = g_scsi_command[7];    // read size
     c36:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <g_scsi_command+0x7>
     c3a:	8e 83       	std	Y+6, r24	; 0x06
   LSB(mass_size) = g_scsi_command[8];
     c3c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <g_scsi_command+0x8>
     c40:	8d 83       	std	Y+5, r24	; 0x05
   
   if( Is_usb_ms_data_direction_in() )
     c42:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <ms_data_direction>
     c46:	81 30       	cpi	r24, 0x01	; 1
   {
      sbc_lun_status_is_cdb_field();
     c48:	11 f4       	brne	.+4      	; 0xc4e <sbc_write_10+0x3e>
     c4a:	06 df       	rcall	.-500    	; 0xa58 <sbc_lun_status_is_cdb_field>
      return FALSE;
   }

   if( 0 == g_scsi_data_remaining )
     c4c:	64 c0       	rjmp	.+200    	; 0xd16 <sbc_write_10+0x106>
     c4e:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     c52:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     c56:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     c5a:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     c5e:	89 2b       	or	r24, r25
     c60:	8a 2b       	or	r24, r26
     c62:	8b 2b       	or	r24, r27
   {
      if( mass_size == (g_scsi_data_remaining/512) )
     c64:	49 f4       	brne	.+18     	; 0xc78 <sbc_write_10+0x68>
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
      {
         sbc_lun_status_is_good();
     c6a:	89 2b       	or	r24, r25
     c6c:	11 f4       	brne	.+4      	; 0xc72 <sbc_write_10+0x62>
      }else{
         sbc_lun_status_is_cdb_field();
     c6e:	fd dd       	rcall	.-1030   	; 0x86a <sbc_lun_status_is_good>
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <sbc_write_10+0x64>
      }
      return TRUE;
     c72:	f2 de       	rcall	.-540    	; 0xa58 <sbc_lun_status_is_cdb_field>
   }
   
   if( TRUE == mem_wr_protect( usb_LUN ) )
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	50 c0       	rjmp	.+160    	; 0xd18 <sbc_write_10+0x108>
     c78:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <usb_LUN>
     c7c:	6a dd       	rcall	.-1324   	; 0x752 <mem_wr_protect>
   {
      sbc_lun_status_is_protected();
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	11 f4       	brne	.+4      	; 0xc86 <sbc_write_10+0x76>
     c82:	df de       	rcall	.-578    	; 0xa42 <sbc_lun_status_is_protected>
      return FALSE;
   }

   switch (usb_2_memory( usb_LUN , mass_addr, g_scsi_data_remaining/512 ))
     c84:	48 c0       	rjmp	.+144    	; 0xd16 <sbc_write_10+0x106>
     c86:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     c8a:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     c8e:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     c92:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     c96:	39 e0       	ldi	r19, 0x09	; 9
     c98:	b6 95       	lsr	r27
     c9a:	a7 95       	ror	r26
     c9c:	97 95       	ror	r25
     c9e:	87 95       	ror	r24
     ca0:	3a 95       	dec	r19
     ca2:	d1 f7       	brne	.-12     	; 0xc98 <sbc_write_10+0x88>
     ca4:	49 81       	ldd	r20, Y+1	; 0x01
     ca6:	5a 81       	ldd	r21, Y+2	; 0x02
     ca8:	6b 81       	ldd	r22, Y+3	; 0x03
     caa:	7c 81       	ldd	r23, Y+4	; 0x04
     cac:	9c 01       	movw	r18, r24
     cae:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <usb_LUN>
     cb2:	6b dd       	rcall	.-1322   	; 0x78a <usb_2_memory>
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	91 05       	cpc	r25, r1
     cb8:	49 f1       	breq	.+82     	; 0xd0c <sbc_write_10+0xfc>
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	91 05       	cpc	r25, r1
     cbe:	41 f1       	breq	.+80     	; 0xd10 <sbc_write_10+0x100>
     cc0:	89 2b       	or	r24, r25
   {
      case CTRL_GOOD :
      if( mass_size == (g_scsi_data_remaining/512) )
     cc2:	41 f5       	brne	.+80     	; 0xd14 <sbc_write_10+0x104>
     cc4:	4d 81       	ldd	r20, Y+5	; 0x05
     cc6:	5e 81       	ldd	r21, Y+6	; 0x06
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     cd0:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     cd4:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     cd8:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     cdc:	29 e0       	ldi	r18, 0x09	; 9
     cde:	b6 95       	lsr	r27
     ce0:	a7 95       	ror	r26
     ce2:	97 95       	ror	r25
     ce4:	87 95       	ror	r24
     ce6:	2a 95       	dec	r18
     ce8:	d1 f7       	brne	.-12     	; 0xcde <sbc_write_10+0xce>
     cea:	48 17       	cp	r20, r24
     cec:	59 07       	cpc	r21, r25
      {
         sbc_lun_status_is_good();
     cee:	6a 07       	cpc	r22, r26
     cf0:	7b 07       	cpc	r23, r27
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <sbc_write_10+0xe8>
      }else{
         sbc_lun_status_is_cdb_field();
     cf4:	ba dd       	rcall	.-1164   	; 0x86a <sbc_lun_status_is_good>
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <sbc_write_10+0xea>
      }
      g_scsi_data_remaining = 0;
     cf8:	af de       	rcall	.-674    	; 0xa58 <sbc_lun_status_is_cdb_field>
     cfa:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <g_scsi_data_remaining>
     cfe:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <g_scsi_data_remaining+0x1>
     d02:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <g_scsi_data_remaining+0x2>
      break;

      case CTRL_NO_PRESENT :
      sbc_lun_status_is_not_present();
     d06:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <g_scsi_data_remaining+0x3>
      return FALSE;
      break;

      case CTRL_BUSY :
      sbc_lun_status_is_busy_or_change();
     d0a:	b4 cf       	rjmp	.-152    	; 0xc74 <sbc_write_10+0x64>
     d0c:	15 de       	rcall	.-982    	; 0x938 <sbc_lun_status_is_not_present>
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <sbc_write_10+0x106>
      return FALSE;
      break;

      case CTRL_FAIL :
      default :
      sbc_lun_status_is_fail();
     d10:	1e de       	rcall	.-964    	; 0x94e <sbc_lun_status_is_busy_or_change>
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <sbc_write_10+0x106>
      return FALSE;
     d14:	27 de       	rcall	.-946    	; 0x964 <sbc_lun_status_is_fail>
      break;
   }
   return TRUE;
}
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	26 96       	adiw	r28, 0x06	; 6
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <sbc_mode_sense>:
 * @return  FALSE: result KO,
 *          TRUE:  result OK
 *
 */
Bool sbc_mode_sense( Bool b_sense_10 )
{
     d2a:	cf 93       	push	r28
   U8 allocation_length;

   if( b_sense_10 )
     d2c:	88 23       	and	r24, r24
     d2e:	19 f0       	breq	.+6      	; 0xd36 <sbc_mode_sense+0xc>
      allocation_length = g_scsi_command[8];
     d30:	c0 91 b1 02 	lds	r28, 0x02B1	; 0x8002b1 <g_scsi_command+0x8>
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <sbc_mode_sense+0x10>
   else
      allocation_length = g_scsi_command[4];
     d36:	c0 91 ad 02 	lds	r28, 0x02AD	; 0x8002ad <g_scsi_command+0x4>

   // switch for page code
   switch ( g_scsi_command[2] & SBC_MSK_PAGE_CODE )
     d3a:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <g_scsi_command+0x2>
     d3e:	9f 73       	andi	r25, 0x3F	; 63
     d40:	9c 31       	cpi	r25, 0x1C	; 28
     d42:	51 f0       	breq	.+20     	; 0xd58 <sbc_mode_sense+0x2e>
     d44:	9f 33       	cpi	r25, 0x3F	; 63
     d46:	e1 f0       	breq	.+56     	; 0xd80 <sbc_mode_sense+0x56>
     d48:	91 30       	cpi	r25, 0x01	; 1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <sbc_mode_sense+0x24>
     d4c:	82 c0       	rjmp	.+260    	; 0xe52 <sbc_mode_sense+0x128>
      send_informational_exceptions_page();
      Sbc_valid_write_usb(SBC_MODE_DATA_LENGTH_INFORMATIONAL_EXCEPTIONS + 1);
      break;

      case SBC_PAGE_CODE_READ_WRITE_ERROR_RECOVERY:
      sbc_header_mode_sense( b_sense_10 , SBC_MODE_DATA_LENGTH_READ_WRITE_ERROR_RECOVERY );
     d4e:	6f e0       	ldi	r22, 0x0F	; 15
      send_read_write_error_recovery_page(allocation_length);
     d50:	4d dd       	rcall	.-1382   	; 0x7ec <sbc_header_mode_sense>

   // switch for page code
   switch ( g_scsi_command[2] & SBC_MSK_PAGE_CODE )
   {
      case SBC_PAGE_CODE_INFORMATIONAL_EXCEPTIONS:
      sbc_header_mode_sense( b_sense_10 , SBC_MODE_DATA_LENGTH_INFORMATIONAL_EXCEPTIONS );
     d52:	8c 2f       	mov	r24, r28
     d54:	6b dd       	rcall	.-1322   	; 0x82c <send_read_write_error_recovery_page>
      send_informational_exceptions_page();
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <sbc_mode_sense+0x34>
     d58:	6f e0       	ldi	r22, 0x0F	; 15
      break;

      case SBC_PAGE_CODE_READ_WRITE_ERROR_RECOVERY:
      sbc_header_mode_sense( b_sense_10 , SBC_MODE_DATA_LENGTH_READ_WRITE_ERROR_RECOVERY );
      send_read_write_error_recovery_page(allocation_length);
      Sbc_valid_write_usb(SBC_MODE_DATA_LENGTH_READ_WRITE_ERROR_RECOVERY + 1);
     d5a:	48 dd       	rcall	.-1392   	; 0x7ec <sbc_header_mode_sense>
     d5c:	34 dd       	rcall	.-1432   	; 0x7c6 <send_informational_exceptions_page>
     d5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d62:	8f 77       	andi	r24, 0x7F	; 127
     d64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d68:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     d6c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     d70:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     d74:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     d78:	40 97       	sbiw	r24, 0x10	; 16
     d7a:	a1 09       	sbc	r26, r1
      break;

      case SBC_PAGE_CODE_ALL:
      if( b_sense_10 ) {
     d7c:	b1 09       	sbc	r27, r1
     d7e:	4c c0       	rjmp	.+152    	; 0xe18 <sbc_mode_sense+0xee>
         sbc_header_mode_sense( b_sense_10 , (allocation_length < (SBC_MODE_DATA_LENGTH_CODE_ALL+2))? (allocation_length-2) : SBC_MODE_DATA_LENGTH_CODE_ALL );
     d80:	88 23       	and	r24, r24
     d82:	d1 f0       	breq	.+52     	; 0xdb8 <sbc_mode_sense+0x8e>
     d84:	cd 31       	cpi	r28, 0x1D	; 29
     d86:	18 f4       	brcc	.+6      	; 0xd8e <sbc_mode_sense+0x64>
     d88:	6e ef       	ldi	r22, 0xFE	; 254
     d8a:	6c 0f       	add	r22, r28
      }else{
         sbc_header_mode_sense( b_sense_10 , (allocation_length < (SBC_MODE_DATA_LENGTH_CODE_ALL+1))? (allocation_length-1) : SBC_MODE_DATA_LENGTH_CODE_ALL );
      }
      if( b_sense_10 )
      {
         if (allocation_length == 8)
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <sbc_mode_sense+0x66>
     d8e:	6b e1       	ldi	r22, 0x1B	; 27
         {
            Sbc_valid_write_usb(8);
     d90:	2d dd       	rcall	.-1446   	; 0x7ec <sbc_header_mode_sense>
     d92:	c8 30       	cpi	r28, 0x08	; 8
     d94:	61 f5       	brne	.+88     	; 0xdee <sbc_mode_sense+0xc4>
     d96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d9a:	8f 77       	andi	r24, 0x7F	; 127
     d9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     da0:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     da4:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     da8:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     dac:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     db0:	08 97       	sbiw	r24, 0x08	; 8

      case SBC_PAGE_CODE_ALL:
      if( b_sense_10 ) {
         sbc_header_mode_sense( b_sense_10 , (allocation_length < (SBC_MODE_DATA_LENGTH_CODE_ALL+2))? (allocation_length-2) : SBC_MODE_DATA_LENGTH_CODE_ALL );
      }else{
         sbc_header_mode_sense( b_sense_10 , (allocation_length < (SBC_MODE_DATA_LENGTH_CODE_ALL+1))? (allocation_length-1) : SBC_MODE_DATA_LENGTH_CODE_ALL );
     db2:	a1 09       	sbc	r26, r1
     db4:	b1 09       	sbc	r27, r1
     db6:	30 c0       	rjmp	.+96     	; 0xe18 <sbc_mode_sense+0xee>
     db8:	cc 31       	cpi	r28, 0x1C	; 28
     dba:	18 f4       	brcc	.+6      	; 0xdc2 <sbc_mode_sense+0x98>
     dbc:	6f ef       	ldi	r22, 0xFF	; 255
     dbe:	6c 0f       	add	r22, r28
            break;
         }
      }
      else
      {
         if (allocation_length == 4)
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <sbc_mode_sense+0x9a>
     dc2:	6b e1       	ldi	r22, 0x1B	; 27
         {
            Sbc_valid_write_usb(4);
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	12 dd       	rcall	.-1500   	; 0x7ec <sbc_header_mode_sense>
     dc8:	c4 30       	cpi	r28, 0x04	; 4
     dca:	89 f4       	brne	.+34     	; 0xdee <sbc_mode_sense+0xc4>
     dcc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dd6:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     dda:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     dde:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
            break;
         }
      }
      // send page by ascending order code
      send_read_write_error_recovery_page(allocation_length);  // 12 bytes
     de2:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     de6:	04 97       	sbiw	r24, 0x04	; 4
      if (allocation_length > 12)
     de8:	a1 09       	sbc	r26, r1
     dea:	b1 09       	sbc	r27, r1
      {
         send_informational_exceptions_page();                 // 12 bytes
     dec:	15 c0       	rjmp	.+42     	; 0xe18 <sbc_mode_sense+0xee>
     dee:	8c 2f       	mov	r24, r28
         Sbc_valid_write_usb(SBC_MODE_DATA_LENGTH_CODE_ALL + 1);
     df0:	1d dd       	rcall	.-1478   	; 0x82c <send_read_write_error_recovery_page>
     df2:	cd 30       	cpi	r28, 0x0D	; 13
     df4:	e0 f0       	brcs	.+56     	; 0xe2e <sbc_mode_sense+0x104>
     df6:	e7 dc       	rcall	.-1586   	; 0x7c6 <send_informational_exceptions_page>
     df8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dfc:	8f 77       	andi	r24, 0x7F	; 127
     dfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e02:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     e06:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     e0a:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     e0e:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
     e12:	4c 97       	sbiw	r24, 0x1c	; 28
     e14:	a1 09       	sbc	r26, r1
     e16:	b1 09       	sbc	r27, r1
     e18:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <g_scsi_data_remaining>
     e1c:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <g_scsi_data_remaining+0x1>
      default:
      sbc_lun_status_is_cdb_field();
      return FALSE;
      break;
   }
   sbc_lun_status_is_good();
     e20:	a0 93 a7 02 	sts	0x02A7, r26	; 0x8002a7 <g_scsi_data_remaining+0x2>
   return TRUE;
     e24:	b0 93 a8 02 	sts	0x02A8, r27	; 0x8002a8 <g_scsi_data_remaining+0x3>
         send_informational_exceptions_page();                 // 12 bytes
         Sbc_valid_write_usb(SBC_MODE_DATA_LENGTH_CODE_ALL + 1);
      }
      else
      {
         Sbc_valid_write_usb(allocation_length);
     e28:	20 dd       	rcall	.-1472   	; 0x86a <sbc_lun_status_is_good>
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <sbc_mode_sense+0x12c>
     e2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e32:	8f 77       	andi	r24, 0x7F	; 127
     e34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e38:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <g_scsi_data_remaining>
     e3c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <g_scsi_data_remaining+0x1>
     e40:	a0 91 a7 02 	lds	r26, 0x02A7	; 0x8002a7 <g_scsi_data_remaining+0x2>
     e44:	b0 91 a8 02 	lds	r27, 0x02A8	; 0x8002a8 <g_scsi_data_remaining+0x3>
      }
      break;

      default:
      sbc_lun_status_is_cdb_field();
     e48:	8c 1b       	sub	r24, r28
     e4a:	91 09       	sbc	r25, r1
      return FALSE;
     e4c:	a1 09       	sbc	r26, r1
      break;
   }
   sbc_lun_status_is_good();
   return TRUE;
}
     e4e:	b1 09       	sbc	r27, r1
     e50:	e3 cf       	rjmp	.-58     	; 0xe18 <sbc_mode_sense+0xee>
     e52:	02 de       	rcall	.-1020   	; 0xa58 <sbc_lun_status_is_cdb_field>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <scsi_decode_command>:
 */
Bool scsi_decode_command(void)
{
   Bool status;

   if (g_scsi_command[0] == SBC_CMD_WRITE_10)
     e5a:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <g_scsi_command>
     e5e:	8a 32       	cpi	r24, 0x2A	; 42
   {
      Scsi_start_write_action();
      status = sbc_write_10();
     e60:	09 f4       	brne	.+2      	; 0xe64 <scsi_decode_command+0xa>
      Scsi_stop_write_action();
      return status;
   }
   if (g_scsi_command[0] == SBC_CMD_READ_10 )
     e62:	d6 ce       	rjmp	.-596    	; 0xc10 <sbc_write_10>
   {
      Scsi_start_read_action();
      status = sbc_read_10();
     e64:	88 32       	cpi	r24, 0x28	; 40
     e66:	09 f4       	brne	.+2      	; 0xe6a <scsi_decode_command+0x10>
      Scsi_stop_read_action();
      return status;
   }

   switch (g_scsi_command[0])
     e68:	52 ce       	rjmp	.-860    	; 0xb0e <sbc_read_10>
     e6a:	8b 31       	cpi	r24, 0x1B	; 27
     e6c:	e9 f0       	breq	.+58     	; 0xea8 <scsi_decode_command+0x4e>
     e6e:	60 f4       	brcc	.+24     	; 0xe88 <scsi_decode_command+0x2e>
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	b1 f0       	breq	.+44     	; 0xea0 <scsi_decode_command+0x46>
     e74:	18 f4       	brcc	.+6      	; 0xe7c <scsi_decode_command+0x22>
      case SBC_CMD_INQUIRY:                     // 0x12 - Mandatory
      return sbc_inquiry();
      break;

      case SBC_CMD_TEST_UNIT_READY:             // 0x00 - Mandatory
      return sbc_test_unit_ready();
     e76:	81 11       	cpse	r24, r1
     e78:	1a c0       	rjmp	.+52     	; 0xeae <scsi_decode_command+0x54>
      status = sbc_read_10();
      Scsi_stop_read_action();
      return status;
   }

   switch (g_scsi_command[0])
     e7a:	7e cd       	rjmp	.-1284   	; 0x978 <sbc_test_unit_ready>
     e7c:	82 31       	cpi	r24, 0x12	; 18
     e7e:	89 f0       	breq	.+34     	; 0xea2 <scsi_decode_command+0x48>
     e80:	8a 31       	cpi	r24, 0x1A	; 26
      case SBC_CMD_READ_CAPACITY:               // 0x25 - Mandatory
      return sbc_read_capacity();
      break;

      case SBC_CMD_MODE_SENSE_6:                // 0x1A - Optional
      return sbc_mode_sense( FALSE );
     e82:	a9 f4       	brne	.+42     	; 0xeae <scsi_decode_command+0x54>
     e84:	80 e0       	ldi	r24, 0x00	; 0
      status = sbc_read_10();
      Scsi_stop_read_action();
      return status;
   }

   switch (g_scsi_command[0])
     e86:	0f c0       	rjmp	.+30     	; 0xea6 <scsi_decode_command+0x4c>
     e88:	85 32       	cpi	r24, 0x25	; 37
     e8a:	61 f0       	breq	.+24     	; 0xea4 <scsi_decode_command+0x4a>
     e8c:	18 f4       	brcc	.+6      	; 0xe94 <scsi_decode_command+0x3a>
     e8e:	8e 31       	cpi	r24, 0x1E	; 30
     e90:	59 f0       	breq	.+22     	; 0xea8 <scsi_decode_command+0x4e>
     e92:	0d c0       	rjmp	.+26     	; 0xeae <scsi_decode_command+0x54>
     e94:	8f 32       	cpi	r24, 0x2F	; 47
      case SBC_CMD_REQUEST_SENSE:               // 0x03 - Mandatory
      return sbc_request_sense();
      break;

      case SBC_CMD_INQUIRY:                     // 0x12 - Mandatory
      return sbc_inquiry();
     e96:	41 f0       	breq	.+16     	; 0xea8 <scsi_decode_command+0x4e>
     e98:	8a 35       	cpi	r24, 0x5A	; 90
      case SBC_CMD_TEST_UNIT_READY:             // 0x00 - Mandatory
      return sbc_test_unit_ready();
      break;

      case SBC_CMD_READ_CAPACITY:               // 0x25 - Mandatory
      return sbc_read_capacity();
     e9a:	49 f4       	brne	.+18     	; 0xeae <scsi_decode_command+0x54>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
      case SBC_CMD_VERIFY_10:                   // 0x2F - Optional
      sbc_lun_status_is_good();
      break;

      case SBC_CMD_MODE_SENSE_10:               // 0x5A - Optional
      return sbc_mode_sense( TRUE );
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <scsi_decode_command+0x4c>
     ea0:	ec cc       	rjmp	.-1576   	; 0x87a <sbc_request_sense>
      break;

      case SBC_CMD_START_STOP_UNIT:             // 0x1B - Optional but ignored because this command is used by the Linux 2.4 kernel,
      sbc_lun_status_is_good();                 // for which we can not reply INVALID COMMAND, otherwise the disk will not mount.
     ea2:	e5 cd       	rjmp	.-1078   	; 0xa6e <sbc_inquiry>
     ea4:	7d cd       	rjmp	.-1286   	; 0x9a0 <sbc_read_capacity>
      Sbc_send_failed();
      Sbc_build_sense(SBC_SENSE_KEY_ILLEGAL_REQUEST, SBC_ASC_INVALID_COMMAND_OPERATION_CODE, 0x00);
      return FALSE;
      break;
   }
   return TRUE;
     ea6:	41 cf       	rjmp	.-382    	; 0xd2a <sbc_mode_sense>
      return sbc_mode_sense( TRUE );
      break;

      case SBC_CMD_START_STOP_UNIT:             // 0x1B - Optional but ignored because this command is used by the Linux 2.4 kernel,
      sbc_lun_status_is_good();                 // for which we can not reply INVALID COMMAND, otherwise the disk will not mount.
      break;                                    
     ea8:	e0 dc       	rcall	.-1600   	; 0x86a <sbc_lun_status_is_good>
      case SBC_CMD_WRITE_BUFFER:                // 0x3B - Optional
      case SBC_CMD_RESERVE_10:                  // 0x56 - Mandatory
      case SBC_CMD_RELEASE_10:                  // 0x57 - Mandatory - see chapter 7.16 - SPC 2
      default:
      // Command not supported
      Sbc_send_failed();
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	08 95       	ret
     eae:	81 e0       	ldi	r24, 0x01	; 1
      Sbc_build_sense(SBC_SENSE_KEY_ILLEGAL_REQUEST, SBC_ASC_INVALID_COMMAND_OPERATION_CODE, 0x00);
     eb0:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <g_scsi_status>
     eb4:	85 e0       	ldi	r24, 0x05	; 5
     eb6:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <g_scsi_sense>
     eba:	80 e2       	ldi	r24, 0x20	; 32
     ebc:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <g_scsi_sense+0x1>
      return FALSE;
     ec0:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <g_scsi_sense+0x2>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	08 95       	ret

00000ec8 <usb_process_request>:
//! @brief This function reads the SETUP request sent to the default control endpoint
//! and calls the appropriate function. When exiting of the usb_read_request
//! function, the device is ready to manage the next request.
//!
void usb_process_request(void)
{
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <usb_process_request+0xa>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
   U8 bmRequestType;
   U8 bmRequest;

   Usb_ack_control_out();
     ed6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eda:	8b 7f       	andi	r24, 0xFB	; 251
     edc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   bmRequestType = Usb_read_byte();
     ee0:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   bmRequest     = Usb_read_byte();
     ee4:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   switch (bmRequest)
     ee8:	80 2f       	mov	r24, r16
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	8c 30       	cpi	r24, 0x0C	; 12
     eee:	91 05       	cpc	r25, r1
     ef0:	08 f0       	brcs	.+2      	; 0xef4 <usb_process_request+0x2c>
     ef2:	fe c1       	rjmp	.+1020   	; 0x12f0 <usb_process_request+0x428>
     ef4:	fc 01       	movw	r30, r24
     ef6:	ea 5a       	subi	r30, 0xAA	; 170
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	0c 94 af 11 	jmp	0x235e	; 0x235e <__tablejump2__>
   {
      case SETUP_GET_DESCRIPTOR:
      if (USB_SETUP_GET_STAND_DEVICE == bmRequestType)
     efe:	10 38       	cpi	r17, 0x80	; 128
     f00:	09 f0       	breq	.+2      	; 0xf04 <usb_process_request+0x3c>
     f02:	f6 c1       	rjmp	.+1004   	; 0x12f0 <usb_process_request+0x428>
   U16  sn_index=0;
   U8   initial_data_to_transfer;
#endif
    
   zlp             = FALSE;                  /* no zero length packet */
   string_type     = Usb_read_byte();        /* read LSB of wValue    */
     f04:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   descriptor_type = Usb_read_byte();        /* read MSB of wValue    */
     f08:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   switch (descriptor_type)
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	41 f0       	breq	.+16     	; 0xf20 <usb_process_request+0x58>
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	81 f4       	brne	.+32     	; 0xf34 <usb_process_request+0x6c>
      data_to_transfer = Usb_get_dev_desc_length(); //!< sizeof (usb_user_device_descriptor);
      pbuffer          = Usb_get_dev_desc_pointer();
      break;
      
      case DESCRIPTOR_CONFIGURATION:
      data_to_transfer = Usb_get_conf_desc_length(); //!< sizeof (usb_user_configuration_descriptor);
     f14:	80 e2       	ldi	r24, 0x20	; 32
     f16:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <data_to_transfer>
      pbuffer          = Usb_get_conf_desc_pointer();
     f1a:	8e e1       	ldi	r24, 0x1E	; 30
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <usb_process_request+0x62>
   descriptor_type = Usb_read_byte();        /* read MSB of wValue    */

   switch (descriptor_type)
   {
      case DESCRIPTOR_DEVICE:
      data_to_transfer = Usb_get_dev_desc_length(); //!< sizeof (usb_user_device_descriptor);
     f20:	82 e1       	ldi	r24, 0x12	; 18
     f22:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <data_to_transfer>
      pbuffer          = Usb_get_dev_desc_pointer();
     f26:	8e e3       	ldi	r24, 0x3E	; 62
     f28:	91 e0       	ldi	r25, 0x01	; 1
      break;
      
      case DESCRIPTOR_CONFIGURATION:
      data_to_transfer = Usb_get_conf_desc_length(); //!< sizeof (usb_user_configuration_descriptor);
      pbuffer          = Usb_get_conf_desc_pointer();
     f2a:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <pbuffer+0x1>
     f2e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <pbuffer>
      break;
      
      default:
      if( !usb_user_get_descriptor(descriptor_type, string_type))
     f32:	04 c0       	rjmp	.+8      	; 0xf3c <usb_process_request+0x74>
     f34:	d9 db       	rcall	.-2126   	; 0x6e8 <usb_user_get_descriptor>
     f36:	88 23       	and	r24, r24
     f38:	09 f4       	brne	.+2      	; 0xf3c <usb_process_request+0x74>
         return FALSE;  // Unknow descriptor then stall request
      break;
   }

   dummy = Usb_read_byte();                     //!< don't care of wIndex field
     f3a:	da c1       	rjmp	.+948    	; 0x12f0 <usb_process_request+0x428>
     f3c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   dummy = Usb_read_byte();
     f40:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   LSB(wLength) = Usb_read_byte();              //!< read wLength
     f44:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   MSB(wLength) = Usb_read_byte();
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_ack_receive_setup() ;                  //!< clear the receive setup flag
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f54:	87 7f       	andi	r24, 0xF7	; 247
     f56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   if (wLength > data_to_transfer)
     f5a:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <data_to_transfer>
     f5e:	29 81       	ldd	r18, Y+1	; 0x01
     f60:	3a 81       	ldd	r19, Y+2	; 0x02
     f62:	48 2f       	mov	r20, r24
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	42 17       	cp	r20, r18
     f68:	53 07       	cpc	r21, r19
   {
      if ((data_to_transfer % EP_CONTROL_LENGTH) == 0) { zlp = TRUE; }
     f6a:	20 f4       	brcc	.+8      	; 0xf74 <usb_process_request+0xac>
     f6c:	8f 73       	andi	r24, 0x3F	; 63
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	21 f0       	breq	.+8      	; 0xf7a <usb_process_request+0xb2>
      else { zlp = FALSE; }                   //!< no need of zero length packet
   }
   else
   {
      data_to_transfer = (U8)wLength;         //!< send only requested number of data
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <usb_process_request+0xb0>
     f74:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <data_to_transfer>
   }

   Usb_ack_nak_out();
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      
      if (Is_usb_nak_out_sent())
         break;
      if (Is_usb_vbus_low())
         break;
      Usb_send_control_in();
     f7e:	8f 7e       	andi	r24, 0xEF	; 239
     f80:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    
   byte_to_send=0;
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
     f84:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <data_to_transfer>
     f88:	81 11       	cpse	r24, r1
   
#if (USE_DEVICE_SN_UNIQUE==ENABLE)      
   f_get_serial_string=FALSE;                                                   //end of signature transmission    
#endif   

   if((zlp == TRUE) && (!Is_usb_nak_out_sent()))
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <usb_process_request+0xcc>
     f8c:	91 30       	cpi	r25, 0x01	; 1
     f8e:	09 f0       	breq	.+2      	; 0xf92 <usb_process_request+0xca>
     f90:	4e c0       	rjmp	.+156    	; 0x102e <usb_process_request+0x166>
    
   byte_to_send=0;
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
     f92:	37 c0       	rjmp	.+110    	; 0x1002 <usb_process_request+0x13a>
     f94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f98:	84 fd       	sbrc	r24, 4
   {
      while(!Is_usb_read_control_enabled())
     f9a:	f8 cf       	rjmp	.-16     	; 0xf8c <usb_process_request+0xc4>
     f9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fa0:	80 fd       	sbrc	r24, 0
      {
         if (Is_usb_nak_out_sent())
     fa2:	08 c0       	rjmp	.+16     	; 0xfb4 <usb_process_request+0xec>
     fa4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fa8:	84 fd       	sbrc	r24, 4
            break;    // don't clear the flag now, it will be cleared after
         if (Is_usb_vbus_low())
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <usb_process_request+0xec>
     fac:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     fb0:	80 fd       	sbrc	r24, 0
     fb2:	f4 cf       	rjmp	.-24     	; 0xf9c <usb_process_request+0xd4>
            break;          
      }
              
      nb_byte=0;
      while(data_to_transfer != 0)        //!< Send data until necessary
     fb4:	81 e4       	ldi	r24, 0x41	; 65
     fb6:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <data_to_transfer>
     fba:	22 23       	and	r18, r18
     fbc:	b1 f0       	breq	.+44     	; 0xfea <usb_process_request+0x122>
      {
         if(nb_byte++==EP_CONTROL_LENGTH) //!< Check endpoint 0 size
     fbe:	81 50       	subi	r24, 0x01	; 1
         else
         {
            Usb_write_PGM_byte(pbuffer++);                                                 //Write a flash byte to USB        
         }        
#else          
         Usb_write_PGM_byte(pbuffer++);          
     fc0:	a1 f0       	breq	.+40     	; 0xfea <usb_process_request+0x122>
     fc2:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <pbuffer>
     fc6:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <pbuffer+0x1>
     fca:	9f 01       	movw	r18, r30
     fcc:	2f 5f       	subi	r18, 0xFF	; 255
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	30 93 c7 02 	sts	0x02C7, r19	; 0x8002c7 <pbuffer+0x1>
     fd4:	20 93 c6 02 	sts	0x02C6, r18	; 0x8002c6 <pbuffer>
     fd8:	e4 91       	lpm	r30, Z
     fda:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
#endif
         data_to_transfer --;                                                             //decrements the number of bytes to transmit.
     fde:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <data_to_transfer>
     fe2:	21 50       	subi	r18, 0x01	; 1
     fe4:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <data_to_transfer>
      }
      
      if (Is_usb_nak_out_sent())
     fe8:	e6 cf       	rjmp	.-52     	; 0xfb6 <usb_process_request+0xee>
     fea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fee:	84 fd       	sbrc	r24, 4
         break;
      if (Is_usb_vbus_low())
     ff0:	cd cf       	rjmp	.-102    	; 0xf8c <usb_process_request+0xc4>
     ff2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     ff6:	80 ff       	sbrs	r24, 0
         break;
      Usb_send_control_in();
     ff8:	c9 cf       	rjmp	.-110    	; 0xf8c <usb_process_request+0xc4>
     ffa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ffe:	8e 7f       	andi	r24, 0xFE	; 254
   
#if (USE_DEVICE_SN_UNIQUE==ENABLE)      
   f_get_serial_string=FALSE;                                                   //end of signature transmission    
#endif   

   if((zlp == TRUE) && (!Is_usb_nak_out_sent()))
    1000:	bf cf       	rjmp	.-130    	; 0xf80 <usb_process_request+0xb8>
    1002:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1006:	84 fd       	sbrc	r24, 4
   {
      while(!Is_usb_read_control_enabled()) {if(Is_usb_vbus_low())break;}
    1008:	12 c0       	rjmp	.+36     	; 0x102e <usb_process_request+0x166>
    100a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    100e:	80 fd       	sbrc	r24, 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <usb_process_request+0x152>
    1012:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1016:	80 fd       	sbrc	r24, 0
      Usb_send_control_in();
    1018:	f8 cf       	rjmp	.-16     	; 0x100a <usb_process_request+0x142>
    101a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    101e:	8e 7f       	andi	r24, 0xFE	; 254
    1020:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   }

   while (!(Is_usb_nak_out_sent())) {if(Is_usb_vbus_low())break;}
    1024:	04 c0       	rjmp	.+8      	; 0x102e <usb_process_request+0x166>
    1026:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    102a:	80 ff       	sbrs	r24, 0
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <usb_process_request+0x16e>
    102e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1032:	84 ff       	sbrs	r24, 4
   Usb_ack_nak_out();
    1034:	f8 cf       	rjmp	.-16     	; 0x1026 <usb_process_request+0x15e>
    1036:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    103a:	8f 7e       	andi	r24, 0xEF	; 239
    103c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   Usb_ack_control_out();
    1040:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1044:	8b 7f       	andi	r24, 0xFB	; 251
            return;
      }
      break;

      case SETUP_GET_CONFIGURATION:
      if (USB_SETUP_GET_STAND_DEVICE == bmRequestType)
    1046:	46 c0       	rjmp	.+140    	; 0x10d4 <usb_process_request+0x20c>
    1048:	10 38       	cpi	r17, 0x80	; 128
    104a:	09 f0       	breq	.+2      	; 0x104e <usb_process_request+0x186>
//! This function manages the GET CONFIGURATION request. The current
//! configuration number is returned.
//!
void usb_get_configuration(void)
{
   Usb_ack_receive_setup();
    104c:	51 c1       	rjmp	.+674    	; 0x12f0 <usb_process_request+0x428>
    104e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1052:	87 7f       	andi	r24, 0xF7	; 247
    1054:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   Usb_write_byte(usb_configuration_nb);
    1058:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <usb_configuration_nb>
    105c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_ack_in_ready();
    1060:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1064:	8e 7f       	andi	r24, 0xFE	; 254
    1066:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    106a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    106e:	8f 77       	andi	r24, 0x7F	; 127
    1070:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   while( !Is_usb_receive_out() ){if(Is_usb_vbus_low())break;}
    1074:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1078:	82 fd       	sbrc	r24, 2
    107a:	24 c0       	rjmp	.+72     	; 0x10c4 <usb_process_request+0x1fc>
    107c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1080:	80 fd       	sbrc	r24, 0
    1082:	f8 cf       	rjmp	.-16     	; 0x1074 <usb_process_request+0x1ac>
Bool usb_get_status( U8 bmRequestType )
{
   U8 wIndex;
   U8 dummy;

   dummy    = Usb_read_byte();                 //!< dummy read
    1084:	1f c0       	rjmp	.+62     	; 0x10c4 <usb_process_request+0x1fc>
    1086:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   dummy    = Usb_read_byte();                 //!< dummy read
    108a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   wIndex   = Usb_read_byte();
    108e:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   switch(bmRequestType)
    1092:	11 38       	cpi	r17, 0x81	; 129
    1094:	09 f0       	breq	.+2      	; 0x1098 <usb_process_request+0x1d0>
      Usb_ack_receive_setup();
      Usb_write_byte(device_status);
      break;

      case USB_SETUP_GET_STAND_INTERFACE:
      Usb_ack_receive_setup();
    1096:	cc c0       	rjmp	.+408    	; 0x1230 <usb_process_request+0x368>
    1098:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    109c:	87 7f       	andi	r24, 0xF7	; 247
    109e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      Usb_write_byte(0);      // Reserved - always 0
    10a2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      break;
    
      default:
      return FALSE;
   }
   Usb_write_byte(0);
    10a6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   Usb_send_control_in();
    10aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ae:	8e 7f       	andi	r24, 0xFE	; 254
    10b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   while( !Is_usb_receive_out() ){if(Is_usb_vbus_low())break;}
    10b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10b8:	82 fd       	sbrc	r24, 2
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <usb_process_request+0x1fc>
    10bc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    10c0:	80 fd       	sbrc	r24, 0

   Usb_write_byte(usb_configuration_nb);
   Usb_ack_in_ready();

   while( !Is_usb_receive_out() ){if(Is_usb_vbus_low())break;}
   Usb_ack_receive_out();
    10c2:	f8 cf       	rjmp	.-16     	; 0x10b4 <usb_process_request+0x1ec>
    10c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10c8:	8b 7f       	andi	r24, 0xFB	; 251
    10ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10d2:	8f 77       	andi	r24, 0x7F	; 127
    10d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         return;
      }
      break;

      case SETUP_SET_ADDRESS:
      if (USB_SETUP_SET_STAND_DEVICE == bmRequestType)
    10d8:	1d c1       	rjmp	.+570    	; 0x1314 <usb_process_request+0x44c>
    10da:	11 11       	cpse	r17, r1
//! This function manages the SET ADDRESS request. When complete, the device
//! will filter the requests using the new address.
//!
void usb_set_address(void)
{
   U8 addr = Usb_read_byte();
    10dc:	09 c1       	rjmp	.+530    	; 0x12f0 <usb_process_request+0x428>
    10de:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_configure_address(addr);
    10e2:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    10e6:	90 78       	andi	r25, 0x80	; 128
    10e8:	8f 77       	andi	r24, 0x7F	; 127
    10ea:	89 2b       	or	r24, r25
    10ec:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

   Usb_ack_receive_setup();
    10f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10f4:	87 7f       	andi	r24, 0xF7	; 247
    10f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   Usb_send_control_in();                    // send a ZLP for STATUS phase
    10fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10fe:	8e 7f       	andi	r24, 0xFE	; 254
    1100:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   while(!Is_usb_in_ready()) {if(Is_usb_vbus_low())break;} // waits for status phase done
    1104:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1108:	80 fd       	sbrc	r24, 0
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <usb_process_request+0x24c>
    110c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1110:	80 fd       	sbrc	r24, 0
                                             // before using the new address
   Usb_enable_address();
    1112:	f8 cf       	rjmp	.-16     	; 0x1104 <usb_process_request+0x23c>
    1114:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
         return;
      }
      break;

      case SETUP_SET_CONFIGURATION:
      if (USB_SETUP_SET_STAND_DEVICE == bmRequestType)
    111e:	fa c0       	rjmp	.+500    	; 0x1314 <usb_process_request+0x44c>
    1120:	11 11       	cpse	r17, r1
Bool usb_set_configuration( void )
{
   U8 configuration_number;

   // Get/Check new configuration
   configuration_number = Usb_read_byte();
    1122:	e6 c0       	rjmp	.+460    	; 0x12f0 <usb_process_request+0x428>
    1124:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   if (configuration_number > NB_CONFIGURATION)
    1128:	92 30       	cpi	r25, 0x02	; 2
    112a:	08 f0       	brcs	.+2      	; 0x112e <usb_process_request+0x266>
      return FALSE;  //  Bad configuration number then stall request
   Usb_ack_receive_setup();
    112c:	e1 c0       	rjmp	.+450    	; 0x12f0 <usb_process_request+0x428>
    112e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1132:	87 7f       	andi	r24, 0xF7	; 247
    1134:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   usb_configuration_nb = configuration_number;
    1138:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <usb_configuration_nb>
   
   Usb_send_control_in();                          // send a ZLP for STATUS phase
    113c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1140:	8e 7f       	andi	r24, 0xFE	; 254
    1142:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   usb_user_endpoint_init(usb_configuration_nb);   // endpoint configuration
    1146:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <usb_configuration_nb>
      // OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      endpoint_status[(EP_CONTROL & MSK_EP_DIR)] = 0x01;
   }
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
      return FALSE;  //  Bad configuration number then stall request
   Usb_ack_receive_setup();
   usb_configuration_nb = configuration_number;
   
   Usb_send_control_in();                          // send a ZLP for STATUS phase
   usb_user_endpoint_init(usb_configuration_nb);   // endpoint configuration
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
{
   U8 wValue;
   U8 wIndex;
   U8 dummy;

   switch (bmRequestType)
    1156:	90 ca       	rjmp	.-2784   	; 0x678 <usb_user_endpoint_init>
    1158:	11 23       	and	r17, r17
    115a:	a9 f1       	breq	.+106    	; 0x11c6 <usb_process_request+0x2fe>
    115c:	12 30       	cpi	r17, 0x02	; 2
    115e:	09 f0       	breq	.+2      	; 0x1162 <usb_process_request+0x29a>
      case USB_SETUP_SET_STAND_INTERFACE:
      return FALSE;                    // Unknow request
      break;
      
      case USB_SETUP_SET_STAND_ENDPOINT:
      wValue = Usb_read_byte();
    1160:	c7 c0       	rjmp	.+398    	; 0x12f0 <usb_process_request+0x428>
    1162:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      dummy  = Usb_read_byte();
    1166:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      if (wValue != FEATURE_ENDPOINT_HALT)
    116a:	81 11       	cpse	r24, r1
         return FALSE;                 // Unknow request
      wIndex = (Usb_read_byte() & MSK_EP_DIR);
    116c:	c1 c0       	rjmp	.+386    	; 0x12f0 <usb_process_request+0x428>
    116e:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_select_endpoint(wIndex);
    1172:	ef 77       	andi	r30, 0x7F	; 127
    1174:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if( !Is_usb_endpoint_enabled())
    1178:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    117c:	80 ff       	sbrs	r24, 0
      {
         Usb_select_endpoint(EP_CONTROL);
         return FALSE;              // Invalid request
      } 
      if(wIndex != EP_CONTROL)
    117e:	40 c0       	rjmp	.+128    	; 0x1200 <usb_process_request+0x338>
    1180:	ee 23       	and	r30, r30
      {
         Usb_disable_stall_handshake();
    1182:	a9 f0       	breq	.+42     	; 0x11ae <usb_process_request+0x2e6>
    1184:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1188:	80 61       	ori	r24, 0x10	; 16
    118a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
         Usb_reset_endpoint(wIndex);
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 2e       	mov	r0, r30
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <usb_process_request+0x2d0>
    1196:	88 0f       	add	r24, r24
    1198:	0a 94       	dec	r0
    119a:	ea f7       	brpl	.-6      	; 0x1196 <usb_process_request+0x2ce>
    119c:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    11a0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
         Usb_reset_data_toggle();
    11a4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11a8:	88 60       	ori	r24, 0x08	; 8
    11aa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      }
      Usb_select_endpoint(EP_CONTROL);
    11ae:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      endpoint_status[wIndex] = 0x00;
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	e3 54       	subi	r30, 0x43	; 67
    11b6:	fd 4f       	sbci	r31, 0xFD	; 253
    11b8:	10 82       	st	Z, r1
{
   U8 wValue;
   U8 wIndex;
   U8 dummy;

   switch (bmRequestType)
    11ba:	31 c0       	rjmp	.+98     	; 0x121e <usb_process_request+0x356>
    11bc:	11 23       	and	r17, r17
    11be:	19 f0       	breq	.+6      	; 0x11c6 <usb_process_request+0x2fe>
    11c0:	12 30       	cpi	r17, 0x02	; 2
    11c2:	21 f0       	breq	.+8      	; 0x11cc <usb_process_request+0x304>
   {
      case USB_SETUP_SET_STAND_DEVICE:
      wValue = Usb_read_byte();
    11c4:	95 c0       	rjmp	.+298    	; 0x12f0 <usb_process_request+0x428>
    11c6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      case USB_SETUP_SET_STAND_INTERFACE:
      return FALSE;                    // Unknow request
      break;

      case USB_SETUP_SET_STAND_ENDPOINT:
      wValue   = Usb_read_byte();
    11ca:	92 c0       	rjmp	.+292    	; 0x12f0 <usb_process_request+0x428>
    11cc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      dummy    = Usb_read_byte();                //!< dummy read
    11d0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      if (wValue != FEATURE_ENDPOINT_HALT)
    11d4:	81 11       	cpse	r24, r1
         return FALSE;                 // Unknow request
      wIndex = (Usb_read_byte() & MSK_EP_DIR);
    11d6:	8c c0       	rjmp	.+280    	; 0x12f0 <usb_process_request+0x428>
    11d8:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      if (wIndex == EP_CONTROL)
    11dc:	ef 77       	andi	r30, 0x7F	; 127
      {
         Usb_enable_stall_handshake();
    11de:	51 f4       	brne	.+20     	; 0x11f4 <usb_process_request+0x32c>
    11e0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11e4:	80 62       	ori	r24, 0x20	; 32
    11e6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
         Usb_ack_receive_setup();
    11ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11ee:	87 7f       	andi	r24, 0xF7	; 247
    11f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      }
      Usb_select_endpoint(wIndex);
    11f4:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if( !Is_usb_endpoint_enabled())
    11f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11fc:	80 fd       	sbrc	r24, 0
      {
         Usb_select_endpoint(EP_CONTROL);
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <usb_process_request+0x33e>
    1200:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
         return FALSE;              // Invalid request
      }
      Usb_enable_stall_handshake();
    1204:	75 c0       	rjmp	.+234    	; 0x12f0 <usb_process_request+0x428>
    1206:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    120a:	80 62       	ori	r24, 0x20	; 32
    120c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      Usb_select_endpoint(EP_CONTROL);
    1210:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      endpoint_status[wIndex] = 0x01;
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	e3 54       	subi	r30, 0x43	; 67
    1218:	fd 4f       	sbci	r31, 0xFD	; 253
    121a:	81 e0       	ldi	r24, 0x01	; 1
      Usb_ack_receive_setup();
    121c:	80 83       	st	Z, r24
    121e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1222:	87 7f       	andi	r24, 0xF7	; 247
    1224:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      Usb_send_control_in();
    1228:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    122c:	8e 7f       	andi	r24, 0xFE	; 254

   dummy    = Usb_read_byte();                 //!< dummy read
   dummy    = Usb_read_byte();                 //!< dummy read
   wIndex   = Usb_read_byte();

   switch(bmRequestType)
    122e:	52 cf       	rjmp	.-348    	; 0x10d4 <usb_process_request+0x20c>
    1230:	12 38       	cpi	r17, 0x82	; 130
    1232:	21 f0       	breq	.+8      	; 0x123c <usb_process_request+0x374>
    1234:	10 38       	cpi	r17, 0x80	; 128
    1236:	09 f0       	breq	.+2      	; 0x123a <usb_process_request+0x372>
    1238:	5b c0       	rjmp	.+182    	; 0x12f0 <usb_process_request+0x428>
      Usb_ack_receive_setup();
      Usb_write_byte(0);      // Reserved - always 0
      break;

      case USB_SETUP_GET_STAND_ENDPOINT:
      Usb_ack_receive_setup();
    123a:	2e cf       	rjmp	.-420    	; 0x1098 <usb_process_request+0x1d0>
    123c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1240:	87 7f       	andi	r24, 0xF7	; 247
    1242:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      wIndex = wIndex & MSK_EP_DIR;
      Usb_write_byte( endpoint_status[wIndex] );
    1246:	ef 77       	andi	r30, 0x7F	; 127
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	e3 54       	subi	r30, 0x43	; 67
    124c:	fd 4f       	sbci	r31, 0xFD	; 253
    124e:	80 81       	ld	r24, Z
    1250:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      if (usb_get_status(bmRequestType))
         return;
      break;

      case SETUP_GET_INTERFACE:
      if (USB_SETUP_GET_STAND_INTERFACE == bmRequestType)
    1254:	28 cf       	rjmp	.-432    	; 0x10a6 <usb_process_request+0x1de>
    1256:	11 38       	cpi	r17, 0x81	; 129
    1258:	09 f0       	breq	.+2      	; 0x125c <usb_process_request+0x394>
   U16   wInterface;
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
    125a:	4a c0       	rjmp	.+148    	; 0x12f0 <usb_process_request+0x428>
    125c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   wValue_msb = Usb_read_byte();
    1260:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   // wValue = Alternate Setting
   // wIndex = Interface
   LSB(wInterface)=Usb_read_byte();
    1264:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   MSB(wInterface)=Usb_read_byte();
    1268:	99 83       	std	Y+1, r25	; 0x01
    126a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   if( (0!=wValue_msb) || (0!=wValue_msb) )
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	81 11       	cpse	r24, r1
      return FALSE;
   Usb_ack_receive_setup();
    1272:	3e c0       	rjmp	.+124    	; 0x12f0 <usb_process_request+0x428>
    1274:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1278:	87 7f       	andi	r24, 0xF7	; 247
   
   Usb_write_byte( usb_user_interface_get(wInterface) );
    127a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	0a da       	rcall	.-3052   	; 0x698 <usb_user_interface_get>
   Usb_send_control_in();
    1284:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1288:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    128c:	8e 7f       	andi	r24, 0xFE	; 254

   while( !Is_usb_receive_out() ){if(Is_usb_vbus_low())break;}
    128e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1292:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1296:	82 fd       	sbrc	r24, 2
    1298:	15 cf       	rjmp	.-470    	; 0x10c4 <usb_process_request+0x1fc>
    129a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    129e:	80 fd       	sbrc	r24, 0
            return;
      }
      break;

      case SETUP_SET_INTERFACE:
      if (bmRequestType == USB_SETUP_SET_STAND_INTERFACE)
    12a0:	f8 cf       	rjmp	.-16     	; 0x1292 <usb_process_request+0x3ca>
    12a2:	10 cf       	rjmp	.-480    	; 0x10c4 <usb_process_request+0x1fc>
   U16   wInterface;
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
    12a4:	11 30       	cpi	r17, 0x01	; 1
    12a6:	21 f5       	brne	.+72     	; 0x12f0 <usb_process_request+0x428>
   wValue_msb = Usb_read_byte();
    12a8:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   // wValue = Alternate Setting
   // wIndex = Interface
   LSB(wInterface)=Usb_read_byte();
    12ac:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    12b0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   MSB(wInterface)=Usb_read_byte();
    12b4:	99 83       	std	Y+1, r25	; 0x01
    12b6:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   if( 0!=wValue_msb )
    12ba:	9a 83       	std	Y+2, r25	; 0x02
      return FALSE;
   Usb_ack_receive_setup();
    12bc:	81 11       	cpse	r24, r1
    12be:	18 c0       	rjmp	.+48     	; 0x12f0 <usb_process_request+0x428>
    12c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   
   usb_user_interface_reset(wInterface, wValue_lsb);
    12c4:	87 7f       	andi	r24, 0xF7	; 247
    12c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
   Usb_select_endpoint(EP_CONTROL);
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	e6 d9       	rcall	.-3124   	; 0x69c <usb_user_interface_reset>
            
   Usb_send_control_in();
    12d0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    12d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
   while(!Is_usb_in_ready()) {if(Is_usb_vbus_low())break;}
    12da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12e2:	80 fd       	sbrc	r24, 0
    12e4:	17 c0       	rjmp	.+46     	; 0x1314 <usb_process_request+0x44c>
    12e6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
      default:
      break;
   }

   // un-supported like standard request => call to user read request
   if( !usb_user_read_request(bmRequestType, bmRequest) )
    12ea:	80 fd       	sbrc	r24, 0
    12ec:	f8 cf       	rjmp	.-16     	; 0x12de <usb_process_request+0x416>
    12ee:	12 c0       	rjmp	.+36     	; 0x1314 <usb_process_request+0x44c>
    12f0:	60 2f       	mov	r22, r16
    12f2:	81 2f       	mov	r24, r17
    12f4:	5a d9       	rcall	.-3404   	; 0x5aa <usb_user_read_request>
   {
      // Request unknow in the specific request list from interface
      // keep that order (set StallRq/clear RxSetup) or a
      // OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
    12f6:	81 11       	cpse	r24, r1
    12f8:	0d c0       	rjmp	.+26     	; 0x1314 <usb_process_request+0x44c>
    12fa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    12fe:	80 62       	ori	r24, 0x20	; 32
      Usb_ack_receive_setup();
    1300:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1304:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1308:	87 7f       	andi	r24, 0xF7	; 247
      endpoint_status[(EP_CONTROL & MSK_EP_DIR)] = 0x01;
    130a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    130e:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1310:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <endpoint_status>
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	08 95       	ret

00001322 <usb_device_task_init>:
//! @return none
//!
//!/
void usb_device_task_init(void)
{
   Enable_interrupt();
    1322:	78 94       	sei
   Usb_disable();
    1324:	e8 ed       	ldi	r30, 0xD8	; 216
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8f 76       	andi	r24, 0x6F	; 111
    132c:	80 83       	st	Z, r24
   Usb_enable();
    132e:	80 81       	ld	r24, Z
    1330:	80 69       	ori	r24, 0x90	; 144
    1332:	80 83       	st	Z, r24
   // Usb_select_device();
#if (USB_LOW_SPEED_DEVICE==ENABLE)
   Usb_low_speed_mode();
#endif
   Enable_interrupt();
    1334:	78 94       	sei
    1336:	08 95       	ret

00001338 <usb_start_device>:
//!
//! @return none
//!
void usb_start_device (void)
{
   Pll_start_auto();
    1338:	82 e1       	ldi	r24, 0x12	; 18
    133a:	89 bd       	out	0x29, r24	; 41
   Wait_pll_ready();
    133c:	09 b4       	in	r0, 0x29	; 41
    133e:	00 fe       	sbrs	r0, 0
    1340:	fd cf       	rjmp	.-6      	; 0x133c <usb_start_device+0x4>

   Disable_interrupt();
    1342:	f8 94       	cli
   Usb_unfreeze_clock();
    1344:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1348:	8f 7d       	andi	r24, 0xDF	; 223
    134a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   usb_init_device();         // configure the USB controller EP0
   Usb_attach();
    134e:	54 d1       	rcall	.+680    	; 0x15f8 <usb_init_device>
    1350:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1354:	8e 7f       	andi	r24, 0xFE	; 254
    1356:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   Enable_interrupt();
   
   Usb_enable_suspend_interrupt();
    135a:	78 94       	sei
    135c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1360:	81 60       	ori	r24, 0x01	; 1
    1362:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   Usb_enable_reset_interrupt();
    1366:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    136a:	88 60       	ori	r24, 0x08	; 8
    136c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1370:	08 95       	ret

00001372 <usb_device_task>:
{
  
   // Non-OTG exclusives Device operations

   // VBUS state detection
   if (Is_usb_vbus_high()&& (usb_connected==FALSE))
    1372:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1376:	80 ff       	sbrs	r24, 0
    1378:	13 c0       	rjmp	.+38     	; 0x13a0 <usb_device_task+0x2e>
    137a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <usb_connected>
    137e:	81 11       	cpse	r24, r1
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <usb_device_task+0x2e>
   {
      usb_connected = TRUE;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <usb_connected>
      remote_wakeup_feature = DISABLED;
    1388:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <remote_wakeup_feature>
      Usb_vbus_on_action();
      Usb_send_event(EVT_USB_POWERED);
    138c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_usb_event>
    1390:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <g_usb_event+0x1>
    1394:	82 60       	ori	r24, 0x02	; 2
    1396:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <g_usb_event+0x1>
    139a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_usb_event>
      usb_start_device();
   }
   if (Is_usb_vbus_low()&& (usb_connected==TRUE))
    139e:	cc df       	rcall	.-104    	; 0x1338 <usb_start_device>
    13a0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    13a4:	80 fd       	sbrc	r24, 0
    13a6:	1b c0       	rjmp	.+54     	; 0x13de <usb_device_task+0x6c>
    13a8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <usb_connected>
    13ac:	81 30       	cpi	r24, 0x01	; 1
   {
      usb_connected = FALSE;
    13ae:	b9 f4       	brne	.+46     	; 0x13de <usb_device_task+0x6c>
    13b0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <usb_connected>
      usb_configuration_nb = 0;
    13b4:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <usb_configuration_nb>
      Usb_send_event(EVT_USB_UNPOWERED);
    13b8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_usb_event>
    13bc:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <g_usb_event+0x1>
    13c0:	84 60       	ori	r24, 0x04	; 4
    13c2:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <g_usb_event+0x1>
    13c6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_usb_event>
      Usb_detach();
    13ca:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
      Usb_freeze_clock();
    13d4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    13d8:	80 62       	ori	r24, 0x20	; 32
    13da:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
      Usb_vbus_off_action();
   }

   if(Is_usb_event(EVT_USB_RESET))
    13de:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_usb_event>
    13e2:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <g_usb_event+0x1>
    13e6:	90 ff       	sbrs	r25, 0
   {
      Usb_ack_event(EVT_USB_RESET);
    13e8:	10 c0       	rjmp	.+32     	; 0x140a <usb_device_task+0x98>
    13ea:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_usb_event>
    13ee:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <g_usb_event+0x1>
    13f2:	9e 7f       	andi	r25, 0xFE	; 254
    13f4:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <g_usb_event+0x1>
    13f8:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_usb_event>
      Usb_reset_endpoint(0);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    1402:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
      usb_configuration_nb=0;
    1406:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <usb_configuration_nb>
   // =======================================
   // Common Standard Device Control Requests
   // =======================================
   //   - device enumeration process
   //   - device control commands and features
   Usb_select_endpoint(EP_CONTROL);
    140a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   if (Is_usb_receive_setup())
    140e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   {
      usb_process_request();
    1412:	83 fd       	sbrc	r24, 3
    1414:	59 cd       	rjmp	.-1358   	; 0xec8 <usb_process_request>
    1416:	08 95       	ret

00001418 <usb_task_init>:
 *  @return none
 */
void usb_task_init(void)
{
   #if (USE_USB_PADS_REGULATOR==ENABLE)  // Otherwise assume USB PADs regulator is not used
   Usb_enable_regulator();
    1418:	e7 ed       	ldi	r30, 0xD7	; 215
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	81 60       	ori	r24, 0x01	; 1
   #endif

   usb_device_task_init();
    1420:	80 83       	st	Z, r24
    1422:	7f cf       	rjmp	.-258    	; 0x1322 <usb_device_task_init>

00001424 <usb_task>:
 *  @param none
 *
 *  @return none
*/
void usb_task(void)
{
    1424:	a6 cf       	rjmp	.-180    	; 0x1372 <usb_device_task>

00001426 <__vector_10>:
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    144c:	82 ff       	sbrs	r24, 2
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <__vector_10+0x3c>
    1450:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1454:	82 ff       	sbrs	r24, 2
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <__vector_10+0x3c>
    1458:	8b ef       	ldi	r24, 0xFB	; 251
    145a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    145e:	0e 94 c9 01 	call	0x392	; 0x392 <sof_action>
    1462:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1466:	80 ff       	sbrs	r24, 0
    1468:	40 c0       	rjmp	.+128    	; 0x14ea <__vector_10+0xc4>
    146a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    146e:	80 ff       	sbrs	r24, 0
    1470:	3c c0       	rjmp	.+120    	; 0x14ea <__vector_10+0xc4>
    1472:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <remote_wakeup_feature>
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	d9 f4       	brne	.+54     	; 0x14b0 <__vector_10+0x8a>
    147a:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <usb_configuration_nb>
    147e:	88 23       	and	r24, r24
    1480:	b9 f0       	breq	.+46     	; 0x14b0 <__vector_10+0x8a>
    1482:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1486:	8e 7f       	andi	r24, 0xFE	; 254
    1488:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    148c:	8f ee       	ldi	r24, 0xEF	; 239
    148e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1492:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1496:	80 61       	ori	r24, 0x10	; 16
    1498:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    149c:	89 b5       	in	r24, 0x29	; 41
    149e:	8d 7f       	andi	r24, 0xFD	; 253
    14a0:	89 bd       	out	0x29, r24	; 41
    14a2:	19 bc       	out	0x29, r1	; 41
    14a4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14a8:	80 62       	ori	r24, 0x20	; 32
    14aa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14ae:	1d c0       	rjmp	.+58     	; 0x14ea <__vector_10+0xc4>
    14b0:	8f ee       	ldi	r24, 0xEF	; 239
    14b2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    14b6:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_usb_event>
    14ba:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <g_usb_event+0x1>
    14be:	80 62       	ori	r24, 0x20	; 32
    14c0:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <g_usb_event+0x1>
    14c4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_usb_event>
    14c8:	8e ef       	ldi	r24, 0xFE	; 254
    14ca:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    14ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14d2:	80 61       	ori	r24, 0x10	; 16
    14d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14dc:	80 62       	ori	r24, 0x20	; 32
    14de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14e2:	89 b5       	in	r24, 0x29	; 41
    14e4:	8d 7f       	andi	r24, 0xFD	; 253
    14e6:	89 bd       	out	0x29, r24	; 41
    14e8:	19 bc       	out	0x29, r1	; 41
    14ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    14ee:	84 ff       	sbrs	r24, 4
    14f0:	29 c0       	rjmp	.+82     	; 0x1544 <__vector_10+0x11e>
    14f2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14f6:	84 ff       	sbrs	r24, 4
    14f8:	25 c0       	rjmp	.+74     	; 0x1544 <__vector_10+0x11e>
    14fa:	09 b4       	in	r0, 0x29	; 41
    14fc:	00 fe       	sbrs	r0, 0
    14fe:	1c c0       	rjmp	.+56     	; 0x1538 <__vector_10+0x112>
    1500:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1504:	8f 7d       	andi	r24, 0xDF	; 223
    1506:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    150a:	8f ee       	ldi	r24, 0xEF	; 239
    150c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1510:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1514:	8f 7e       	andi	r24, 0xEF	; 239
    1516:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    151a:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_usb_event>
    151e:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <g_usb_event+0x1>
    1522:	80 64       	ori	r24, 0x40	; 64
    1524:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <g_usb_event+0x1>
    1528:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_usb_event>
    152c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1530:	81 60       	ori	r24, 0x01	; 1
    1532:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1536:	06 c0       	rjmp	.+12     	; 0x1544 <__vector_10+0x11e>
    1538:	82 e1       	ldi	r24, 0x12	; 18
    153a:	89 bd       	out	0x29, r24	; 41
    153c:	09 b4       	in	r0, 0x29	; 41
    153e:	00 fe       	sbrs	r0, 0
    1540:	fd cf       	rjmp	.-6      	; 0x153c <__vector_10+0x116>
    1542:	de cf       	rjmp	.-68     	; 0x1500 <__vector_10+0xda>
    1544:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1548:	85 ff       	sbrs	r24, 5
    154a:	1a c0       	rjmp	.+52     	; 0x1580 <__vector_10+0x15a>
    154c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1550:	85 ff       	sbrs	r24, 5
    1552:	16 c0       	rjmp	.+44     	; 0x1580 <__vector_10+0x15a>
    1554:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1558:	8f 7e       	andi	r24, 0xEF	; 239
    155a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    155e:	8f ed       	ldi	r24, 0xDF	; 223
    1560:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1564:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1568:	8f 7d       	andi	r24, 0xDF	; 223
    156a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    156e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_usb_event>
    1572:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <g_usb_event+0x1>
    1576:	80 68       	ori	r24, 0x80	; 128
    1578:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <g_usb_event+0x1>
    157c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_usb_event>
    1580:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1584:	83 ff       	sbrs	r24, 3
    1586:	11 c0       	rjmp	.+34     	; 0x15aa <__vector_10+0x184>
    1588:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    158c:	83 ff       	sbrs	r24, 3
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <__vector_10+0x184>
    1590:	87 ef       	ldi	r24, 0xF7	; 247
    1592:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1596:	30 d0       	rcall	.+96     	; 0x15f8 <usb_init_device>
    1598:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <g_usb_event>
    159c:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <g_usb_event+0x1>
    15a0:	91 60       	ori	r25, 0x01	; 1
    15a2:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <g_usb_event+0x1>
    15a6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_usb_event>
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	bf 91       	pop	r27
    15b0:	af 91       	pop	r26
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	7f 91       	pop	r23
    15b8:	6f 91       	pop	r22
    15ba:	5f 91       	pop	r21
    15bc:	4f 91       	pop	r20
    15be:	3f 91       	pop	r19
    15c0:	2f 91       	pop	r18
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <usb_config_ep>:
//! @return none
//!
void usb_halt_endpoint (U8 ep_num)
{
   Usb_select_endpoint(ep_num);
   Usb_enable_stall_handshake();
    15cc:	eb ee       	ldi	r30, 0xEB	; 235
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	90 81       	ld	r25, Z
    15d2:	91 60       	ori	r25, 0x01	; 1
    15d4:	90 83       	st	Z, r25
    15d6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    15da:	ed ee       	ldi	r30, 0xED	; 237
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	82 70       	andi	r24, 0x02	; 2
    15e2:	68 2b       	or	r22, r24
    15e4:	60 83       	st	Z, r22
    15e6:	80 81       	ld	r24, Z
    15e8:	82 60       	ori	r24, 0x02	; 2
    15ea:	80 83       	st	Z, r24
    15ec:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    15f0:	88 1f       	adc	r24, r24
    15f2:	88 27       	eor	r24, r24
    15f4:	88 1f       	adc	r24, r24
    15f6:	08 95       	ret

000015f8 <usb_init_device>:
//!
//! @return status
//!
U8 usb_init_device (void)
{
   Usb_select_endpoint(EP_CONTROL);
    15f8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   if(!Is_usb_endpoint_enabled())
    15fc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1600:	80 fd       	sbrc	r24, 0
    1602:	05 c0       	rjmp	.+10     	; 0x160e <usb_init_device+0x16>
   {
#if (USB_LOW_SPEED_DEVICE==DISABLE)
      return usb_configure_endpoint(EP_CONTROL,    \
    1604:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1608:	60 e3       	ldi	r22, 0x30	; 48
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	df cf       	rjmp	.-66     	; 0x15cc <usb_config_ep>
                              ONE_BANK,      \
                              NYET_DISABLED);
#endif
   }
   return FALSE;
}
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	08 95       	ret

00001612 <wdtdrv_disable>:
   // Ignored if IAR compiler optimization option "Always do cross call optimization" is enabled
   #pragma optimize=none 
#endif
void wdtdrv_disable(void)
{
   U8 save_int=Get_interrupt_state();
    1612:	8f b7       	in	r24, 0x3f	; 63
   Disable_interrupt();
    1614:	f8 94       	cli
#ifdef  __GNUC__
   Ack_wdt_reset();
    1616:	97 ef       	ldi	r25, 0xF7	; 247
    1618:	94 bf       	out	0x34, r25	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	a8 95       	wdr
    1620:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1624:	98 61       	ori	r25, 0x18	; 24
    1626:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    162a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    162e:	0f be       	out	0x3f, r0	; 63
   Ack_wdt_reset();
   Wdt_reset_instruction();
   WDTCSR = (1<<WDCE) | (1<<WDE);
   WDTCSR = 0x00;
#endif
   if(save_int) { Enable_interrupt(); }
    1630:	87 ff       	sbrs	r24, 7
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <wdtdrv_disable+0x24>
    1634:	78 94       	sei
    1636:	08 95       	ret

00001638 <cf_mem_init>:
    1638:	2c c0       	rjmp	.+88     	; 0x1692 <cf_init>

0000163a <cf_test_unit_ready>:
    163a:	39 d0       	rcall	.+114    	; 0x16ae <cf_mem_check>
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	19 f0       	breq	.+6      	; 0x1646 <cf_test_unit_ready+0xc>
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	08 95       	ret
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	08 95       	ret

0000164c <cf_read_capacity>:
    164c:	41 e4       	ldi	r20, 0x41	; 65
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	fc 01       	movw	r30, r24
    1656:	40 83       	st	Z, r20
    1658:	51 83       	std	Z+1, r21	; 0x01
    165a:	62 83       	std	Z+2, r22	; 0x02
    165c:	73 83       	std	Z+3, r23	; 0x03
    165e:	ed cf       	rjmp	.-38     	; 0x163a <cf_test_unit_ready>

00001660 <cf_wr_protect>:
    1660:	8c b1       	in	r24, 0x0c	; 12
    1662:	86 fb       	bst	r24, 6
    1664:	88 27       	eor	r24, r24
    1666:	80 f9       	bld	r24, 0
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	89 27       	eor	r24, r25
    166c:	08 95       	ret

0000166e <cf_read_10>:
    166e:	21 d0       	rcall	.+66     	; 0x16b2 <cf_read_sector>
    1670:	21 e0       	ldi	r18, 0x01	; 1
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	88 23       	and	r24, r24
    1676:	11 f0       	breq	.+4      	; 0x167c <cf_read_10+0xe>
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	c9 01       	movw	r24, r18
    167e:	08 95       	ret

00001680 <cf_write_10>:
    1680:	ca d0       	rcall	.+404    	; 0x1816 <cf_write_sector>
    1682:	21 e0       	ldi	r18, 0x01	; 1
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	88 23       	and	r24, r24
    1688:	11 f0       	breq	.+4      	; 0x168e <cf_write_10+0xe>
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	c9 01       	movw	r24, r18
    1690:	08 95       	ret

00001692 <cf_init>:
    1692:	0f d4       	rcall	.+2078   	; 0x1eb2 <boot_choice_init>
    1694:	8e ef       	ldi	r24, 0xFE	; 254
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	70 d6       	rcall	.+3296   	; 0x237a <eeprom_read_word>
    169a:	81 3c       	cpi	r24, 0xC1	; 193
    169c:	23 e0       	ldi	r18, 0x03	; 3
    169e:	92 07       	cpc	r25, r18
    16a0:	10 f0       	brcs	.+4      	; 0x16a6 <cf_init+0x14>
    16a2:	80 ec       	ldi	r24, 0xC0	; 192
    16a4:	93 e0       	ldi	r25, 0x03	; 3
    16a6:	74 d1       	rcall	.+744    	; 0x1990 <set_entryfile_size>
    16a8:	7d d1       	rcall	.+762    	; 0x19a4 <parse_entry_file>
    16aa:	c0 d4       	rcall	.+2432   	; 0x202c <get_boot_choice>
    16ac:	27 c2       	rjmp	.+1102   	; 0x1afc <build_bootfile_parameters>

000016ae <cf_mem_check>:
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	08 95       	ret

000016b2 <cf_read_sector>:
    16b2:	9f 92       	push	r9
    16b4:	af 92       	push	r10
    16b6:	bf 92       	push	r11
    16b8:	cf 92       	push	r12
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <cf_read_sector+0x18>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	6a 01       	movw	r12, r20
    16d0:	7b 01       	movw	r14, r22
    16d2:	fe 2c       	mov	r15, r14
    16d4:	ee 24       	eor	r14, r14
    16d6:	ff 0c       	add	r15, r15
    16d8:	a9 d4       	rcall	.+2386   	; 0x202c <get_boot_choice>
    16da:	10 d2       	rcall	.+1056   	; 0x1afc <build_bootfile_parameters>
    16dc:	8e 9a       	sbi	0x11, 6	; 17
    16de:	87 01       	movw	r16, r14
    16e0:	88 e0       	ldi	r24, 0x08	; 8
    16e2:	a8 2e       	mov	r10, r24
    16e4:	f8 94       	cli
    16e6:	b1 2c       	mov	r11, r1
    16e8:	f8 01       	movw	r30, r16
    16ea:	00 3c       	cpi	r16, 0xC0	; 192
    16ec:	11 05       	cpc	r17, r1
    16ee:	18 f4       	brcc	.+6      	; 0x16f6 <cf_read_sector+0x44>
    16f0:	e1 5c       	subi	r30, 0xC1	; 193
    16f2:	fd 4f       	sbci	r31, 0xFD	; 253
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <cf_read_sector+0x52>
    16f6:	ee 5f       	subi	r30, 0xFE	; 254
    16f8:	f1 40       	sbci	r31, 0x01	; 1
    16fa:	eb 30       	cpi	r30, 0x0B	; 11
    16fc:	f1 05       	cpc	r31, r1
    16fe:	30 f4       	brcc	.+12     	; 0x170c <cf_read_sector+0x5a>
    1700:	ec 5c       	subi	r30, 0xCC	; 204
    1702:	fd 4f       	sbci	r31, 0xFD	; 253
    1704:	e4 91       	lpm	r30, Z
    1706:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    170a:	53 c0       	rjmp	.+166    	; 0x17b2 <cf_read_sector+0x100>
    170c:	99 24       	eor	r9, r9
    170e:	93 94       	inc	r9
    1710:	9b 0c       	add	r9, r11
    1712:	0c 33       	cpi	r16, 0x3C	; 60
    1714:	24 e0       	ldi	r18, 0x04	; 4
    1716:	12 07       	cpc	r17, r18
    1718:	61 f4       	brne	.+24     	; 0x1732 <cf_read_sector+0x80>
    171a:	3f d1       	rcall	.+638    	; 0x199a <get_bootfile_size>
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1724:	b9 2c       	mov	r11, r9
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    172c:	0d e3       	ldi	r16, 0x3D	; 61
    172e:	14 e0       	ldi	r17, 0x04	; 4
    1730:	40 c0       	rjmp	.+128    	; 0x17b2 <cf_read_sector+0x100>
    1732:	0c 37       	cpi	r16, 0x7C	; 124
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	18 07       	cpc	r17, r24
    1738:	61 f4       	brne	.+24     	; 0x1752 <cf_read_sector+0xa0>
    173a:	25 d1       	rcall	.+586    	; 0x1986 <get_entryfile_size>
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1744:	b9 2c       	mov	r11, r9
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    174c:	0d e7       	ldi	r16, 0x7D	; 125
    174e:	14 e0       	ldi	r17, 0x04	; 4
    1750:	30 c0       	rjmp	.+96     	; 0x17b2 <cf_read_sector+0x100>
    1752:	f8 01       	movw	r30, r16
    1754:	f4 50       	subi	r31, 0x04	; 4
    1756:	e0 3c       	cpi	r30, 0xC0	; 192
    1758:	f1 05       	cpc	r31, r1
    175a:	58 f4       	brcc	.+22     	; 0x1772 <cf_read_sector+0xc0>
    175c:	ec 58       	subi	r30, 0x8C	; 140
    175e:	fe 4f       	sbci	r31, 0xFE	; 254
    1760:	e4 91       	lpm	r30, Z
    1762:	0b 36       	cpi	r16, 0x6B	; 107
    1764:	24 e0       	ldi	r18, 0x04	; 4
    1766:	12 07       	cpc	r17, r18
    1768:	71 f6       	brne	.-100    	; 0x1706 <cf_read_sector+0x54>
    176a:	66 99       	sbic	0x0c, 6	; 12
    176c:	cc cf       	rjmp	.-104    	; 0x1706 <cf_read_sector+0x54>
    176e:	e1 60       	ori	r30, 0x01	; 1
    1770:	ca cf       	rjmp	.-108    	; 0x1706 <cf_read_sector+0x54>
    1772:	01 15       	cp	r16, r1
    1774:	8a e0       	ldi	r24, 0x0A	; 10
    1776:	18 07       	cpc	r17, r24
    1778:	48 f0       	brcs	.+18     	; 0x178c <cf_read_sector+0xda>
    177a:	0f d1       	rcall	.+542    	; 0x199a <get_bootfile_size>
    177c:	96 5f       	subi	r25, 0xF6	; 246
    177e:	08 17       	cp	r16, r24
    1780:	19 07       	cpc	r17, r25
    1782:	20 f4       	brcc	.+8      	; 0x178c <cf_read_sector+0xda>
    1784:	c8 01       	movw	r24, r16
    1786:	9a 50       	subi	r25, 0x0A	; 10
    1788:	b9 d2       	rcall	.+1394   	; 0x1cfc <read_file_SWITCH_GRB>
    178a:	0e c0       	rjmp	.+28     	; 0x17a8 <cf_read_sector+0xf6>
    178c:	c8 01       	movw	r24, r16
    178e:	9e 50       	subi	r25, 0x0E	; 14
    1790:	80 3c       	cpi	r24, 0xC0	; 192
    1792:	23 e0       	ldi	r18, 0x03	; 3
    1794:	92 07       	cpc	r25, r18
    1796:	10 f4       	brcc	.+4      	; 0x179c <cf_read_sector+0xea>
    1798:	e8 d5       	rcall	.+3024   	; 0x236a <eeprom_read_byte>
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <cf_read_sector+0xf6>
    179c:	c8 01       	movw	r24, r16
    179e:	92 51       	subi	r25, 0x12	; 18
    17a0:	82 31       	cpi	r24, 0x12	; 18
    17a2:	91 05       	cpc	r25, r1
    17a4:	20 f4       	brcc	.+8      	; 0x17ae <cf_read_sector+0xfc>
    17a6:	bd d2       	rcall	.+1402   	; 0x1d22 <read_file_BOOTPINS_TXT>
    17a8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <cf_read_sector+0x100>
    17ae:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17b2:	0f 5f       	subi	r16, 0xFF	; 255
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	b3 94       	inc	r11
    17b8:	8f e3       	ldi	r24, 0x3F	; 63
    17ba:	8b 15       	cp	r24, r11
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <cf_read_sector+0x10e>
    17be:	94 cf       	rjmp	.-216    	; 0x16e8 <cf_read_sector+0x36>
    17c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17c4:	8f 77       	andi	r24, 0x7F	; 127
    17c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ca:	78 94       	sei
    17cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17d0:	85 fd       	sbrc	r24, 5
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <cf_read_sector+0x130>
    17d4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17d8:	89 2f       	mov	r24, r25
    17da:	81 70       	andi	r24, 0x01	; 1
    17dc:	90 fd       	sbrc	r25, 0
    17de:	f6 cf       	rjmp	.-20     	; 0x17cc <cf_read_sector+0x11a>
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <cf_read_sector+0x148>
    17e2:	aa 94       	dec	r10
    17e4:	a1 10       	cpse	r10, r1
    17e6:	7e cf       	rjmp	.-260    	; 0x16e4 <cf_read_sector+0x32>
    17e8:	2e ef       	ldi	r18, 0xFE	; 254
    17ea:	f2 1a       	sub	r15, r18
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	c8 1a       	sub	r12, r24
    17f0:	d1 08       	sbc	r13, r1
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <cf_read_sector+0x144>
    17f4:	74 cf       	rjmp	.-280    	; 0x16de <cf_read_sector+0x2c>
    17f6:	8e 98       	cbi	0x11, 6	; 17
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ff 90       	pop	r15
    1808:	ef 90       	pop	r14
    180a:	df 90       	pop	r13
    180c:	cf 90       	pop	r12
    180e:	bf 90       	pop	r11
    1810:	af 90       	pop	r10
    1812:	9f 90       	pop	r9
    1814:	08 95       	ret

00001816 <cf_write_sector>:
    1816:	5f 92       	push	r5
    1818:	6f 92       	push	r6
    181a:	7f 92       	push	r7
    181c:	8f 92       	push	r8
    181e:	9f 92       	push	r9
    1820:	af 92       	push	r10
    1822:	bf 92       	push	r11
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	c2 54       	subi	r28, 0x42	; 66
    183a:	d1 09       	sbc	r29, r1
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	5a 01       	movw	r10, r20
    1848:	6b 01       	movw	r12, r22
    184a:	dc 2c       	mov	r13, r12
    184c:	cc 24       	eor	r12, r12
    184e:	dd 0c       	add	r13, r13
    1850:	0c b1       	in	r16, 0x0c	; 12
    1852:	06 fb       	bst	r16, 6
    1854:	00 27       	eor	r16, r16
    1856:	00 f9       	bld	r16, 0
    1858:	8e 9a       	sbi	0x11, 6	; 17
    185a:	7e 01       	movw	r14, r28
    185c:	21 e4       	ldi	r18, 0x41	; 65
    185e:	e2 0e       	add	r14, r18
    1860:	f1 1c       	adc	r15, r1
    1862:	20 ec       	ldi	r18, 0xC0	; 192
    1864:	82 2e       	mov	r8, r18
    1866:	23 e0       	ldi	r18, 0x03	; 3
    1868:	92 2e       	mov	r9, r18
    186a:	36 01       	movw	r6, r12
    186c:	88 e0       	ldi	r24, 0x08	; 8
    186e:	58 2e       	mov	r5, r24
    1870:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1874:	85 fd       	sbrc	r24, 5
    1876:	07 c0       	rjmp	.+14     	; 0x1886 <cf_write_sector+0x70>
    1878:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    187c:	89 2f       	mov	r24, r25
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	90 fd       	sbrc	r25, 0
    1882:	f6 cf       	rjmp	.-20     	; 0x1870 <cf_write_sector+0x5a>
    1884:	69 c0       	rjmp	.+210    	; 0x1958 <cf_write_sector+0x142>
    1886:	f8 94       	cli
    1888:	01 11       	cpse	r16, r1
    188a:	09 c0       	rjmp	.+18     	; 0x189e <cf_write_sector+0x88>
    188c:	fe 01       	movw	r30, r28
    188e:	31 96       	adiw	r30, 0x01	; 1
    1890:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1894:	81 93       	st	Z+, r24
    1896:	ee 15       	cp	r30, r14
    1898:	ff 05       	cpc	r31, r15
    189a:	d1 f7       	brne	.-12     	; 0x1890 <cf_write_sector+0x7a>
    189c:	46 c0       	rjmp	.+140    	; 0x192a <cf_write_sector+0x114>
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	b3 01       	movw	r22, r6
    18a2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    18a6:	e1 e0       	ldi	r30, 0x01	; 1
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	ec 0f       	add	r30, r28
    18ac:	fd 1f       	adc	r31, r29
    18ae:	e1 0f       	add	r30, r17
    18b0:	f1 1d       	adc	r31, r1
    18b2:	80 83       	st	Z, r24
    18b4:	9c e7       	ldi	r25, 0x7C	; 124
    18b6:	69 16       	cp	r6, r25
    18b8:	94 e0       	ldi	r25, 0x04	; 4
    18ba:	79 06       	cpc	r7, r25
    18bc:	21 f5       	brne	.+72     	; 0x1906 <cf_write_sector+0xf0>
    18be:	f7 01       	movw	r30, r14
    18c0:	80 83       	st	Z, r24
    18c2:	1f 5f       	subi	r17, 0xFF	; 255
    18c4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    18c8:	e1 e0       	ldi	r30, 0x01	; 1
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	ec 0f       	add	r30, r28
    18ce:	fd 1f       	adc	r31, r29
    18d0:	e1 0f       	add	r30, r17
    18d2:	f1 1d       	adc	r31, r1
    18d4:	80 83       	st	Z, r24
    18d6:	f7 01       	movw	r30, r14
    18d8:	81 83       	std	Z+1, r24	; 0x01
    18da:	80 81       	ld	r24, Z
    18dc:	91 81       	ldd	r25, Z+1	; 0x01
    18de:	81 3c       	cpi	r24, 0xC1	; 193
    18e0:	93 40       	sbci	r25, 0x03	; 3
    18e2:	18 f0       	brcs	.+6      	; 0x18ea <cf_write_sector+0xd4>
    18e4:	f7 01       	movw	r30, r14
    18e6:	91 82       	std	Z+1, r9	; 0x01
    18e8:	80 82       	st	Z, r8
    18ea:	f7 01       	movw	r30, r14
    18ec:	60 80       	ld	r6, Z
    18ee:	71 80       	ldd	r7, Z+1	; 0x01
    18f0:	c3 01       	movw	r24, r6
    18f2:	4e d0       	rcall	.+156    	; 0x1990 <set_entryfile_size>
    18f4:	b3 01       	movw	r22, r6
    18f6:	8e ef       	ldi	r24, 0xFE	; 254
    18f8:	93 e0       	ldi	r25, 0x03	; 3
    18fa:	5b d5       	rcall	.+2742   	; 0x23b2 <eeprom_write_word>
    18fc:	53 d0       	rcall	.+166    	; 0x19a4 <parse_entry_file>
    18fe:	96 d3       	rcall	.+1836   	; 0x202c <get_boot_choice>
    1900:	fd d0       	rcall	.+506    	; 0x1afc <build_bootfile_parameters>
    1902:	6d e7       	ldi	r22, 0x7D	; 125
    1904:	74 e0       	ldi	r23, 0x04	; 4
    1906:	3b 01       	movw	r6, r22
    1908:	ff ef       	ldi	r31, 0xFF	; 255
    190a:	6f 1a       	sub	r6, r31
    190c:	7f 0a       	sbc	r7, r31
    190e:	1f 5f       	subi	r17, 0xFF	; 255
    1910:	10 34       	cpi	r17, 0x40	; 64
    1912:	30 f2       	brcs	.-116    	; 0x18a0 <cf_write_sector+0x8a>
    1914:	6f 53       	subi	r22, 0x3F	; 63
    1916:	7e 40       	sbci	r23, 0x0E	; 14
    1918:	60 3c       	cpi	r22, 0xC0	; 192
    191a:	23 e0       	ldi	r18, 0x03	; 3
    191c:	72 07       	cpc	r23, r18
    191e:	28 f4       	brcc	.+10     	; 0x192a <cf_write_sector+0x114>
    1920:	40 e4       	ldi	r20, 0x40	; 64
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	ce 01       	movw	r24, r28
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	2d d5       	rcall	.+2650   	; 0x2384 <eeprom_write_block>
    192a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    192e:	8b 7f       	andi	r24, 0xFB	; 251
    1930:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1934:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1938:	8f 77       	andi	r24, 0x7F	; 127
    193a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    193e:	78 94       	sei
    1940:	5a 94       	dec	r5
    1942:	51 10       	cpse	r5, r1
    1944:	95 cf       	rjmp	.-214    	; 0x1870 <cf_write_sector+0x5a>
    1946:	8e ef       	ldi	r24, 0xFE	; 254
    1948:	d8 1a       	sub	r13, r24
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	a9 1a       	sub	r10, r25
    194e:	b1 08       	sbc	r11, r1
    1950:	09 f0       	breq	.+2      	; 0x1954 <cf_write_sector+0x13e>
    1952:	8b cf       	rjmp	.-234    	; 0x186a <cf_write_sector+0x54>
    1954:	8e 98       	cbi	0x11, 6	; 17
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	ce 5b       	subi	r28, 0xBE	; 190
    195a:	df 4f       	sbci	r29, 0xFF	; 255
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	7f 90       	pop	r7
    1980:	6f 90       	pop	r6
    1982:	5f 90       	pop	r5
    1984:	08 95       	ret

00001986 <get_entryfile_size>:


U16 get_entryfile_size()
{
   return entry_file_size;
}
    1986:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <entry_file_size>
    198a:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <entry_file_size+0x1>
    198e:	08 95       	ret

00001990 <set_entryfile_size>:


void set_entryfile_size(U16 file_size)
{
   entry_file_size = file_size;
    1990:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <entry_file_size+0x1>
    1994:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <entry_file_size>
    1998:	08 95       	ret

0000199a <get_bootfile_size>:


U16 get_bootfile_size()
{
    return complete_bootfile_size;
}
    199a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <complete_bootfile_size>
    199e:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <complete_bootfile_size+0x1>
    19a2:	08 95       	ret

000019a4 <parse_entry_file>:

void parse_entry_file()
{
    19a4:	9f 92       	push	r9
    19a6:	af 92       	push	r10
    19a8:	bf 92       	push	r11
    19aa:	cf 92       	push	r12
    19ac:	df 92       	push	r13
    19ae:	ef 92       	push	r14
    19b0:	ff 92       	push	r15
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	e3 e7       	ldi	r30, 0x73	; 115
    19bc:	f2 e0       	ldi	r31, 0x02	; 2
    19be:	a3 e5       	ldi	r26, 0x53	; 83
    19c0:	b2 e0       	ldi	r27, 0x02	; 2
   U8  entry_index = 1; // line iterator

   // reset values to parse
   for(i=0; i<MAX_NUM_ENTRIES; i++)
   {
      entry_start[i] = 0;
    19c2:	11 92       	st	Z+, r1
    19c4:	11 92       	st	Z+, r1
      entry_length[i] = 0;
    19c6:	1d 92       	st	X+, r1
    19c8:	1d 92       	st	X+, r1

   U16 i; // general iterator
   U8  entry_index = 1; // line iterator

   // reset values to parse
   for(i=0; i<MAX_NUM_ENTRIES; i++)
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	e3 39       	cpi	r30, 0x93	; 147
    19ce:	f8 07       	cpc	r31, r24
    19d0:	c1 f7       	brne	.-16     	; 0x19c2 <parse_entry_file+0x1e>
    19d2:	83 e5       	ldi	r24, 0x53	; 83
    19d4:	92 e0       	ldi	r25, 0x02	; 2
    19d6:	e3 e4       	ldi	r30, 0x43	; 67
    19d8:	f2 e0       	ldi	r31, 0x02	; 2
   {
      entry_start[i] = 0;
      entry_length[i] = 0;
   }
   for(i=0; i<HIGHLIGHT_COLOR_LENGTH; i++)
      highlight_color[i] = '\0';
    19da:	11 92       	st	Z+, r1
   for(i=0; i<MAX_NUM_ENTRIES; i++)
   {
      entry_start[i] = 0;
      entry_length[i] = 0;
   }
   for(i=0; i<HIGHLIGHT_COLOR_LENGTH; i++)
    19dc:	8e 17       	cp	r24, r30
    19de:	9f 07       	cpc	r25, r31
    19e0:	e1 f7       	brne	.-8      	; 0x19da <parse_entry_file+0x36>
      highlight_color[i] = '\0';
   for(i=0; i<SLEEP_SECS_LENGTH; i++)
      sleep_secs[0] = '\0';
    19e2:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <sleep_secs>
      char sample;

      do
      {
         sample = '\0';
         if (entry_file_pos == entry_file_size)
    19e6:	a0 90 71 01 	lds	r10, 0x0171	; 0x800171 <entry_file_size>
    19ea:	b0 90 72 01 	lds	r11, 0x0172	; 0x800172 <entry_file_size+0x1>
    19ee:	99 24       	eor	r9, r9
    19f0:	93 94       	inc	r9
    19f2:	c0 e0       	ldi	r28, 0x00	; 0
    19f4:	d0 e0       	ldi	r29, 0x00	; 0
   // despite some checking, only well-formed files will reasonably work
 
   do // linewise loop
   {
      // start of line
      entry_start[entry_index] = entry_file_pos; // init next entry to come up
    19f6:	e9 2c       	mov	r14, r9
    19f8:	f1 2c       	mov	r15, r1
    19fa:	ee 0c       	add	r14, r14
    19fc:	ff 1c       	adc	r15, r15
    19fe:	f7 01       	movw	r30, r14
    1a00:	ed 58       	subi	r30, 0x8D	; 141
    1a02:	fd 4f       	sbci	r31, 0xFD	; 253
    1a04:	d1 83       	std	Z+1, r29	; 0x01
    1a06:	c0 83       	st	Z, r28
    1a08:	8e 01       	movw	r16, r28
      char sample;

      do
      {
         sample = '\0';
         if (entry_file_pos == entry_file_size)
    1a0a:	0a 15       	cp	r16, r10
    1a0c:	1b 05       	cpc	r17, r11
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <parse_entry_file+0x6e>
    1a10:	69 c0       	rjmp	.+210    	; 0x1ae4 <parse_entry_file+0x140>
            break;

         sample = read_entry_file(entry_file_pos++);
    1a12:	68 01       	movw	r12, r16
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	c9 1a       	sub	r12, r25
    1a18:	d9 0a       	sbc	r13, r25
    1a1a:	c8 01       	movw	r24, r16
    1a1c:	a6 d4       	rcall	.+2380   	; 0x236a <eeprom_read_byte>
      } while ((sample!='\r') && (sample!='\n'));
    1a1e:	8d 30       	cpi	r24, 0x0D	; 13
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <parse_entry_file+0x86>
      {
         sample = '\0';
         if (entry_file_pos == entry_file_size)
            break;

         sample = read_entry_file(entry_file_pos++);
    1a22:	86 01       	movw	r16, r12
      } while ((sample!='\r') && (sample!='\n'));
    1a24:	8a 30       	cpi	r24, 0x0A	; 10
    1a26:	89 f7       	brne	.-30     	; 0x1a0a <parse_entry_file+0x66>
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <parse_entry_file+0x92>

      U16 line_end = entry_file_pos - 1;

      if (sample=='\r') // windows-style line end, \n should follow
      {
         if (entry_file_pos == entry_file_size)
    1a2a:	ac 14       	cp	r10, r12
    1a2c:	bd 04       	cpc	r11, r13
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <parse_entry_file+0x8e>
    1a30:	59 c0       	rjmp	.+178    	; 0x1ae4 <parse_entry_file+0x140>
            break;
         else
            entry_file_pos++; // skip \n
    1a32:	0e 5f       	subi	r16, 0xFE	; 254
      }

      // process line
      if (read_entry_file(line_start)=='#') // special parameters
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	ce 01       	movw	r24, r28
    1a38:	98 d4       	rcall	.+2352   	; 0x236a <eeprom_read_byte>
    1a3a:	83 32       	cpi	r24, 0x23	; 35
      {
         U8 par_pos = 0; 
         sample = read_entry_file(line_start+1);
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <parse_entry_file+0x9c>
    1a3e:	40 c0       	rjmp	.+128    	; 0x1ac0 <parse_entry_file+0x11c>
    1a40:	ce 01       	movw	r24, r28
         if (sample=='1') // sleep secs
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	92 d4       	rcall	.+2340   	; 0x236a <eeprom_read_byte>
    1a46:	81 33       	cpi	r24, 0x31	; 49
    1a48:	e9 f4       	brne	.+58     	; 0x1a84 <parse_entry_file+0xe0>
    1a4a:	7e 01       	movw	r14, r28
    1a4c:	e3 e0       	ldi	r30, 0x03	; 3
    1a4e:	ee 0e       	add	r14, r30
    1a50:	f1 1c       	adc	r15, r1
    1a52:	8f e3       	ldi	r24, 0x3F	; 63
    1a54:	c8 2e       	mov	r12, r24
         {
            while(1)
            {
               sample = read_entry_file(line_start+3+par_pos);
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	d8 2e       	mov	r13, r24
    1a5a:	27 96       	adiw	r28, 0x07	; 7
               if ( (sample=='#') || (sample==' ') || (sample=='\r') || (sample=='\n') ||
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	85 d4       	rcall	.+2314   	; 0x236a <eeprom_read_byte>
    1a60:	83 32       	cpi	r24, 0x23	; 35
    1a62:	c1 f1       	breq	.+112    	; 0x1ad4 <parse_entry_file+0x130>
    1a64:	80 32       	cpi	r24, 0x20	; 32
    1a66:	b1 f1       	breq	.+108    	; 0x1ad4 <parse_entry_file+0x130>
    1a68:	8d 30       	cpi	r24, 0x0D	; 13
    1a6a:	a1 f1       	breq	.+104    	; 0x1ad4 <parse_entry_file+0x130>
    1a6c:	8a 30       	cpi	r24, 0x0A	; 10
    1a6e:	91 f1       	breq	.+100    	; 0x1ad4 <parse_entry_file+0x130>
    1a70:	ff ef       	ldi	r31, 0xFF	; 255
    1a72:	ef 1a       	sub	r14, r31
    1a74:	ff 0a       	sbc	r15, r31
    1a76:	ec 16       	cp	r14, r28
                    (par_pos==SLEEP_SECS_LENGTH-1) )
                    break;
               sleep_secs[par_pos] = sample;
    1a78:	fd 06       	cpc	r15, r29
    1a7a:	61 f1       	breq	.+88     	; 0x1ad4 <parse_entry_file+0x130>
    1a7c:	f6 01       	movw	r30, r12
               par_pos++;
            }
    1a7e:	81 93       	st	Z+, r24
         }
         else if (sample=='2') // highlight color
    1a80:	6f 01       	movw	r12, r30
    1a82:	ec cf       	rjmp	.-40     	; 0x1a5c <parse_entry_file+0xb8>
    1a84:	82 33       	cpi	r24, 0x32	; 50
    1a86:	31 f5       	brne	.+76     	; 0x1ad4 <parse_entry_file+0x130>
    1a88:	7e 01       	movw	r14, r28
    1a8a:	f3 e0       	ldi	r31, 0x03	; 3
    1a8c:	ef 0e       	add	r14, r31
    1a8e:	f1 1c       	adc	r15, r1
    1a90:	6e 01       	movw	r12, r28
    1a92:	83 e1       	ldi	r24, 0x13	; 19
    1a94:	c8 0e       	add	r12, r24
         {
            while(1)
            {
               sample = read_entry_file(line_start+3+par_pos);
    1a96:	d1 1c       	adc	r13, r1
    1a98:	c3 e4       	ldi	r28, 0x43	; 67
    1a9a:	d2 e0       	ldi	r29, 0x02	; 2
               if ( (sample=='#') || (sample==' ') || (sample=='\r') || (sample=='\n') ||
    1a9c:	c7 01       	movw	r24, r14
    1a9e:	65 d4       	rcall	.+2250   	; 0x236a <eeprom_read_byte>
    1aa0:	83 32       	cpi	r24, 0x23	; 35
    1aa2:	c1 f0       	breq	.+48     	; 0x1ad4 <parse_entry_file+0x130>
    1aa4:	80 32       	cpi	r24, 0x20	; 32
    1aa6:	b1 f0       	breq	.+44     	; 0x1ad4 <parse_entry_file+0x130>
    1aa8:	8d 30       	cpi	r24, 0x0D	; 13
    1aaa:	a1 f0       	breq	.+40     	; 0x1ad4 <parse_entry_file+0x130>
    1aac:	8a 30       	cpi	r24, 0x0A	; 10
    1aae:	91 f0       	breq	.+36     	; 0x1ad4 <parse_entry_file+0x130>
    1ab0:	9f ef       	ldi	r25, 0xFF	; 255
    1ab2:	e9 1a       	sub	r14, r25
    1ab4:	f9 0a       	sbc	r15, r25
    1ab6:	ec 14       	cp	r14, r12
                    (par_pos==HIGHLIGHT_COLOR_LENGTH-1) )
                    break;
               highlight_color[par_pos] = sample;
    1ab8:	fd 04       	cpc	r15, r13
               par_pos++;
            }
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <parse_entry_file+0x130>
         }
         continue; // next line
      }
      else // menu entry line (can be empty line);
      {
         entry_length[entry_index] = line_end - line_start;
    1abc:	89 93       	st	Y+, r24
    1abe:	ee cf       	rjmp	.-36     	; 0x1a9c <parse_entry_file+0xf8>
    1ac0:	f7 01       	movw	r30, r14
    1ac2:	ed 5a       	subi	r30, 0xAD	; 173
    1ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac6:	c0 95       	com	r28
    1ac8:	d0 95       	com	r29
    1aca:	cc 0e       	add	r12, r28
    1acc:	dd 1e       	adc	r13, r29
         entry_index++;
    1ace:	d1 82       	std	Z+1, r13	; 0x01
         continue; // next line
      }
   } while ( (entry_index < MAX_NUM_ENTRIES) &&         // not max number of entries parsed yet
             (entry_file_pos != entry_file_size) );   // not end of file yet
    1ad0:	c0 82       	st	Z, r12
    1ad2:	93 94       	inc	r9
    1ad4:	ef e0       	ldi	r30, 0x0F	; 15
      {
         entry_length[entry_index] = line_end - line_start;
         entry_index++;
         continue; // next line
      }
   } while ( (entry_index < MAX_NUM_ENTRIES) &&         // not max number of entries parsed yet
    1ad6:	e9 15       	cp	r30, r9
    1ad8:	28 f0       	brcs	.+10     	; 0x1ae4 <parse_entry_file+0x140>
    1ada:	0a 15       	cp	r16, r10
    1adc:	1b 05       	cpc	r17, r11
    1ade:	11 f0       	breq	.+4      	; 0x1ae4 <parse_entry_file+0x140>
             (entry_file_pos != entry_file_size) );   // not end of file yet
} 
    1ae0:	e8 01       	movw	r28, r16
    1ae2:	89 cf       	rjmp	.-238    	; 0x19f6 <parse_entry_file+0x52>
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	bf 90       	pop	r11
    1af6:	af 90       	pop	r10
    1af8:	9f 90       	pop	r9
    1afa:	08 95       	ret

00001afc <build_bootfile_parameters>:


void build_bootfile_parameters(U8 choice)
{
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	c0 55       	subi	r28, 0x50	; 80
    1b1a:	d1 09       	sbc	r29, r1
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
   const char bootfile_string1[] = "grubswitch_sleep_secs='";
    1b26:	98 e1       	ldi	r25, 0x18	; 24
    1b28:	e0 e0       	ldi	r30, 0x00	; 0
    1b2a:	f1 e0       	ldi	r31, 0x01	; 1
    1b2c:	de 01       	movw	r26, r28
    1b2e:	5e 96       	adiw	r26, 0x1e	; 30
    1b30:	01 90       	ld	r0, Z+
    1b32:	0d 92       	st	X+, r0
    1b34:	9a 95       	dec	r25
    1b36:	e1 f7       	brne	.-8      	; 0x1b30 <build_bootfile_parameters+0x34>
   const char bootfile_string2[] = "'\r\ngrubswitch_choice_color='";
    1b38:	9d e1       	ldi	r25, 0x1D	; 29
    1b3a:	e8 e1       	ldi	r30, 0x18	; 24
    1b3c:	f1 e0       	ldi	r31, 0x01	; 1
    1b3e:	de 01       	movw	r26, r28
    1b40:	11 96       	adiw	r26, 0x01	; 1
    1b42:	01 90       	ld	r0, Z+
    1b44:	0d 92       	st	X+, r0
    1b46:	9a 95       	dec	r25
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <build_bootfile_parameters+0x46>
   const char bootfile_string3[] = "'\r\ngrubswitch_choice='";
    1b4a:	97 e1       	ldi	r25, 0x17	; 23
    1b4c:	e5 e3       	ldi	r30, 0x35	; 53
    1b4e:	f1 e0       	ldi	r31, 0x01	; 1
    1b50:	de 01       	movw	r26, r28
    1b52:	d6 96       	adiw	r26, 0x36	; 54
    1b54:	01 90       	ld	r0, Z+
    1b56:	0d 92       	st	X+, r0
    1b58:	9a 95       	dec	r25
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <build_bootfile_parameters+0x58>
   const char bootfile_string4[] = "'\r\n";
    1b5c:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <__data_start+0x4c>
    1b60:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <__data_start+0x4d>
    1b64:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <__data_start+0x4e>
    1b68:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <__data_start+0x4f>
    1b6c:	61 96       	adiw	r28, 0x11	; 17
    1b6e:	4c af       	std	Y+60, r20	; 0x3c
    1b70:	5d af       	std	Y+61, r21	; 0x3d
    1b72:	6e af       	std	Y+62, r22	; 0x3e
    1b74:	7f af       	std	Y+63, r23	; 0x3f
    1b76:	61 97       	sbiw	r28, 0x11	; 17

   U16 i;

   if ((choice==0) || (entry_length[choice]==0))
    1b78:	88 23       	and	r24, r24
    1b7a:	59 f0       	breq	.+22     	; 0x1b92 <build_bootfile_parameters+0x96>
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	fc 01       	movw	r30, r24
    1b84:	ed 5a       	subi	r30, 0xAD	; 173
    1b86:	fd 4f       	sbci	r31, 0xFD	; 253
    1b88:	c0 80       	ld	r12, Z
    1b8a:	d1 80       	ldd	r13, Z+1	; 0x01
    1b8c:	c1 14       	cp	r12, r1
    1b8e:	d1 04       	cpc	r13, r1
    1b90:	49 f4       	brne	.+18     	; 0x1ba4 <build_bootfile_parameters+0xa8>
   {
      bootfile_parameters_size = 0;
    1b92:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <bootfile_parameters_size+0x1>
    1b96:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <bootfile_parameters_size>
      complete_bootfile_size = 0;
    1b9a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <complete_bootfile_size+0x1>
    1b9e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <complete_bootfile_size>
    1ba2:	98 c0       	rjmp	.+304    	; 0x1cd4 <build_bootfile_parameters+0x1d8>
      return;
   }

   bootfile_parameters_size = 0;
    1ba4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <bootfile_parameters_size+0x1>
    1ba8:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <bootfile_parameters_size>
    1bac:	be 01       	movw	r22, r28
    1bae:	62 5e       	subi	r22, 0xE2	; 226
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	a7 e7       	ldi	r26, 0x77	; 119
    1bb4:	b1 e0       	ldi	r27, 0x01	; 1

   for(i=0; bootfile_string1[i]!='\0'; i++)
    1bb6:	fb 01       	movw	r30, r22
    1bb8:	9f 01       	movw	r18, r30
    1bba:	26 1b       	sub	r18, r22
    1bbc:	37 0b       	sbc	r19, r23
    1bbe:	41 91       	ld	r20, Z+
    1bc0:	44 23       	and	r20, r20
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <build_bootfile_parameters+0xcc>
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string1[i];
    1bc4:	4d 93       	st	X+, r20
    1bc6:	f8 cf       	rjmp	.-16     	; 0x1bb8 <build_bootfile_parameters+0xbc>
    1bc8:	d9 01       	movw	r26, r18
    1bca:	a9 58       	subi	r26, 0x89	; 137
    1bcc:	be 4f       	sbci	r27, 0xFE	; 254
      return;
   }

   bootfile_parameters_size = 0;

   for(i=0; bootfile_string1[i]!='\0'; i++)
    1bce:	ef e3       	ldi	r30, 0x3F	; 63
    1bd0:	f2 e0       	ldi	r31, 0x02	; 2
    1bd2:	a9 01       	movw	r20, r18
    1bd4:	4f 53       	subi	r20, 0x3F	; 63
    1bd6:	52 40       	sbci	r21, 0x02	; 2
    1bd8:	9a 01       	movw	r18, r20
    1bda:	2e 0f       	add	r18, r30
    1bdc:	3f 1f       	adc	r19, r31
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string1[i];

   for(i=0; sleep_secs[i]!='\0'; i++)
    1bde:	61 91       	ld	r22, Z+
    1be0:	66 23       	and	r22, r22
    1be2:	11 f0       	breq	.+4      	; 0x1be8 <build_bootfile_parameters+0xec>
      bootfile_parameters[bootfile_parameters_size++] = sleep_secs[i];
    1be4:	6d 93       	st	X+, r22
    1be6:	f8 cf       	rjmp	.-16     	; 0x1bd8 <build_bootfile_parameters+0xdc>
    1be8:	30 93 76 01 	sts	0x0176, r19	; 0x800176 <bootfile_parameters_size+0x1>
    1bec:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <bootfile_parameters_size>
    1bf0:	d9 01       	movw	r26, r18
    1bf2:	a9 58       	subi	r26, 0x89	; 137
    1bf4:	be 4f       	sbci	r27, 0xFE	; 254
   bootfile_parameters_size = 0;

   for(i=0; bootfile_string1[i]!='\0'; i++)
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string1[i];

   for(i=0; sleep_secs[i]!='\0'; i++)
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	31 96       	adiw	r30, 0x01	; 1
    1bfa:	2e 1b       	sub	r18, r30
    1bfc:	3f 0b       	sbc	r19, r31
    1bfe:	a9 01       	movw	r20, r18
    1c00:	4e 0f       	add	r20, r30
    1c02:	5f 1f       	adc	r21, r31
      bootfile_parameters[bootfile_parameters_size++] = sleep_secs[i];

   for(i=0; bootfile_string2[i]!='\0'; i++)
    1c04:	61 91       	ld	r22, Z+
    1c06:	66 23       	and	r22, r22
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <build_bootfile_parameters+0x112>
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string2[i];
    1c0a:	6d 93       	st	X+, r22
    1c0c:	f8 cf       	rjmp	.-16     	; 0x1bfe <build_bootfile_parameters+0x102>
    1c0e:	da 01       	movw	r26, r20
    1c10:	a9 58       	subi	r26, 0x89	; 137
    1c12:	be 4f       	sbci	r27, 0xFE	; 254
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string1[i];

   for(i=0; sleep_secs[i]!='\0'; i++)
      bootfile_parameters[bootfile_parameters_size++] = sleep_secs[i];

   for(i=0; bootfile_string2[i]!='\0'; i++)
    1c14:	e3 e4       	ldi	r30, 0x43	; 67
    1c16:	f2 e0       	ldi	r31, 0x02	; 2
    1c18:	43 54       	subi	r20, 0x43	; 67
    1c1a:	52 40       	sbci	r21, 0x02	; 2
    1c1c:	9a 01       	movw	r18, r20
    1c1e:	2e 0f       	add	r18, r30
    1c20:	3f 1f       	adc	r19, r31
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string2[i];

   for(i=0; highlight_color[i]!='\0'; i++)
    1c22:	61 91       	ld	r22, Z+
    1c24:	66 23       	and	r22, r22
    1c26:	11 f0       	breq	.+4      	; 0x1c2c <build_bootfile_parameters+0x130>
      bootfile_parameters[bootfile_parameters_size++] = highlight_color[i];
    1c28:	6d 93       	st	X+, r22
    1c2a:	f8 cf       	rjmp	.-16     	; 0x1c1c <build_bootfile_parameters+0x120>
    1c2c:	30 93 76 01 	sts	0x0176, r19	; 0x800176 <bootfile_parameters_size+0x1>
    1c30:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <bootfile_parameters_size>
    1c34:	d9 01       	movw	r26, r18
    1c36:	a9 58       	subi	r26, 0x89	; 137
    1c38:	be 4f       	sbci	r27, 0xFE	; 254
      bootfile_parameters[bootfile_parameters_size++] = sleep_secs[i];

   for(i=0; bootfile_string2[i]!='\0'; i++)
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string2[i];

   for(i=0; highlight_color[i]!='\0'; i++)
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	f6 96       	adiw	r30, 0x36	; 54
    1c3e:	2e 1b       	sub	r18, r30
    1c40:	3f 0b       	sbc	r19, r31
    1c42:	b9 01       	movw	r22, r18
    1c44:	6e 0f       	add	r22, r30
    1c46:	7f 1f       	adc	r23, r31
      bootfile_parameters[bootfile_parameters_size++] = highlight_color[i];

   for(i=0; bootfile_string3[i]!='\0'; i++)
    1c48:	41 91       	ld	r20, Z+
    1c4a:	44 23       	and	r20, r20
    1c4c:	11 f0       	breq	.+4      	; 0x1c52 <build_bootfile_parameters+0x156>
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string3[i];
    1c4e:	4d 93       	st	X+, r20
    1c50:	f8 cf       	rjmp	.-16     	; 0x1c42 <build_bootfile_parameters+0x146>
    1c52:	70 93 76 01 	sts	0x0176, r23	; 0x800176 <bootfile_parameters_size+0x1>
    1c56:	60 93 75 01 	sts	0x0175, r22	; 0x800175 <bootfile_parameters_size>
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string2[i];

   for(i=0; highlight_color[i]!='\0'; i++)
      bootfile_parameters[bootfile_parameters_size++] = highlight_color[i];

   for(i=0; bootfile_string3[i]!='\0'; i++)
    1c5a:	a1 2c       	mov	r10, r1
    1c5c:	b1 2c       	mov	r11, r1
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string3[i];

   for(i=0; i<entry_length[choice]; i++)
      bootfile_parameters[bootfile_parameters_size++] = read_entry_file(entry_start[choice] + i);
    1c5e:	8c 01       	movw	r16, r24
    1c60:	0d 58       	subi	r16, 0x8D	; 141
    1c62:	1d 4f       	sbci	r17, 0xFD	; 253
    1c64:	80 90 75 01 	lds	r8, 0x0175	; 0x800175 <bootfile_parameters_size>
    1c68:	90 90 76 01 	lds	r9, 0x0176	; 0x800176 <bootfile_parameters_size+0x1>
    1c6c:	74 01       	movw	r14, r8
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	e8 1a       	sub	r14, r24
    1c72:	f8 0a       	sbc	r15, r24
    1c74:	f0 92 76 01 	sts	0x0176, r15	; 0x800176 <bootfile_parameters_size+0x1>
    1c78:	e0 92 75 01 	sts	0x0175, r14	; 0x800175 <bootfile_parameters_size>
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
    1c82:	8a 0d       	add	r24, r10
    1c84:	9b 1d       	adc	r25, r11
    1c86:	71 d3       	rcall	.+1762   	; 0x236a <eeprom_read_byte>
    1c88:	f4 01       	movw	r30, r8
    1c8a:	e9 58       	subi	r30, 0x89	; 137
    1c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8e:	80 83       	st	Z, r24
      bootfile_parameters[bootfile_parameters_size++] = highlight_color[i];

   for(i=0; bootfile_string3[i]!='\0'; i++)
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string3[i];

   for(i=0; i<entry_length[choice]; i++)
    1c90:	ff ef       	ldi	r31, 0xFF	; 255
    1c92:	af 1a       	sub	r10, r31
    1c94:	bf 0a       	sbc	r11, r31
    1c96:	ca 14       	cp	r12, r10
    1c98:	db 04       	cpc	r13, r11
    1c9a:	21 f7       	brne	.-56     	; 0x1c64 <build_bootfile_parameters+0x168>
    1c9c:	d7 01       	movw	r26, r14
    1c9e:	a9 58       	subi	r26, 0x89	; 137
    1ca0:	be 4f       	sbci	r27, 0xFE	; 254
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e3 5b       	subi	r30, 0xB3	; 179
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	ee 1a       	sub	r14, r30
    1caa:	ff 0a       	sbc	r15, r31
    1cac:	c7 01       	movw	r24, r14
    1cae:	8e 0f       	add	r24, r30
    1cb0:	9f 1f       	adc	r25, r31
      bootfile_parameters[bootfile_parameters_size++] = read_entry_file(entry_start[choice] + i);

   for(i=0; bootfile_string4[i]!='\0'; i++)
    1cb2:	21 91       	ld	r18, Z+
    1cb4:	22 23       	and	r18, r18
    1cb6:	11 f0       	breq	.+4      	; 0x1cbc <build_bootfile_parameters+0x1c0>
      bootfile_parameters[bootfile_parameters_size++] = bootfile_string4[i];
    1cb8:	2d 93       	st	X+, r18
    1cba:	f8 cf       	rjmp	.-16     	; 0x1cac <build_bootfile_parameters+0x1b0>
    1cbc:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <bootfile_parameters_size+0x1>
    1cc0:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <bootfile_parameters_size>

    bootfile_template_size = &bootfile_template_end - &bootfile_template_start;
    complete_bootfile_size = bootfile_parameters_size + bootfile_template_size;
    1cc4:	83 5a       	subi	r24, 0xA3	; 163
    1cc6:	9c 4d       	sbci	r25, 0xDC	; 220
    1cc8:	8e 56       	subi	r24, 0x6E	; 110
    1cca:	90 42       	sbci	r25, 0x20	; 32
    1ccc:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <complete_bootfile_size+0x1>
    1cd0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <complete_bootfile_size>
}
    1cd4:	c0 5b       	subi	r28, 0xB0	; 176
    1cd6:	df 4f       	sbci	r29, 0xFF	; 255
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	bf 90       	pop	r11
    1cf4:	af 90       	pop	r10
    1cf6:	9f 90       	pop	r9
    1cf8:	8f 90       	pop	r8
    1cfa:	08 95       	ret

00001cfc <read_file_SWITCH_GRB>:


U8 read_file_SWITCH_GRB(U16 offset)
{
    if ((offset) < bootfile_parameters_size)
    1cfc:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <bootfile_parameters_size>
    1d00:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <bootfile_parameters_size+0x1>
    1d04:	82 17       	cp	r24, r18
    1d06:	93 07       	cpc	r25, r19
    1d08:	28 f4       	brcc	.+10     	; 0x1d14 <read_file_SWITCH_GRB+0x18>
        return bootfile_parameters[offset];
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e9 58       	subi	r30, 0x89	; 137
    1d0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d10:	80 81       	ld	r24, Z
    1d12:	08 95       	ret
    else
    {
        offset -= bootfile_parameters_size;
    }
        return pgm_read_byte((&bootfile_template_start) + offset);
    1d14:	82 1b       	sub	r24, r18
    1d16:	93 0b       	sbc	r25, r19
    1d18:	fc 01       	movw	r30, r24
    1d1a:	e2 59       	subi	r30, 0x92	; 146
    1d1c:	ff 4d       	sbci	r31, 0xDF	; 223
    1d1e:	84 91       	lpm	r24, Z
}
    1d20:	08 95       	ret

00001d22 <read_file_BOOTPINS_TXT>:


U8 read_file_BOOTPINS_TXT(U16 offset)
{
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	2f 97       	sbiw	r28, 0x0f	; 15
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
   if (get_choice_mode() == Binary) // binary mode; show 4 bits and BIN suffix
    1d3a:	8c 01       	movw	r16, r24
    1d3c:	93 d1       	rcall	.+806    	; 0x2064 <get_choice_mode>
    1d3e:	89 2b       	or	r24, r25
   {
      const unsigned char rest[] = "Binary pick:  ";
    1d40:	69 f4       	brne	.+26     	; 0x1d5c <read_file_BOOTPINS_TXT+0x3a>
    1d42:	8f e0       	ldi	r24, 0x0F	; 15
    1d44:	e0 e5       	ldi	r30, 0x50	; 80
    1d46:	f1 e0       	ldi	r31, 0x01	; 1
    1d48:	de 01       	movw	r26, r28
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	01 90       	ld	r0, Z+
    1d4e:	0d 92       	st	X+, r0
    1d50:	8a 95       	dec	r24
      if (offset < 14)
    1d52:	e1 f7       	brne	.-8      	; 0x1d4c <read_file_BOOTPINS_TXT+0x2a>
    1d54:	0e 30       	cpi	r16, 0x0E	; 14
    1d56:	11 05       	cpc	r17, r1
    1d58:	68 f0       	brcs	.+26     	; 0x1d74 <read_file_BOOTPINS_TXT+0x52>
      else
         return ((get_raw_boot_pins() >> (3 - (offset - 14)) ) & 0x01) + 0x30;
   }
   else // 1-aus-n mode; show all 11 selector bits
   {
      const unsigned char rest[] = "11->1: ";
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <read_file_BOOTPINS_TXT+0x62>
    1d5c:	88 e0       	ldi	r24, 0x08	; 8
    1d5e:	ef e5       	ldi	r30, 0x5F	; 95
    1d60:	f1 e0       	ldi	r31, 0x01	; 1
    1d62:	de 01       	movw	r26, r28
    1d64:	11 96       	adiw	r26, 0x01	; 1
    1d66:	01 90       	ld	r0, Z+
    1d68:	0d 92       	st	X+, r0
    1d6a:	8a 95       	dec	r24
      if (offset < 7)
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <read_file_BOOTPINS_TXT+0x44>
    1d6e:	07 30       	cpi	r16, 0x07	; 7
    1d70:	11 05       	cpc	r17, r1
         return rest[offset];
    1d72:	40 f4       	brcc	.+16     	; 0x1d84 <read_file_BOOTPINS_TXT+0x62>
    1d74:	e1 e0       	ldi	r30, 0x01	; 1
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	ec 0f       	add	r30, r28
    1d7a:	fd 1f       	adc	r31, r29
    1d7c:	e0 0f       	add	r30, r16
    1d7e:	f1 1f       	adc	r31, r17
      else                     
         return ((get_raw_boot_pins() >> (10 - (offset - 7))) & 0x01) + 0x30;
    1d80:	80 81       	ld	r24, Z
    1d82:	0c c0       	rjmp	.+24     	; 0x1d9c <read_file_BOOTPINS_TXT+0x7a>
    1d84:	6a d1       	rcall	.+724    	; 0x205a <get_raw_boot_pins>
    1d86:	21 e1       	ldi	r18, 0x11	; 17
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	20 1b       	sub	r18, r16
    1d8c:	31 0b       	sbc	r19, r17
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <read_file_BOOTPINS_TXT+0x72>
    1d90:	96 95       	lsr	r25
    1d92:	87 95       	ror	r24
    1d94:	2a 95       	dec	r18
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <read_file_BOOTPINS_TXT+0x6e>
    1d98:	81 70       	andi	r24, 0x01	; 1
   }
}
    1d9a:	80 5d       	subi	r24, 0xD0	; 208
    1d9c:	2f 96       	adiw	r28, 0x0f	; 15
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	08 95       	ret

00001db2 <sample_choice_pins>:
    */
}


static U16 sample_choice_pins(void)
{
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    U16 all_pins = 0;

    // assemble pin word
    if (choice_mode==OneOfN)
    1dc2:	c0 91 9f 02 	lds	r28, 0x029F	; 0x80029f <choice_mode>
    1dc6:	d0 91 a0 02 	lds	r29, 0x02A0	; 0x8002a0 <choice_mode+0x1>
    1dca:	21 97       	sbiw	r28, 0x01	; 1
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <sample_choice_pins+0x1e>
    1dce:	42 c0       	rjmp	.+132    	; 0x1e54 <sample_choice_pins+0xa2>
    {
        all_pins |= (read_choice_pin(11));
    1dd0:	c3 b1       	in	r28, 0x03	; 3
        all_pins <<= 1;
    1dd2:	c5 fb       	bst	r28, 5
    1dd4:	44 27       	eor	r20, r20
    1dd6:	40 f9       	bld	r20, 0
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	44 0f       	add	r20, r20
    1ddc:	55 1f       	adc	r21, r21
        all_pins |= (read_choice_pin(10));
    1dde:	cf b1       	in	r28, 0x0f	; 15
    1de0:	cc 1f       	adc	r28, r28
    1de2:	cc 27       	eor	r28, r28
    1de4:	cc 1f       	adc	r28, r28
    1de6:	9a 01       	movw	r18, r20
    1de8:	2c 2b       	or	r18, r28
    1dea:	e9 01       	movw	r28, r18
        all_pins <<= 1;
    1dec:	ae 01       	movw	r20, r28
    1dee:	44 0f       	add	r20, r20
    1df0:	55 1f       	adc	r21, r21
        all_pins |= (read_choice_pin(9));
    1df2:	c6 b1       	in	r28, 0x06	; 6
    1df4:	c6 fb       	bst	r28, 6
    1df6:	cc 24       	eor	r12, r12
    1df8:	c0 f8       	bld	r12, 0
    1dfa:	d1 2c       	mov	r13, r1
    1dfc:	e6 01       	movw	r28, r12
    1dfe:	c4 2b       	or	r28, r20
    1e00:	d5 2b       	or	r29, r21
        all_pins <<= 1;
    1e02:	cc 0f       	add	r28, r28
    1e04:	dd 1f       	adc	r29, r29
        all_pins |= (read_choice_pin(8));
    1e06:	43 b1       	in	r20, 0x03	; 3
    1e08:	46 fb       	bst	r20, 6
    1e0a:	ee 24       	eor	r14, r14
    1e0c:	e0 f8       	bld	r14, 0
    1e0e:	f1 2c       	mov	r15, r1
    1e10:	a7 01       	movw	r20, r14
    1e12:	4c 2b       	or	r20, r28
    1e14:	5d 2b       	or	r21, r29
        all_pins <<= 1;
    1e16:	44 0f       	add	r20, r20
    1e18:	55 1f       	adc	r21, r21
        all_pins |= (read_choice_pin(7));
    1e1a:	c3 b1       	in	r28, 0x03	; 3
    1e1c:	c4 fb       	bst	r28, 4
    1e1e:	00 27       	eor	r16, r16
    1e20:	00 f9       	bld	r16, 0
    1e22:	10 e0       	ldi	r17, 0x00	; 0
    1e24:	40 2b       	or	r20, r16
    1e26:	51 2b       	or	r21, r17
        all_pins <<= 1;
    1e28:	44 0f       	add	r20, r20
    1e2a:	55 1f       	adc	r21, r21
        all_pins |= (read_choice_pin(6));
    1e2c:	c9 b1       	in	r28, 0x09	; 9
    1e2e:	cc 1f       	adc	r28, r28
    1e30:	cc 27       	eor	r28, r28
    1e32:	cc 1f       	adc	r28, r28
    1e34:	4c 2b       	or	r20, r28
        all_pins <<= 1;
    1e36:	44 0f       	add	r20, r20
    1e38:	55 1f       	adc	r21, r21
        all_pins |= (read_choice_pin(5));
    1e3a:	c9 b1       	in	r28, 0x09	; 9
    1e3c:	c6 fb       	bst	r28, 6
    1e3e:	22 27       	eor	r18, r18
    1e40:	20 f9       	bld	r18, 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	42 2b       	or	r20, r18
    1e46:	53 2b       	or	r21, r19
        all_pins <<= 1;
    1e48:	44 0f       	add	r20, r20
    1e4a:	55 1f       	adc	r21, r21

        all_pins ^= 0x00FE; // invert pins so far - '1' now means tied to ground
    1e4c:	9a 01       	movw	r18, r20
    1e4e:	ce ef       	ldi	r28, 0xFE	; 254
    1e50:	2c 27       	eor	r18, r28
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <sample_choice_pins+0xa6>
}


static U16 sample_choice_pins(void)
{
    U16 all_pins = 0;
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
        all_pins <<= 1;

        all_pins ^= 0x00FE; // invert pins so far - '1' now means tied to ground
    }
    // used in both modes
    all_pins |= (read_choice_pin(4));
    1e58:	49 b1       	in	r20, 0x09	; 9
    1e5a:	44 fb       	bst	r20, 4
    1e5c:	aa 27       	eor	r26, r26
    1e5e:	a0 f9       	bld	r26, 0
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	2a 2b       	or	r18, r26
    1e64:	3b 2b       	or	r19, r27
    all_pins <<= 1;
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    all_pins |= (read_choice_pin(3));
    1e6a:	49 b1       	in	r20, 0x09	; 9
    1e6c:	45 fb       	bst	r20, 5
    1e6e:	ee 27       	eor	r30, r30
    1e70:	e0 f9       	bld	r30, 0
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	2e 2b       	or	r18, r30
    1e76:	3f 2b       	or	r19, r31
    all_pins <<= 1;
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    all_pins |= (read_choice_pin(2));
    1e7c:	49 b1       	in	r20, 0x09	; 9
    1e7e:	42 fb       	bst	r20, 2
    1e80:	88 27       	eor	r24, r24
    1e82:	80 f9       	bld	r24, 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	82 2b       	or	r24, r18
    1e88:	93 2b       	or	r25, r19
    all_pins <<= 1;
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    all_pins |= (read_choice_pin(1));
    1e8e:	29 b1       	in	r18, 0x09	; 9
    1e90:	23 fb       	bst	r18, 3
    1e92:	66 27       	eor	r22, r22
    1e94:	60 f9       	bld	r22, 0
    1e96:	70 e0       	ldi	r23, 0x00	; 0
    1e98:	86 2b       	or	r24, r22
    1e9a:	97 2b       	or	r25, r23

    all_pins ^= 0x000F; // invert lowest 4 pins - '1' now means tied to ground

    return all_pins;
}
    1e9c:	2f e0       	ldi	r18, 0x0F	; 15
    1e9e:	82 27       	eor	r24, r18
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	df 90       	pop	r13
    1eae:	cf 90       	pop	r12
    1eb0:	08 95       	ret

00001eb2 <boot_choice_init>:
// prepare port pins for boot choice
void boot_choice_init(void)
{
    // mode and choice pins are all inputs

    set_mode_input_pullup();
    1eb2:	23 98       	cbi	0x04, 3	; 4
    1eb4:	2b 9a       	sbi	0x05, 3	; 5

    set_choice_input_pullup(1);
    1eb6:	53 98       	cbi	0x0a, 3	; 10
    1eb8:	5b 9a       	sbi	0x0b, 3	; 11
    set_choice_input_pullup(2);
    1eba:	52 98       	cbi	0x0a, 2	; 10
    1ebc:	5a 9a       	sbi	0x0b, 2	; 11
    set_choice_input_pullup(3);
    1ebe:	55 98       	cbi	0x0a, 5	; 10
    1ec0:	5d 9a       	sbi	0x0b, 5	; 11
    set_choice_input_pullup(4);
    1ec2:	54 98       	cbi	0x0a, 4	; 10
    1ec4:	5c 9a       	sbi	0x0b, 4	; 11



    if (read_mode_pin()==0) // tied to GND
    1ec6:	1b 99       	sbic	0x03, 3	; 3
    1ec8:	05 c0       	rjmp	.+10     	; 0x1ed4 <boot_choice_init+0x22>
    {
        choice_mode = Binary;
    1eca:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <choice_mode+0x1>
    1ece:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <choice_mode>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <boot_choice_init+0x4a>
    }
    else
    {
        choice_mode = OneOfN;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <choice_mode+0x1>
    1edc:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <choice_mode>

        set_choice_input_pullup(5);
    1ee0:	56 98       	cbi	0x0a, 6	; 10
    1ee2:	5e 9a       	sbi	0x0b, 6	; 11
        set_choice_input_pullup(6);
    1ee4:	57 98       	cbi	0x0a, 7	; 10
    1ee6:	5f 9a       	sbi	0x0b, 7	; 11
        set_choice_input_pullup(7);
    1ee8:	24 98       	cbi	0x04, 4	; 4
    1eea:	2c 9a       	sbi	0x05, 4	; 5
        set_choice_input_pullup(8);
    1eec:	26 98       	cbi	0x04, 6	; 4
    1eee:	2e 9a       	sbi	0x05, 6	; 5
        set_choice_input_pullup(9);
    1ef0:	3e 98       	cbi	0x07, 6	; 7
    1ef2:	46 9a       	sbi	0x08, 6	; 8
        set_choice_input_pullup(10);
    1ef4:	87 98       	cbi	0x10, 7	; 16
    1ef6:	8f 9a       	sbi	0x11, 7	; 17
        set_choice_input_pullup(11);
    1ef8:	25 98       	cbi	0x04, 5	; 4
    }
    
    // fill variables with initial pattern
    current_choice_pins = sample_choice_pins();
    1efa:	2d 9a       	sbi	0x05, 5	; 5
    1efc:	5a df       	rcall	.-332    	; 0x1db2 <sample_choice_pins>
    1efe:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <current_choice_pins+0x1>
    1f02:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <current_choice_pins>
    last_choice_pins    = current_choice_pins;
    1f06:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <last_choice_pins+0x1>
    1f0a:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <last_choice_pins>
    pinSamples[0]      = current_choice_pins;
    1f0e:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <pinSamples+0x1>
    1f12:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <pinSamples>
    pinSamples[1]      = current_choice_pins;
    1f16:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <pinSamples+0x3>
    1f1a:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <pinSamples+0x2>
    pinSamples[2]      = current_choice_pins;
    1f1e:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <pinSamples+0x5>
    1f22:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <pinSamples+0x4>

    // no USB detach for now
    detach_countdown = 0;
    1f26:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <detach_countdown+0x1>
    1f2a:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <detach_countdown>

    // IRQ setup
    Disable_interrupt();

        // set timer0 counter initial value to 0
        TCNT0 = 0x00;
    1f2e:	f8 94       	cli

        // compare match A for 5msec tick
        OCR0A = (FOSC/1000) * 5;
    1f30:	16 bc       	out	0x26, r1	; 38
    1f32:	80 e5       	ldi	r24, 0x50	; 80

        // clear timer on compare match A
        TCCR0A = (1 << WGM01);
    1f34:	87 bd       	out	0x27, r24	; 39
    1f36:	82 e0       	ldi	r24, 0x02	; 2
        // start timer0 with /1024 prescaler
        TCCR0B = (1 << CS02) | (1 << CS00);
    1f38:	84 bd       	out	0x24, r24	; 36
    1f3a:	95 e0       	ldi	r25, 0x05	; 5

        // enable compare match interrupt A for Timer0
        TIMSK0 = (1 << OCIE0A);
    1f3c:	95 bd       	out	0x25, r25	; 37
    1f3e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

    Enable_interrupt();
    1f42:	78 94       	sei
    1f44:	08 95       	ret

00001f46 <__vector_21>:
    return;
}


ISR(TIMER0_COMPA_vect)
{
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	2f 93       	push	r18
    1f56:	3f 93       	push	r19
    1f58:	4f 93       	push	r20
    1f5a:	5f 93       	push	r21
    1f5c:	6f 93       	push	r22
    1f5e:	7f 93       	push	r23
    1f60:	8f 93       	push	r24
    1f62:	9f 93       	push	r25
    1f64:	af 93       	push	r26
    1f66:	bf 93       	push	r27
    1f68:	cf 93       	push	r28
    1f6a:	df 93       	push	r29
    1f6c:	ef 93       	push	r30
    1f6e:	ff 93       	push	r31

// should be called from Timer IRQ (every 5ms)
static void filter_choice_pins(void)
{
    // shift data and acquire new sample
    pinSamples[2] = pinSamples[1];
    1f70:	00 91 97 02 	lds	r16, 0x0297	; 0x800297 <pinSamples+0x2>
    1f74:	10 91 98 02 	lds	r17, 0x0298	; 0x800298 <pinSamples+0x3>
    1f78:	10 93 9a 02 	sts	0x029A, r17	; 0x80029a <pinSamples+0x5>
    1f7c:	00 93 99 02 	sts	0x0299, r16	; 0x800299 <pinSamples+0x4>
    pinSamples[1] = pinSamples[0];
    1f80:	c0 91 95 02 	lds	r28, 0x0295	; 0x800295 <pinSamples>
    1f84:	d0 91 96 02 	lds	r29, 0x0296	; 0x800296 <pinSamples+0x1>
    1f88:	d0 93 98 02 	sts	0x0298, r29	; 0x800298 <pinSamples+0x3>
    1f8c:	c0 93 97 02 	sts	0x0297, r28	; 0x800297 <pinSamples+0x2>
    pinSamples[0] = sample_choice_pins();
    1f90:	10 df       	rcall	.-480    	; 0x1db2 <sample_choice_pins>
    1f92:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <pinSamples+0x1>
    1f96:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <pinSamples>

    // detect 3x'1' and adjust current choice
    U16 samplesANDed = pinSamples[2] & pinSamples[1] & pinSamples[0];
    1f9a:	c0 23       	and	r28, r16
    1f9c:	d1 23       	and	r29, r17
    1f9e:	8c 23       	and	r24, r28
    current_choice_pins = last_choice_pins | samplesANDed; // set '1' where three samples were '1'
    1fa0:	9d 23       	and	r25, r29
    1fa2:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <last_choice_pins>
    1fa6:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <last_choice_pins+0x1>

    // detect 3x'0' and adjust current choice
    U16 samplesORed = pinSamples[2] & pinSamples[1] & pinSamples[0];
    current_choice_pins = current_choice_pins & samplesORed; // set '0' where three samples were '0'
    1faa:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <current_choice_pins+0x1>
    1fae:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <current_choice_pins>

    // stable change triggers USB detach and wait
    if (current_choice_pins != last_choice_pins)
    1fb2:	82 17       	cp	r24, r18
    1fb4:	93 07       	cpc	r25, r19
    {
        detach_countdown = 41; // 40x 5msecs = 200msecs
    1fb6:	31 f0       	breq	.+12     	; 0x1fc4 <__vector_21+0x7e>
    1fb8:	29 e2       	ldi	r18, 0x29	; 41
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	30 93 94 02 	sts	0x0294, r19	; 0x800294 <detach_countdown+0x1>
    1fc0:	20 93 93 02 	sts	0x0293, r18	; 0x800293 <detach_countdown>
    }
    // make stable sample the new normal
    last_choice_pins = current_choice_pins;
    1fc4:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <last_choice_pins+0x1>
    1fc8:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <last_choice_pins>

    // Keep USB detached and count down
    if (detach_countdown != 0)
    1fcc:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <detach_countdown>
    1fd0:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <detach_countdown+0x1>
    1fd4:	89 2b       	or	r24, r25
    {
        Usb_detach();
    1fd6:	a9 f0       	breq	.+42     	; 0x2002 <__vector_21+0xbc>
    1fd8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1fdc:	81 60       	ori	r24, 0x01	; 1
    1fde:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

        detach_countdown--;
    1fe2:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <detach_countdown>
    1fe6:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <detach_countdown+0x1>
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <detach_countdown+0x1>
    1ff0:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <detach_countdown>
        if (detach_countdown==0)
    1ff4:	89 2b       	or	r24, r25
            Usb_attach();
    1ff6:	29 f4       	brne	.+10     	; 0x2002 <__vector_21+0xbc>
    1ff8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1ffc:	8e 7f       	andi	r24, 0xFE	; 254
    1ffe:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
            Debug_Led_on();
    }

    led_countdown--;
    */
}
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	bf 91       	pop	r27
    200c:	af 91       	pop	r26
    200e:	9f 91       	pop	r25
    2010:	8f 91       	pop	r24
    2012:	7f 91       	pop	r23
    2014:	6f 91       	pop	r22
    2016:	5f 91       	pop	r21
    2018:	4f 91       	pop	r20
    201a:	3f 91       	pop	r19
    201c:	2f 91       	pop	r18
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	0f 90       	pop	r0
    2028:	1f 90       	pop	r1
    202a:	18 95       	reti

0000202c <get_boot_choice>:
{
    U8 choice;
    U16 all_pins = 0;

    // assemble pin word
    all_pins = current_choice_pins;
    202c:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <current_choice_pins>
    2030:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <current_choice_pins+0x1>

    if (choice_mode==OneOfN)
    2034:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <choice_mode>
    2038:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <choice_mode+0x1>
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	51 f4       	brne	.+20     	; 0x2054 <get_boot_choice+0x28>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    {
        for (choice = 1; choice<12; choice++)
        {
            if (all_pins & 0x1)
    2042:	20 fd       	sbrc	r18, 0
    2044:	09 c0       	rjmp	.+18     	; 0x2058 <get_boot_choice+0x2c>
                return choice; // return first pin tied to ground
            all_pins >>= 1;
    2046:	36 95       	lsr	r19
    2048:	27 95       	ror	r18
    // assemble pin word
    all_pins = current_choice_pins;

    if (choice_mode==OneOfN)
    {
        for (choice = 1; choice<12; choice++)
    204a:	8f 5f       	subi	r24, 0xFF	; 255
    204c:	8c 30       	cpi	r24, 0x0C	; 12
    204e:	c9 f7       	brne	.-14     	; 0x2042 <get_boot_choice+0x16>
            if (all_pins & 0x1)
                return choice; // return first pin tied to ground
            all_pins >>= 1;
        }

        return 0; // no pin tied to GND
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	08 95       	ret
    }
    else // binary mode - first 4 bits are boot choice in binary form (0x0..0xF) 
        return (all_pins &= 0x0F);
    2054:	82 2f       	mov	r24, r18
    2056:	8f 70       	andi	r24, 0x0F	; 15
}
    2058:	08 95       	ret

0000205a <get_raw_boot_pins>:

U16 get_raw_boot_pins(void)
{
    return current_choice_pins;
}
    205a:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <current_choice_pins>
    205e:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <current_choice_pins+0x1>
    2062:	08 95       	ret

00002064 <get_choice_mode>:

pin_mode get_choice_mode(void)
{
    return choice_mode;    
}
    2064:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <choice_mode>
    2068:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <choice_mode+0x1>
    206c:	08 95       	ret

0000206e <bootfile_template_start>:
    206e:	23 23       	and	r18, r19
    2070:	23 20       	and	r2, r3
    2072:	4f 4e       	sbci	r20, 0xEF	; 239
    2074:	4c 59       	subi	r20, 0x9C	; 156
    2076:	20 43       	sbci	r18, 0x30	; 48
    2078:	48 41       	sbci	r20, 0x18	; 24
    207a:	4e 47       	sbci	r20, 0x7E	; 126
    207c:	45 20       	and	r4, r5
    207e:	42 45       	sbci	r20, 0x52	; 82
    2080:	4c 4f       	sbci	r20, 0xFC	; 252
    2082:	57 20       	and	r5, r7
    2084:	49 46       	sbci	r20, 0x69	; 105
    2086:	20 59       	subi	r18, 0x90	; 144
    2088:	4f 55       	subi	r20, 0x5F	; 95
    208a:	20 4b       	sbci	r18, 0xB0	; 176
    208c:	4e 4f       	sbci	r20, 0xFE	; 254
    208e:	57 20       	and	r5, r7
    2090:	57 48       	sbci	r21, 0x87	; 135
    2092:	41 54       	subi	r20, 0x41	; 65
    2094:	20 59       	subi	r18, 0x90	; 144
    2096:	4f 55       	subi	r20, 0x5F	; 95
    2098:	27 52       	subi	r18, 0x27	; 39
    209a:	45 20       	and	r4, r5
    209c:	44 4f       	sbci	r20, 0xF4	; 244
    209e:	49 4e       	sbci	r20, 0xE9	; 233
    20a0:	47 20       	and	r4, r7
    20a2:	23 23       	and	r18, r19
    20a4:	23 0a       	sbc	r2, r19
    20a6:	0a 23       	and	r16, r26
    20a8:	20 6d       	ori	r18, 0xD0	; 208
    20aa:	61 6b       	ori	r22, 0xB1	; 177
    20ac:	65 20       	and	r6, r5
    20ae:	62 6f       	ori	r22, 0xF2	; 242
    20b0:	6f 74       	andi	r22, 0x4F	; 79
    20b2:	20 64       	ori	r18, 0x40	; 64
    20b4:	65 66       	ori	r22, 0x65	; 101
    20b6:	61 75       	andi	r22, 0x51	; 81
    20b8:	6c 74       	andi	r22, 0x4C	; 76
    20ba:	20 0a       	sbc	r2, r16
    20bc:	73 65       	ori	r23, 0x53	; 83
    20be:	74 20       	and	r7, r4
    20c0:	64 65       	ori	r22, 0x54	; 84
    20c2:	66 61       	ori	r22, 0x16	; 22
    20c4:	75 6c       	ori	r23, 0xC5	; 197
    20c6:	74 3d       	cpi	r23, 0xD4	; 212
    20c8:	22 24       	eor	r2, r2
    20ca:	67 72       	andi	r22, 0x27	; 39
    20cc:	75 62       	ori	r23, 0x25	; 37
    20ce:	73 77       	andi	r23, 0x73	; 115
    20d0:	69 74       	andi	r22, 0x49	; 73
    20d2:	63 68       	ori	r22, 0x83	; 131
    20d4:	5f 63       	ori	r21, 0x3F	; 63
    20d6:	68 6f       	ori	r22, 0xF8	; 248
    20d8:	69 63       	ori	r22, 0x39	; 57
    20da:	65 22       	and	r6, r21
    20dc:	0a 0a       	sbc	r0, r26
    20de:	23 20       	and	r2, r3
    20e0:	73 75       	andi	r23, 0x53	; 83
    20e2:	70 70       	andi	r23, 0x00	; 0
    20e4:	72 65       	ori	r23, 0x52	; 82
    20e6:	73 73       	andi	r23, 0x33	; 51
    20e8:	20 6d       	ori	r18, 0xD0	; 208
    20ea:	65 6e       	ori	r22, 0xE5	; 229
    20ec:	75 20       	and	r7, r5
    20ee:	64 69       	ori	r22, 0x94	; 148
    20f0:	73 70       	andi	r23, 0x03	; 3
    20f2:	6c 61       	ori	r22, 0x1C	; 28
    20f4:	79 0a       	sbc	r7, r25
    20f6:	73 65       	ori	r23, 0x53	; 83
    20f8:	74 20       	and	r7, r4
    20fa:	74 69       	ori	r23, 0x94	; 148
    20fc:	6d 65       	ori	r22, 0x5D	; 93
    20fe:	6f 75       	andi	r22, 0x5F	; 95
    2100:	74 5f       	subi	r23, 0xF4	; 244
    2102:	73 74       	andi	r23, 0x43	; 67
    2104:	79 6c       	ori	r23, 0xC9	; 201
    2106:	65 3d       	cpi	r22, 0xD5	; 213
    2108:	6d 65       	ori	r22, 0x5D	; 93
    210a:	6e 75       	andi	r22, 0x5E	; 94
    210c:	0a 73       	andi	r16, 0x3A	; 58
    210e:	65 74       	andi	r22, 0x45	; 69
    2110:	20 74       	andi	r18, 0x40	; 64
    2112:	69 6d       	ori	r22, 0xD9	; 217
    2114:	65 6f       	ori	r22, 0xF5	; 245
    2116:	75 74       	andi	r23, 0x45	; 69
    2118:	3d 30       	cpi	r19, 0x0D	; 13
    211a:	0a 0a       	sbc	r0, r26
    211c:	23 20       	and	r2, r3
    211e:	70 72       	andi	r23, 0x20	; 32
    2120:	69 6e       	ori	r22, 0xE9	; 233
    2122:	74 20       	and	r7, r4
    2124:	62 6f       	ori	r22, 0xF2	; 242
    2126:	6f 74       	andi	r22, 0x4F	; 79
    2128:	20 63       	ori	r18, 0x30	; 48
    212a:	68 6f       	ori	r22, 0xF8	; 248
    212c:	69 63       	ori	r22, 0x39	; 57
    212e:	65 20       	and	r6, r5
    2130:	0a 63       	ori	r16, 0x3A	; 58
    2132:	6c 65       	ori	r22, 0x5C	; 92
    2134:	61 72       	andi	r22, 0x21	; 33
    2136:	0a 0a       	sbc	r0, r26
    2138:	65 63       	ori	r22, 0x35	; 53
    213a:	68 6f       	ori	r22, 0xF8	; 248
    213c:	20 27       	eor	r18, r16
    213e:	50 72       	andi	r21, 0x20	; 32
    2140:	65 73       	andi	r22, 0x35	; 53
    2142:	73 20       	and	r7, r3
    2144:	45 53       	subi	r20, 0x35	; 53
    2146:	43 20       	and	r4, r3
    2148:	66 6f       	ori	r22, 0xF6	; 246
    214a:	72 20       	and	r7, r2
    214c:	62 6f       	ori	r22, 0xF2	; 242
    214e:	6f 74       	andi	r22, 0x4F	; 79
    2150:	20 6d       	ori	r18, 0xD0	; 208
    2152:	65 6e       	ori	r22, 0xE5	; 229
    2154:	75 27       	eor	r23, r21
    2156:	0a 65       	ori	r16, 0x5A	; 90
    2158:	63 68       	ori	r22, 0x83	; 131
    215a:	6f 0a       	sbc	r6, r31
    215c:	65 63       	ori	r22, 0x35	; 53
    215e:	68 6f       	ori	r22, 0xF8	; 248
    2160:	20 2d       	mov	r18, r0
    2162:	6e 20       	and	r6, r14
    2164:	27 42       	sbci	r18, 0x27	; 39
    2166:	6f 6f       	ori	r22, 0xFF	; 255
    2168:	74 69       	ori	r23, 0x94	; 148
    216a:	6e 67       	ori	r22, 0x7E	; 126
    216c:	20 27       	eor	r18, r16
    216e:	0a 0a       	sbc	r0, r26
    2170:	6f 6c       	ori	r22, 0xCF	; 207
    2172:	64 5f       	subi	r22, 0xF4	; 244
    2174:	63 6f       	ori	r22, 0xF3	; 243
    2176:	6c 6f       	ori	r22, 0xFC	; 252
    2178:	72 3d       	cpi	r23, 0xD2	; 210
    217a:	22 24       	eor	r2, r2
    217c:	63 6f       	ori	r22, 0xF3	; 243
    217e:	6c 6f       	ori	r22, 0xFC	; 252
    2180:	72 5f       	subi	r23, 0xF2	; 242
    2182:	6e 6f       	ori	r22, 0xFE	; 254
    2184:	72 6d       	ori	r23, 0xD2	; 210
    2186:	61 6c       	ori	r22, 0xC1	; 193
    2188:	22 20       	and	r2, r2
    218a:	20 20       	and	r2, r0
    218c:	20 20       	and	r2, r0
    218e:	20 20       	and	r2, r0
    2190:	20 20       	and	r2, r0
    2192:	20 20       	and	r2, r0
    2194:	20 20       	and	r2, r0
    2196:	20 20       	and	r2, r0
    2198:	20 20       	and	r2, r0
    219a:	20 20       	and	r2, r0
    219c:	20 20       	and	r2, r0
    219e:	20 20       	and	r2, r0
    21a0:	20 23       	and	r18, r16
    21a2:	20 73       	andi	r18, 0x30	; 48
    21a4:	61 76       	andi	r22, 0x61	; 97
    21a6:	65 20       	and	r6, r5
    21a8:	6e 6f       	ori	r22, 0xFE	; 254
    21aa:	72 6d       	ori	r23, 0xD2	; 210
    21ac:	61 6c       	ori	r22, 0xC1	; 193
    21ae:	20 63       	ori	r18, 0x30	; 48
    21b0:	6f 6c       	ori	r22, 0xCF	; 207
    21b2:	6f 72       	andi	r22, 0x2F	; 47
    21b4:	0a 69       	ori	r16, 0x9A	; 154
    21b6:	66 20       	and	r6, r6
    21b8:	5b 20       	and	r5, r11
    21ba:	2d 6e       	ori	r18, 0xED	; 237
    21bc:	20 22       	and	r2, r16
    21be:	24 7b       	andi	r18, 0xB4	; 180
    21c0:	67 72       	andi	r22, 0x27	; 39
    21c2:	75 62       	ori	r23, 0x25	; 37
    21c4:	73 77       	andi	r23, 0x73	; 115
    21c6:	69 74       	andi	r22, 0x49	; 73
    21c8:	63 68       	ori	r22, 0x83	; 131
    21ca:	5f 63       	ori	r21, 0x3F	; 63
    21cc:	68 6f       	ori	r22, 0xF8	; 248
    21ce:	69 63       	ori	r22, 0x39	; 57
    21d0:	65 5f       	subi	r22, 0xF5	; 245
    21d2:	63 6f       	ori	r22, 0xF3	; 243
    21d4:	6c 6f       	ori	r22, 0xFC	; 252
    21d6:	72 7d       	andi	r23, 0xD2	; 210
    21d8:	22 20       	and	r2, r2
    21da:	5d 3b       	cpi	r21, 0xBD	; 189
    21dc:	20 74       	andi	r18, 0x40	; 64
    21de:	68 65       	ori	r22, 0x58	; 88
    21e0:	6e 0a       	sbc	r6, r30
    21e2:	20 20       	and	r2, r0
    21e4:	20 73       	andi	r18, 0x30	; 48
    21e6:	65 74       	andi	r22, 0x45	; 69
    21e8:	20 63       	ori	r18, 0x30	; 48
    21ea:	6f 6c       	ori	r22, 0xCF	; 207
    21ec:	6f 72       	andi	r22, 0x2F	; 47
    21ee:	5f 6e       	ori	r21, 0xEF	; 239
    21f0:	6f 72       	andi	r22, 0x2F	; 47
    21f2:	6d 61       	ori	r22, 0x1D	; 29
    21f4:	6c 3d       	cpi	r22, 0xDC	; 220
    21f6:	22 24       	eor	r2, r2
    21f8:	67 72       	andi	r22, 0x27	; 39
    21fa:	75 62       	ori	r23, 0x25	; 37
    21fc:	73 77       	andi	r23, 0x73	; 115
    21fe:	69 74       	andi	r22, 0x49	; 73
    2200:	63 68       	ori	r22, 0x83	; 131
    2202:	5f 63       	ori	r21, 0x3F	; 63
    2204:	68 6f       	ori	r22, 0xF8	; 248
    2206:	69 63       	ori	r22, 0x39	; 57
    2208:	65 5f       	subi	r22, 0xF5	; 245
    220a:	63 6f       	ori	r22, 0xF3	; 243
    220c:	6c 6f       	ori	r22, 0xFC	; 252
    220e:	72 22       	and	r7, r18
    2210:	20 20       	and	r2, r0
    2212:	20 23       	and	r18, r16
    2214:	20 68       	ori	r18, 0x80	; 128
    2216:	69 67       	ori	r22, 0x79	; 121
    2218:	68 6c       	ori	r22, 0xC8	; 200
    221a:	69 67       	ori	r22, 0x79	; 121
    221c:	68 74       	andi	r22, 0x48	; 72
    221e:	20 69       	ori	r18, 0x90	; 144
    2220:	66 20       	and	r6, r6
    2222:	64 65       	ori	r22, 0x54	; 84
    2224:	66 69       	ori	r22, 0x96	; 150
    2226:	6e 65       	ori	r22, 0x5E	; 94
    2228:	64 0a       	sbc	r6, r20
    222a:	66 69       	ori	r22, 0x96	; 150
    222c:	0a 0a       	sbc	r0, r26
    222e:	65 63       	ori	r22, 0x35	; 53
    2230:	68 6f       	ori	r22, 0xF8	; 248
    2232:	20 24       	eor	r2, r0
    2234:	67 72       	andi	r22, 0x27	; 39
    2236:	75 62       	ori	r23, 0x25	; 37
    2238:	73 77       	andi	r23, 0x73	; 115
    223a:	69 74       	andi	r22, 0x49	; 73
    223c:	63 68       	ori	r22, 0x83	; 131
    223e:	5f 63       	ori	r21, 0x3F	; 63
    2240:	68 6f       	ori	r22, 0xF8	; 248
    2242:	69 63       	ori	r22, 0x39	; 57
    2244:	65 0a       	sbc	r6, r21
    2246:	0a 73       	andi	r16, 0x3A	; 58
    2248:	65 74       	andi	r22, 0x45	; 69
    224a:	20 63       	ori	r18, 0x30	; 48
    224c:	6f 6c       	ori	r22, 0xCF	; 207
    224e:	6f 72       	andi	r22, 0x2F	; 47
    2250:	5f 6e       	ori	r21, 0xEF	; 239
    2252:	6f 72       	andi	r22, 0x2F	; 47
    2254:	6d 61       	ori	r22, 0x1D	; 29
    2256:	6c 3d       	cpi	r22, 0xDC	; 220
    2258:	22 24       	eor	r2, r2
    225a:	6f 6c       	ori	r22, 0xCF	; 207
    225c:	64 5f       	subi	r22, 0xF4	; 244
    225e:	63 6f       	ori	r22, 0xF3	; 243
    2260:	6c 6f       	ori	r22, 0xFC	; 252
    2262:	72 22       	and	r7, r18
    2264:	20 20       	and	r2, r0
    2266:	20 20       	and	r2, r0
    2268:	20 20       	and	r2, r0
    226a:	20 20       	and	r2, r0
    226c:	20 20       	and	r2, r0
    226e:	20 20       	and	r2, r0
    2270:	20 20       	and	r2, r0
    2272:	20 20       	and	r2, r0
    2274:	20 20       	and	r2, r0
    2276:	20 20       	and	r2, r0
    2278:	23 20       	and	r2, r3
    227a:	72 65       	ori	r23, 0x52	; 82
    227c:	73 74       	andi	r23, 0x43	; 67
    227e:	6f 72       	andi	r22, 0x2F	; 47
    2280:	65 20       	and	r6, r5
    2282:	6e 6f       	ori	r22, 0xFE	; 254
    2284:	72 6d       	ori	r23, 0xD2	; 210
    2286:	61 6c       	ori	r22, 0xC1	; 193
    2288:	20 63       	ori	r18, 0x30	; 48
    228a:	6f 6c       	ori	r22, 0xCF	; 207
    228c:	6f 72       	andi	r22, 0x2F	; 47
    228e:	0a 65       	ori	r16, 0x5A	; 90
    2290:	63 68       	ori	r22, 0x83	; 131
    2292:	6f 20       	and	r6, r15
    2294:	2d 6e       	ori	r18, 0xED	; 237
    2296:	20 27       	eor	r18, r16
    2298:	63 6f       	ori	r22, 0xF3	; 243
    229a:	6e 74       	andi	r22, 0x4E	; 78
    229c:	69 6e       	ori	r22, 0xE9	; 233
    229e:	75 65       	ori	r23, 0x55	; 85
    22a0:	73 20       	and	r7, r3
    22a2:	69 6e       	ori	r22, 0xE9	; 233
    22a4:	20 27       	eor	r18, r16
    22a6:	0a 0a       	sbc	r0, r26
    22a8:	23 20       	and	r2, r3
    22aa:	77 61       	ori	r23, 0x17	; 23
    22ac:	69 74       	andi	r22, 0x49	; 73
    22ae:	20 66       	ori	r18, 0x60	; 96
    22b0:	6f 72       	andi	r22, 0x2F	; 47
    22b2:	20 73       	andi	r18, 0x30	; 48
    22b4:	70 65       	ori	r23, 0x50	; 80
    22b6:	63 69       	ori	r22, 0x93	; 147
    22b8:	66 69       	ori	r22, 0x96	; 150
    22ba:	65 64       	ori	r22, 0x45	; 69
    22bc:	20 6e       	ori	r18, 0xE0	; 224
    22be:	75 6d       	ori	r23, 0xD5	; 213
    22c0:	20 6f       	ori	r18, 0xF0	; 240
    22c2:	66 20       	and	r6, r6
    22c4:	73 65       	ori	r23, 0x53	; 83
    22c6:	63 6f       	ori	r22, 0xF3	; 243
    22c8:	6e 64       	ori	r22, 0x4E	; 78
    22ca:	73 0a       	sbc	r7, r19
    22cc:	69 66       	ori	r22, 0x69	; 105
    22ce:	20 73       	andi	r18, 0x30	; 48
    22d0:	6c 65       	ori	r22, 0x5C	; 92
    22d2:	65 70       	andi	r22, 0x05	; 5
    22d4:	20 2d       	mov	r18, r0
    22d6:	2d 69       	ori	r18, 0x9D	; 157
    22d8:	6e 74       	andi	r22, 0x4E	; 78
    22da:	65 72       	andi	r22, 0x25	; 37
    22dc:	72 75       	andi	r23, 0x52	; 82
    22de:	70 74       	andi	r23, 0x40	; 64
    22e0:	69 62       	ori	r22, 0x29	; 41
    22e2:	6c 65       	ori	r22, 0x5C	; 92
    22e4:	20 2d       	mov	r18, r0
    22e6:	2d 76       	andi	r18, 0x6D	; 109
    22e8:	65 72       	andi	r22, 0x25	; 37
    22ea:	62 6f       	ori	r22, 0xF2	; 242
    22ec:	73 65       	ori	r23, 0x53	; 83
    22ee:	20 24       	eor	r2, r0
    22f0:	67 72       	andi	r22, 0x27	; 39
    22f2:	75 62       	ori	r23, 0x25	; 37
    22f4:	73 77       	andi	r23, 0x73	; 115
    22f6:	69 74       	andi	r22, 0x49	; 73
    22f8:	63 68       	ori	r22, 0x83	; 131
    22fa:	5f 73       	andi	r21, 0x3F	; 63
    22fc:	6c 65       	ori	r22, 0x5C	; 92
    22fe:	65 70       	andi	r22, 0x05	; 5
    2300:	5f 73       	andi	r21, 0x3F	; 63
    2302:	65 63       	ori	r22, 0x35	; 53
    2304:	73 0a       	sbc	r7, r19
    2306:	74 68       	ori	r23, 0x84	; 132
    2308:	65 6e       	ori	r22, 0xE5	; 229
    230a:	0a 20       	and	r0, r10
    230c:	20 20       	and	r2, r0
    230e:	63 6c       	ori	r22, 0xC3	; 195
    2310:	65 61       	ori	r22, 0x15	; 21
    2312:	72 0a       	sbc	r7, r18
    2314:	65 6c       	ori	r22, 0xC5	; 197
    2316:	73 65       	ori	r23, 0x53	; 83
    2318:	0a 20       	and	r0, r10
    231a:	20 20       	and	r2, r0
    231c:	75 6e       	ori	r23, 0xE5	; 229
    231e:	73 65       	ori	r23, 0x53	; 83
    2320:	74 20       	and	r7, r4
    2322:	64 65       	ori	r22, 0x54	; 84
    2324:	66 61       	ori	r22, 0x16	; 22
    2326:	75 6c       	ori	r23, 0xC5	; 197
    2328:	74 0a       	sbc	r7, r20
    232a:	20 20       	and	r2, r0
    232c:	20 75       	andi	r18, 0x50	; 80
    232e:	6e 73       	andi	r22, 0x3E	; 62
    2330:	65 74       	andi	r22, 0x45	; 69
    2332:	20 74       	andi	r18, 0x40	; 64
    2334:	69 6d       	ori	r22, 0xD9	; 217
    2336:	65 6f       	ori	r22, 0xF5	; 245
    2338:	75 74       	andi	r23, 0x45	; 69
    233a:	0a 66       	ori	r16, 0x6A	; 106
    233c:	69 0a       	sbc	r6, r25
    233e:	0a 23       	and	r16, r26
    2340:	20 72       	andi	r18, 0x20	; 32
    2342:	65 74       	andi	r22, 0x45	; 69
    2344:	75 72       	andi	r23, 0x25	; 37
    2346:	6e 20       	and	r6, r14
    2348:	74 6f       	ori	r23, 0xF4	; 244
    234a:	20 67       	ori	r18, 0x70	; 112
    234c:	72 75       	andi	r23, 0x52	; 82
    234e:	62 2e       	mov	r6, r18
    2350:	63 66       	ori	r22, 0x63	; 99
    2352:	67 20       	and	r6, r7
    2354:	61 6e       	ori	r22, 0xE1	; 225
    2356:	64 20       	and	r6, r4
    2358:	62 6f       	ori	r22, 0xF2	; 242
    235a:	6f 74       	andi	r22, 0x4F	; 79
    235c:	0a 00       	Address 0x000000000000235c is out of bounds.
.word	0xffff	; ????

0000235d <bootfile_template_end>:
	...

0000235e <__tablejump2__>:
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	05 90       	lpm	r0, Z+
    2364:	f4 91       	lpm	r31, Z
    2366:	e0 2d       	mov	r30, r0
    2368:	09 94       	ijmp

0000236a <eeprom_read_byte>:
    236a:	f9 99       	sbic	0x1f, 1	; 31
    236c:	fe cf       	rjmp	.-4      	; 0x236a <eeprom_read_byte>
    236e:	92 bd       	out	0x22, r25	; 34
    2370:	81 bd       	out	0x21, r24	; 33
    2372:	f8 9a       	sbi	0x1f, 0	; 31
    2374:	99 27       	eor	r25, r25
    2376:	80 b5       	in	r24, 0x20	; 32
    2378:	08 95       	ret

0000237a <eeprom_read_word>:
    237a:	a8 e1       	ldi	r26, 0x18	; 24
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	42 e0       	ldi	r20, 0x02	; 2
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	1c c0       	rjmp	.+56     	; 0x23bc <eeprom_read_blraw>

00002384 <eeprom_write_block>:
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	02 c0       	rjmp	.+4      	; 0x238e <eeprom_write_block+0xa>
    238a:	2d 91       	ld	r18, X+
    238c:	05 d0       	rcall	.+10     	; 0x2398 <eeprom_write_r18>
    238e:	41 50       	subi	r20, 0x01	; 1
    2390:	50 40       	sbci	r21, 0x00	; 0
    2392:	d8 f7       	brcc	.-10     	; 0x238a <eeprom_write_block+0x6>
    2394:	08 95       	ret

00002396 <eeprom_write_byte>:
    2396:	26 2f       	mov	r18, r22

00002398 <eeprom_write_r18>:
    2398:	f9 99       	sbic	0x1f, 1	; 31
    239a:	fe cf       	rjmp	.-4      	; 0x2398 <eeprom_write_r18>
    239c:	1f ba       	out	0x1f, r1	; 31
    239e:	92 bd       	out	0x22, r25	; 34
    23a0:	81 bd       	out	0x21, r24	; 33
    23a2:	20 bd       	out	0x20, r18	; 32
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	fa 9a       	sbi	0x1f, 2	; 31
    23aa:	f9 9a       	sbi	0x1f, 1	; 31
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	08 95       	ret

000023b2 <eeprom_write_word>:
    23b2:	f1 df       	rcall	.-30     	; 0x2396 <eeprom_write_byte>
    23b4:	27 2f       	mov	r18, r23
    23b6:	f0 cf       	rjmp	.-32     	; 0x2398 <eeprom_write_r18>

000023b8 <eeprom_read_block>:
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22

000023bc <eeprom_read_blraw>:
    23bc:	fc 01       	movw	r30, r24
    23be:	f9 99       	sbic	0x1f, 1	; 31
    23c0:	fe cf       	rjmp	.-4      	; 0x23be <eeprom_read_blraw+0x2>
    23c2:	06 c0       	rjmp	.+12     	; 0x23d0 <eeprom_read_blraw+0x14>
    23c4:	f2 bd       	out	0x22, r31	; 34
    23c6:	e1 bd       	out	0x21, r30	; 33
    23c8:	f8 9a       	sbi	0x1f, 0	; 31
    23ca:	31 96       	adiw	r30, 0x01	; 1
    23cc:	00 b4       	in	r0, 0x20	; 32
    23ce:	0d 92       	st	X+, r0
    23d0:	41 50       	subi	r20, 0x01	; 1
    23d2:	50 40       	sbci	r21, 0x00	; 0
    23d4:	b8 f7       	brcc	.-18     	; 0x23c4 <eeprom_read_blraw+0x8>
    23d6:	08 95       	ret

000023d8 <_exit>:
    23d8:	f8 94       	cli

000023da <__stop_program>:
    23da:	ff cf       	rjmp	.-2      	; 0x23da <__stop_program>
