
32u4.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>
       2:	00 00       	nop
       4:	cc c1       	rjmp	.+920    	; 0x39e <__bad_interrupt>
       6:	00 00       	nop
       8:	ca c1       	rjmp	.+916    	; 0x39e <__bad_interrupt>
       a:	00 00       	nop
       c:	c8 c1       	rjmp	.+912    	; 0x39e <__bad_interrupt>
       e:	00 00       	nop
      10:	c6 c1       	rjmp	.+908    	; 0x39e <__bad_interrupt>
      12:	00 00       	nop
      14:	c4 c1       	rjmp	.+904    	; 0x39e <__bad_interrupt>
      16:	00 00       	nop
      18:	c2 c1       	rjmp	.+900    	; 0x39e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c0 c1       	rjmp	.+896    	; 0x39e <__bad_interrupt>
      1e:	00 00       	nop
      20:	be c1       	rjmp	.+892    	; 0x39e <__bad_interrupt>
      22:	00 00       	nop
      24:	bc c1       	rjmp	.+888    	; 0x39e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_10>
      2c:	b8 c1       	rjmp	.+880    	; 0x39e <__bad_interrupt>
      2e:	00 00       	nop
      30:	b6 c1       	rjmp	.+876    	; 0x39e <__bad_interrupt>
      32:	00 00       	nop
      34:	b4 c1       	rjmp	.+872    	; 0x39e <__bad_interrupt>
      36:	00 00       	nop
      38:	b2 c1       	rjmp	.+868    	; 0x39e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b0 c1       	rjmp	.+864    	; 0x39e <__bad_interrupt>
      3e:	00 00       	nop
      40:	ae c1       	rjmp	.+860    	; 0x39e <__bad_interrupt>
      42:	00 00       	nop
      44:	ac c1       	rjmp	.+856    	; 0x39e <__bad_interrupt>
      46:	00 00       	nop
      48:	aa c1       	rjmp	.+852    	; 0x39e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a8 c1       	rjmp	.+848    	; 0x39e <__bad_interrupt>
      4e:	00 00       	nop
      50:	a6 c1       	rjmp	.+844    	; 0x39e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__vector_21>
      58:	a2 c1       	rjmp	.+836    	; 0x39e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a0 c1       	rjmp	.+832    	; 0x39e <__bad_interrupt>
      5e:	00 00       	nop
      60:	9e c1       	rjmp	.+828    	; 0x39e <__bad_interrupt>
      62:	00 00       	nop
      64:	9c c1       	rjmp	.+824    	; 0x39e <__bad_interrupt>
      66:	00 00       	nop
      68:	9a c1       	rjmp	.+820    	; 0x39e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	98 c1       	rjmp	.+816    	; 0x39e <__bad_interrupt>
      6e:	00 00       	nop
      70:	96 c1       	rjmp	.+812    	; 0x39e <__bad_interrupt>
      72:	00 00       	nop
      74:	94 c1       	rjmp	.+808    	; 0x39e <__bad_interrupt>
      76:	00 00       	nop
      78:	92 c1       	rjmp	.+804    	; 0x39e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	90 c1       	rjmp	.+800    	; 0x39e <__bad_interrupt>
      7e:	00 00       	nop
      80:	8e c1       	rjmp	.+796    	; 0x39e <__bad_interrupt>
      82:	00 00       	nop
      84:	8c c1       	rjmp	.+792    	; 0x39e <__bad_interrupt>
      86:	00 00       	nop
      88:	8a c1       	rjmp	.+788    	; 0x39e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	88 c1       	rjmp	.+784    	; 0x39e <__bad_interrupt>
      8e:	00 00       	nop
      90:	86 c1       	rjmp	.+780    	; 0x39e <__bad_interrupt>
      92:	00 00       	nop
      94:	84 c1       	rjmp	.+776    	; 0x39e <__bad_interrupt>
      96:	00 00       	nop
      98:	82 c1       	rjmp	.+772    	; 0x39e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	80 c1       	rjmp	.+768    	; 0x39e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	7e c1       	rjmp	.+764    	; 0x39e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7c c1       	rjmp	.+760    	; 0x39e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7a c1       	rjmp	.+756    	; 0x39e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	6e 08       	sbc	r6, r14
      ae:	d7 08       	sbc	r13, r7
      b0:	a3 09       	sbc	r26, r3
      b2:	09 09       	sbc	r16, r9
      b4:	a3 09       	sbc	r26, r3
      b6:	98 08       	sbc	r9, r8
      b8:	aa 07       	cpc	r26, r26
      ba:	a3 09       	sbc	r26, r3
      bc:	4f 08       	sbc	r4, r15
      be:	bb 08       	sbc	r11, r11
      c0:	56 09       	sbc	r21, r6
      c2:	7d 09       	sbc	r23, r13

000000c4 <__trampolines_end>:
      c4:	04 03       	mulsu	r16, r20
      c6:	09 04       	cpc	r0, r9

000000c8 <usb_user_serial_number>:
      c8:	1c 03 30 00 30 00 30 00 30 00 30 00 30 00 30 00     ..0.0.0.0.0.0.0.
      d8:	30 00 30 00 30 00 30 00 30 00 30 00                 0.0.0.0.0.0.

000000e4 <usb_user_product_string_descriptor>:
      e4:	20 03 54 00 48 00 45 00 20 00 47 00 52 00 55 00      .T.H.E. .G.R.U.
      f4:	42 00 20 00 53 00 57 00 49 00 54 00 43 00 48 00     B. .S.W.I.T.C.H.

00000104 <usb_user_manufacturer_string_descriptor>:
     104:	1a 03 55 00 4e 00 47 00 20 00 53 00 4f 00 46 00     ..U.N.G. .S.O.F.
     114:	54 00 57 00 41 00 52 00 45 00                       T.W.A.R.E.

0000011e <usb_conf_desc>:
     11e:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
     12e:	50 00 07 05 81 02 40 00 00 07 05 02 02 40 00 00     P.....@......@..

0000013e <usb_dev_desc>:
     13e:	12 01 00 02 00 00 00 40 09 12 15 20 00 10 01 02     .......@... ....
     14e:	03 01                                               ..

00000150 <sbc_std_inquiry_data>:
     150:	00 80 03 02 1f 00 00 00                             ........

00000158 <g_sbc_revision_id>:
     158:	37 2e 34 37                                         7.47

0000015c <g_sbc_product_id>:
     15c:	54 48 45 20 47 52 55 42 20 53 57 49 54 43 48 20     THE GRUB SWITCH 

0000016c <g_sbc_vendor_id>:
     16c:	55 4e 47 20 53 4f 46 54                             UNG SOFT

00000174 <bootpins_txt_label_1ofn>:
     174:	31 31 2d 3e 31 3a 20 00                             11->1: .

0000017c <bootpins_txt_label_binary>:
     17c:	42 69 6e 61 72 79 20 70 69 63 6b 3a 20 20 00        Binary pick:  .

0000018b <bootfile_string4>:
     18b:	27 0d 0a 00                                         '...

0000018f <bootfile_string3>:
     18f:	27 0d 0a 67 72 75 62 73 77 69 74 63 68 5f 63 68     '..grubswitch_ch
     19f:	6f 69 63 65 3d 27 00                                oice='.

000001a6 <bootfile_string2>:
     1a6:	27 0d 0a 67 72 75 62 73 77 69 74 63 68 5f 63 68     '..grubswitch_ch
     1b6:	6f 69 63 65 5f 63 6f 6c 6f 72 3d 27 00              oice_color='.

000001c3 <bootfile_string1>:
     1c3:	67 72 75 62 73 77 69 74 63 68 5f 73 6c 65 65 70     grubswitch_sleep
     1d3:	5f 73 65 63 73 3d 27 00                             _secs='.

000001db <dir_table>:
     1db:	42 4f 4f 54 54 48 49 53 20 20 20 08 00 00 80 0a     BOOTTHIS   .....
     1eb:	5a 0b 5a 0b 00 00 80 0a 5a 0b 00 00 00 00 00 00     Z.Z.....Z.......
     1fb:	53 57 49 54 43 48 20 20 47 52 42 23 00 00 c0 0a     SWITCH  GRB#....
     20b:	5a 0b 5a 0b 00 00 c0 0a 5a 0b 03 00 00 00 00 00     Z.Z.....Z.......
     21b:	41 2e 00 65 00 6e 00 74 00 72 00 0f 00 0b 69 00     A..e.n.t.r....i.
     22b:	65 00 73 00 2e 00 74 00 78 00 00 00 74 00 00 00     e.s...t.x...t...
     23b:	45 4e 54 52 49 45 7e 31 54 58 54 26 00 00 a0 0a     ENTRIE~1TXT&....
     24b:	5a 0b 5a 0b 00 00 a0 0a 5a 0b 04 00 00 00 00 00     Z.Z.....Z.......
     25b:	41 2e 00 62 00 6f 00 6f 00 74 00 0f 00 14 70 00     A..b.o.o.t....p.
     26b:	69 00 6e 00 73 00 2e 00 74 00 00 00 78 00 74 00     i.n.s...t...x.t.
     27b:	42 4f 4f 54 50 49 7e 31 54 58 54 27 00 00 80 0a     BOOTPI~1TXT'....
     28b:	5a 0b 5a 0b 00 00 80 0a 5a 0b 05 00 12 00 00 00     Z.Z.....Z.......

0000029b <pt_cluster>:
     29b:	55 aa f8 ff ff 00 f0 ff ff ff ff                    U..........

000002a6 <sector0>:
     2a6:	eb 3c 90 6d 6b 66 73 2e 66 61 74 00 02 02 01 00     .<.mkfs.fat.....
     2b6:	01 10 00 44 00 f8 01 00 20 00 40 00 00 00 00 00     ...D.... .@.....
     2c6:	00 00 00 00 80 00 29 55 19 85 19 42 4f 4f 54 54     ......)U...BOOTT
     2d6:	48 49 53 20 20 20 46 41 54 31 32 20 20 20 0e 1f     HIS   FAT12   ..
     2e6:	be 5b 7c ac 22 c0 74 0b 56 b4 0e bb 07 00 cd 10     .[|.".t.V.......
     2f6:	5e eb f0 32 e4 cd 16 cd 19 eb fe 54 68 69 73 20     ^..2.......This 
     306:	69 73 20 6e 6f 74 20 61 20 62 6f 6f 74 61 62 6c     is not a bootabl
     316:	65 20 64 69 73 6b 2e 20 20 50 6c 65 61 73 65 20     e disk.  Please 
     326:	69 6e 73 65 72 74 20 61 20 62 6f 6f 74 61 62 6c     insert a bootabl
     336:	65 20 66 6c 6f 70 70 79 20 61 6e 64 0d 0a 70 72     e floppy and..pr
     346:	65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f 20 74     ess any key to t
     356:	72 79 20 61 67 61 69 6e 20 2e 2e 2e 20 0d 0a 00     ry again ... ...

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	da e0       	ldi	r29, 0x0A	; 10
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61

00000372 <__low_level_init>:
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	80 e8       	ldi	r24, 0x80	; 128
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     380:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     384:	0f be       	out	0x3f, r0	; 63
#endif
char __low_level_init()
{
  Clear_prescaler();
  return 1;
}
     386:	81 e0       	ldi	r24, 0x01	; 1

00000388 <__do_clear_bss>:
     388:	22 e0       	ldi	r18, 0x02	; 2
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b1 e0       	ldi	r27, 0x01	; 1
     38e:	01 c0       	rjmp	.+2      	; 0x392 <.do_clear_bss_start>

00000390 <.do_clear_bss_loop>:
     390:	1d 92       	st	X+, r1

00000392 <.do_clear_bss_start>:
     392:	a8 31       	cpi	r26, 0x18	; 24
     394:	b2 07       	cpc	r27, r18
     396:	e1 f7       	brne	.-8      	; 0x390 <.do_clear_bss_loop>
     398:	03 d0       	rcall	.+6      	; 0x3a0 <main>
     39a:	0c 94 1f 12 	jmp	0x243e	; 0x243e <_exit>

0000039e <__bad_interrupt>:
     39e:	30 ce       	rjmp	.-928    	; 0x0 <__vectors>

000003a0 <main>:


int main(void)
{
  // watchdog disable
  wdtdrv_disable();
     3a0:	0e 94 34 0b 	call	0x1668	; 0x1668 <wdtdrv_disable>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	80 e8       	ldi	r24, 0x80	; 128
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3b2:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     3b6:	0f be       	out	0x3f, r0	; 63

  // clear timing
  Clear_prescaler();

  // deactive JTAG (twice inside 4 cycles)
  U8 mcucr_buf = (MCUCR | (1 << JTD));
     3b8:	85 b7       	in	r24, 0x35	; 53
     3ba:	80 68       	ori	r24, 0x80	; 128
  MCUCR = mcucr_buf;
     3bc:	85 bf       	out	0x35, r24	; 53
  MCUCR = mcucr_buf;

  // start tasks
  scheduler();
     3be:	85 bf       	out	0x35, r24	; 53

  return 0;
}
     3c0:	2b d2       	rcall	.+1110   	; 0x818 <scheduler>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	08 95       	ret

000003c8 <storage_task_init>:
//! @return none
//!
//!/
void storage_task_init(void)
{
   Led_init();
     3c8:	85 9a       	sbi	0x10, 5	; 16
   Led_off();
     3ca:	8d 98       	cbi	0x11, 5	; 17

   init_aux0_output1();
     3cc:	51 9a       	sbi	0x0a, 1	; 10
     3ce:	59 98       	cbi	0x0b, 1	; 11
   init_aux0_output2();
     3d0:	51 9a       	sbi	0x0a, 1	; 10
     3d2:	59 98       	cbi	0x0b, 1	; 11
   set_wrprot_input_pullup();
     3d4:	86 98       	cbi	0x10, 6	; 16
     3d6:	8e 9a       	sbi	0x11, 6	; 17

   cf_mem_init();    // Init the hw/sw ressources required to drive the DF.
     3d8:	0e 94 47 0b 	call	0x168e	; 0x168e <cf_mem_init>
   Usb_enable_sof_interrupt();
     3dc:	e2 ee       	ldi	r30, 0xE2	; 226
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	84 60       	ori	r24, 0x04	; 4
     3e4:	80 83       	st	Z, r24
     3e6:	08 95       	ret

000003e8 <sof_action>:
//! the USB Start Of Frame interrupt subroutine is executed (1ms)
//! Usefull to manage time delays
//!
void sof_action()
{
   cpt_sof++;
     3e8:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <cpt_sof>
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
     3ee:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <cpt_sof>
     3f2:	08 95       	ret

000003f4 <usb_mass_storage_cbw>:
bit cbw_error;
U8  c;
U8  dummy;

   cbw_error = FALSE;
   Usb_select_endpoint(EP_MS_OUT);           //! check if dCBWSignature is correct
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   if (0x55 != Usb_read_byte())
     3fa:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      { cbw_error = TRUE; } //! 'U'
   if (0x53 != Usb_read_byte())
     3fe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     402:	83 35       	cpi	r24, 0x53	; 83
     404:	29 f4       	brne	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
{
bit cbw_error;
U8  c;
U8  dummy;

   cbw_error = FALSE;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	95 35       	cpi	r25, 0x55	; 85
     40a:	19 f4       	brne	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
   Usb_select_endpoint(EP_MS_OUT);           //! check if dCBWSignature is correct
   if (0x55 != Usb_read_byte())
      { cbw_error = TRUE; } //! 'U'
   if (0x53 != Usb_read_byte())
      { cbw_error = TRUE; } //! 'S'
     410:	81 e0       	ldi	r24, 0x01	; 1
   if (0x42 != Usb_read_byte())
     412:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     416:	92 34       	cpi	r25, 0x42	; 66
     418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
      { cbw_error = TRUE; } //! 'B'
     41a:	81 e0       	ldi	r24, 0x01	; 1
   if (0x43 != Usb_read_byte())
     41c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     420:	93 34       	cpi	r25, 0x43	; 67
     422:	11 f4       	brne	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
      { cbw_error = TRUE; } //! 'C'
   if (cbw_error)
     424:	88 23       	and	r24, r24
     426:	a9 f0       	breq	.+42     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
   {
      Usb_ack_receive_out();
     428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     42c:	8b 7f       	andi	r24, 0xFB	; 251
     42e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     432:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     436:	8f 77       	andi	r24, 0x7F	; 127
     438:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      Usb_select_endpoint(EP_MS_IN);
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      Usb_enable_stall_handshake();
     442:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     446:	80 62       	ori	r24, 0x20	; 32
     448:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      endpoint_status[(EP_MS_IN & MSK_EP_DIR)] = 0x01;
     44c:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <endpoint_status+0x1>
      return;
     450:	08 95       	ret
   }

   dCBWTag[0] = Usb_read_byte();             //! Store CBW Tag to be repeated in CSW
     452:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     456:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
   dCBWTag[1] = Usb_read_byte();
     45a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     45e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_edata+0x1>
   dCBWTag[2] = Usb_read_byte();
     462:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     466:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
   dCBWTag[3] = Usb_read_byte();
     46a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     46e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_edata+0x3>
   
   LSB0(g_scsi_data_remaining) = Usb_read_byte();
     472:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     476:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <g_scsi_data_remaining>
   LSB1(g_scsi_data_remaining) = Usb_read_byte();
     47a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     47e:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <g_scsi_data_remaining+0x1>
   LSB2(g_scsi_data_remaining) = Usb_read_byte();
     482:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     486:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <g_scsi_data_remaining+0x2>
   LSB3(g_scsi_data_remaining) = Usb_read_byte();
     48a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     48e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <g_scsi_data_remaining+0x3>

   if (Usb_read_byte() != 0x00)              //! if (bmCBWFlags.bit7 == 1) {direction = IN}
     492:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     496:	88 23       	and	r24, r24
     498:	21 f0       	breq	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
   {
      Usb_set_ms_data_direction_in();
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <ms_data_direction>
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
   }
   else
   {
      Usb_set_ms_data_direction_out();
     4a2:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <ms_data_direction>
   }

   usb_LUN = Usb_read_byte();
     4a6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4aa:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <usb_LUN>

   if (!ms_multiple_drive)
     4ae:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <ms_multiple_drive>
     4b2:	81 11       	cpse	r24, r1
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
   {
      usb_LUN = 0; // only LUN
     4b6:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <usb_LUN>
   }

   dummy      = Usb_read_byte();                // dummy CBWCBLength read
     4ba:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4be:	e9 ef       	ldi	r30, 0xF9	; 249
     4c0:	f1 e0       	ldi	r31, 0x01	; 1


   for (c=0; c<16; c++)                         // store scsi_command
   {
      g_scsi_command[c] = Usb_read_byte();
     4c2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4c6:	81 93       	st	Z+, r24
   }

   dummy      = Usb_read_byte();                // dummy CBWCBLength read


   for (c=0; c<16; c++)                         // store scsi_command
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	e9 30       	cpi	r30, 0x09	; 9
     4cc:	f8 07       	cpc	r31, r24
     4ce:	c9 f7       	brne	.-14     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
   {
      g_scsi_command[c] = Usb_read_byte();
   }
   Usb_ack_receive_out();
     4d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4d4:	8b 7f       	andi	r24, 0xFB	; 251
     4d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4de:	8f 77       	andi	r24, 0x7F	; 127
     4e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   if (Is_usb_ms_data_direction_in())
     4e4:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ms_data_direction>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
   {
      Usb_select_endpoint(EP_MS_IN);
     4ec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   }

   if (TRUE != scsi_decode_command())
     4f0:	df d4       	rcall	.+2494   	; 0xeb0 <scsi_decode_command>
     4f2:	81 30       	cpi	r24, 0x01	; 1
   {
      U8 ep;
      Usb_enable_stall_handshake();
     4f4:	89 f0       	breq	.+34     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     4f6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     4fa:	80 62       	ori	r24, 0x20	; 32
     4fc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      if (Is_usb_ms_data_direction_in())
     500:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ms_data_direction>
     504:	81 30       	cpi	r24, 0x01	; 1
      {
         ep = (EP_MS_IN & MSK_EP_DIR);
      }else{
         ep = (EP_MS_OUT & MSK_EP_DIR);
     506:	11 f0       	breq	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	e2 e0       	ldi	r30, 0x02	; 2
   {
      U8 ep;
      Usb_enable_stall_handshake();
      if (Is_usb_ms_data_direction_in())
      {
         ep = (EP_MS_IN & MSK_EP_DIR);
     50a:	01 c0       	rjmp	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
      }else{
         ep = (EP_MS_OUT & MSK_EP_DIR);
      }
      endpoint_status[ep] = 0x01;
     50c:	e1 e0       	ldi	r30, 0x01	; 1
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	e3 5f       	subi	r30, 0xF3	; 243
     512:	fd 4f       	sbci	r31, 0xFD	; 253
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 83       	st	Z, r24
     518:	08 95       	ret

0000051a <usb_mass_storage_csw>:
//!
//! @param none
//!
//! @return none
void usb_mass_storage_csw (void)
{
     51a:	cf 93       	push	r28
   Usb_select_endpoint(EP_MS_IN);
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   while (Is_usb_endpoint_stall_requested())
   {
      Usb_select_endpoint(EP_CONTROL);
      if (Is_usb_receive_setup())       { usb_process_request(); }
      Usb_select_endpoint(EP_MS_IN);
     522:	c1 e0       	ldi	r28, 0x01	; 1
//!
//! @return none
void usb_mass_storage_csw (void)
{
   Usb_select_endpoint(EP_MS_IN);
   while (Is_usb_endpoint_stall_requested())
     524:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     528:	85 ff       	sbrs	r24, 5
     52a:	09 c0       	rjmp	.+18     	; 0x53e <usb_mass_storage_csw+0x24>
   {
      Usb_select_endpoint(EP_CONTROL);
     52c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if (Is_usb_receive_setup())       { usb_process_request(); }
     530:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     534:	83 fd       	sbrc	r24, 3
      Usb_select_endpoint(EP_MS_IN);
     536:	f3 d4       	rcall	.+2534   	; 0xf1e <usb_process_request>
     538:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   }

   Usb_select_endpoint(EP_MS_OUT);
     53c:	f3 cf       	rjmp	.-26     	; 0x524 <usb_mass_storage_csw+0xa>
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   while (Is_usb_endpoint_stall_requested())
     544:	c2 e0       	ldi	r28, 0x02	; 2
     546:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     54a:	85 ff       	sbrs	r24, 5
   {
      Usb_select_endpoint(EP_CONTROL);
     54c:	09 c0       	rjmp	.+18     	; 0x560 <usb_mass_storage_csw+0x46>
     54e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if (Is_usb_receive_setup())       { usb_process_request(); }
     552:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     556:	83 fd       	sbrc	r24, 3
      Usb_select_endpoint(EP_MS_OUT);
     558:	e2 d4       	rcall	.+2500   	; 0xf1e <usb_process_request>
     55a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   }


   Usb_select_endpoint(EP_MS_IN);
     55e:	f3 cf       	rjmp	.-26     	; 0x546 <usb_mass_storage_csw+0x2c>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   while(!Is_usb_write_enabled())
     566:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     56a:	85 fd       	sbrc	r24, 5
   {
      if(!Is_usb_endpoint_enabled())   return; // USB Reset
     56c:	05 c0       	rjmp	.+10     	; 0x578 <usb_mass_storage_csw+0x5e>
     56e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     572:	80 fd       	sbrc	r24, 0
     574:	f8 cf       	rjmp	.-16     	; 0x566 <usb_mass_storage_csw+0x4c>
   }
                                                         //! write CSW Signature
   Usb_write_byte(0x55);                                 //! 'U'
     576:	34 c0       	rjmp	.+104    	; 0x5e0 <usb_mass_storage_csw+0xc6>
     578:	85 e5       	ldi	r24, 0x55	; 85
     57a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(0x53);                                 //! 'S'
     57e:	83 e5       	ldi	r24, 0x53	; 83
     580:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(0x42);                                 //! 'B'
     584:	92 e4       	ldi	r25, 0x42	; 66
     586:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(0x53);                                 //! 'S'
     58a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                                                         //! write stored CBW Tag
   Usb_write_byte(dCBWTag[0]);
     58e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     592:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(dCBWTag[1]);
     596:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
     59a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(dCBWTag[2]);
     59e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
     5a2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte(dCBWTag[3]);
     5a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_edata+0x3>
     5aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                                                         //! write data residue value
   Usb_write_byte( LSB0(g_scsi_data_remaining) );
     5ae:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     5b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte( LSB1(g_scsi_data_remaining) );
     5b6:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     5ba:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte( LSB2(g_scsi_data_remaining) );
     5be:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     5c2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_write_byte( LSB3(g_scsi_data_remaining) );
     5c6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     5ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   //! write command status
   Usb_write_byte(g_scsi_status);                        //! 0 -> PASS, 1 -> FAIL
     5ce:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <g_scsi_status>
     5d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   Usb_send_in();
     5d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5da:	8f 77       	andi	r24, 0x7F	; 127
     5dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <storage_task>:
//! @param none
//!
//! @return none
void storage_task(void)
{
   if (Is_device_enumerated())
     5e4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <usb_configuration_nb>
     5e8:	88 23       	and	r24, r24
     5ea:	49 f0       	breq	.+18     	; 0x5fe <storage_task+0x1a>
   {
      Usb_select_endpoint(EP_MS_OUT);
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if (Is_usb_receive_out())
     5f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5f6:	82 ff       	sbrs	r24, 2
      {
         usb_mass_storage_cbw();
         usb_mass_storage_csw();
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <storage_task+0x1a>
     5fa:	fc de       	rcall	.-520    	; 0x3f4 <usb_mass_storage_cbw>
     5fc:	8e cf       	rjmp	.-228    	; 0x51a <usb_mass_storage_csw>
     5fe:	08 95       	ret

00000600 <usb_user_read_request>:
//!
//! @return TRUE,  when the request is processed
//! @return FALSE, if the request is'nt know (STALL handshake is managed by the main standard request function).
//!
Bool usb_user_read_request(U8 type, U8 request)
{
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	00 d0       	rcall	.+0      	; 0x606 <usb_user_read_request+0x6>
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
   U16   wInterface;
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
     60a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   wValue_msb = Usb_read_byte();
     60e:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   //** Specific request from Class MassStorage
   if( USB_SETUP_SET_CLASS_INTER == type )
     612:	81 32       	cpi	r24, 0x21	; 33
     614:	11 f5       	brne	.+68     	; 0x65a <usb_user_read_request+0x5a>
   {
      switch( request )
     616:	6f 3f       	cpi	r22, 0xFF	; 255
     618:	09 f0       	breq	.+2      	; 0x61c <usb_user_read_request+0x1c>
     61a:	53 c0       	rjmp	.+166    	; 0x6c2 <usb_user_read_request+0xc2>
      {
         case SETUP_MASS_STORAGE_RESET:
         // wValue must be 0
         // wIndex = Interface
         if( (0!=wValue_lsb) || (0!=wValue_msb) )
     61c:	21 11       	cpse	r18, r1
     61e:	51 c0       	rjmp	.+162    	; 0x6c2 <usb_user_read_request+0xc2>
     620:	91 11       	cpse	r25, r1
     622:	4f c0       	rjmp	.+158    	; 0x6c2 <usb_user_read_request+0xc2>
            break;
         LSB(wInterface)=Usb_read_byte();
     624:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     628:	89 83       	std	Y+1, r24	; 0x01
         MSB(wInterface)=Usb_read_byte();
     62a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     62e:	8a 83       	std	Y+2, r24	; 0x02
         if( INTERFACE_NB != wInterface )
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	9a 81       	ldd	r25, Y+2	; 0x02
     634:	89 2b       	or	r24, r25
     636:	09 f0       	breq	.+2      	; 0x63a <usb_user_read_request+0x3a>
     638:	44 c0       	rjmp	.+136    	; 0x6c2 <usb_user_read_request+0xc2>
            break;
         Usb_ack_receive_setup();
     63a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     63e:	87 7f       	andi	r24, 0xF7	; 247
     640:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         Usb_send_control_in();
     644:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     648:	8e 7f       	andi	r24, 0xFE	; 254
     64a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         while(!Is_usb_in_ready());
     64e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     652:	80 ff       	sbrs	r24, 0
     654:	fc cf       	rjmp	.-8      	; 0x64e <usb_user_read_request+0x4e>
         return TRUE;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	35 c0       	rjmp	.+106    	; 0x6c4 <usb_user_read_request+0xc4>
         break;
      }
   }
   if( USB_SETUP_GET_CLASS_INTER == type )
     65a:	81 3a       	cpi	r24, 0xA1	; 161
     65c:	91 f5       	brne	.+100    	; 0x6c2 <usb_user_read_request+0xc2>
   {
      switch( request )
     65e:	6e 3f       	cpi	r22, 0xFE	; 254
     660:	81 f5       	brne	.+96     	; 0x6c2 <usb_user_read_request+0xc2>
      {
         case SETUP_MASS_STORAGE_GET_MAX_LUN:
         // wValue must be 0
         // wIndex = Interface
         if( (0!=wValue_lsb) || (0!=wValue_msb) )
     662:	21 11       	cpse	r18, r1
     664:	2e c0       	rjmp	.+92     	; 0x6c2 <usb_user_read_request+0xc2>
     666:	91 11       	cpse	r25, r1
     668:	2c c0       	rjmp	.+88     	; 0x6c2 <usb_user_read_request+0xc2>
            break;
         LSB(wInterface)=Usb_read_byte();
     66a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     66e:	89 83       	std	Y+1, r24	; 0x01
         MSB(wInterface)=Usb_read_byte();
     670:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     674:	8a 83       	std	Y+2, r24	; 0x02
         if( INTERFACE_NB != wInterface )
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	89 2b       	or	r24, r25
     67c:	11 f5       	brne	.+68     	; 0x6c2 <usb_user_read_request+0xc2>
            break;
         Usb_ack_receive_setup();
     67e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     682:	87 7f       	andi	r24, 0xF7	; 247
     684:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         Usb_write_byte( 0 ); // max LUN number is 0 (single device)
     688:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
         Usb_send_control_in();
     68c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     690:	8e 7f       	andi	r24, 0xFE	; 254
     692:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         while(!Is_usb_in_ready());
     696:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     69a:	80 ff       	sbrs	r24, 0
     69c:	fc cf       	rjmp	.-8      	; 0x696 <usb_user_read_request+0x96>
         while( !Is_usb_receive_out() );
     69e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6a2:	82 ff       	sbrs	r24, 2
     6a4:	fc cf       	rjmp	.-8      	; 0x69e <usb_user_read_request+0x9e>
         Usb_ack_receive_out();
     6a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6aa:	8b 7f       	andi	r24, 0xFB	; 251
     6ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6b4:	8f 77       	andi	r24, 0x7F	; 127
     6b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         ms_multiple_drive = 1;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <ms_multiple_drive>
         return TRUE;
     6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <usb_user_read_request+0xc4>
         break;
      }
   }
   
   return FALSE;  // No supported request
     6c2:	80 e0       	ldi	r24, 0x00	; 0
}
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <usb_user_endpoint_init>:
//! @brief This function configures the endpoints
//!
//! @param conf_nb configuration number choosed by USB host
//!
void usb_user_endpoint_init(U8 conf_nb)
{
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
   usb_configure_endpoint(EP_MS_IN,      \
     6d2:	c9 ee       	ldi	r28, 0xE9	; 233
     6d4:	d0 e0       	ldi	r29, 0x00	; 0
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	88 83       	st	Y, r24
     6da:	64 e3       	ldi	r22, 0x34	; 52
     6dc:	81 e8       	ldi	r24, 0x81	; 129
     6de:	a1 d7       	rcall	.+3906   	; 0x1622 <usb_config_ep>
                          TYPE_BULK,     \
                          DIRECTION_IN,  \
                          SIZE_64,       \
                          TWO_BANKS,     \
                          NYET_ENABLED);
   usb_configure_endpoint(EP_MS_OUT,     \
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	88 83       	st	Y, r24
     6e4:	64 e3       	ldi	r22, 0x34	; 52
     6e6:	80 e8       	ldi	r24, 0x80	; 128
                          TYPE_BULK,     \
                          DIRECTION_OUT, \
                          SIZE_64,       \
                          TWO_BANKS,     \
                          NYET_ENABLED);
}
     6e8:	df 91       	pop	r29
                          TYPE_BULK,     \
                          DIRECTION_IN,  \
                          SIZE_64,       \
                          TWO_BANKS,     \
                          NYET_ENABLED);
   usb_configure_endpoint(EP_MS_OUT,     \
     6ea:	cf 91       	pop	r28
     6ec:	9a c7       	rjmp	.+3892   	; 0x1622 <usb_config_ep>

000006ee <usb_user_interface_get>:
//! @return alternate setting configurated
//!
U8   usb_user_interface_get( U16 wInterface )
{
   return 0;  // Only one alternate setting possible for all interface
}
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	08 95       	ret

000006f2 <usb_user_interface_reset>:
//! @param alternate_setting  alternate setting selected
//!
void usb_user_interface_reset(U16 wInterface, U8 alternate_setting)
{  
   // default setting selected = reset data toggle
   if( INTERFACE_NB == wInterface )
     6f2:	89 2b       	or	r24, r25
     6f4:	19 f5       	brne	.+70     	; 0x73c <usb_user_interface_reset+0x4a>
   {
      // Interface Mass Storage
      Usb_select_endpoint(EP_MS_IN);
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      Usb_disable_stall_handshake();
     6fc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     700:	80 61       	ori	r24, 0x10	; 16
     702:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      Usb_reset_endpoint(EP_MS_IN);
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
     70c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
      Usb_reset_data_toggle();
     710:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     714:	88 60       	ori	r24, 0x08	; 8
     716:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      Usb_select_endpoint(EP_MS_OUT);
     71a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      Usb_disable_stall_handshake();
     71e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     722:	80 61       	ori	r24, 0x10	; 16
     724:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      Usb_reset_endpoint(EP_MS_OUT);
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
     72e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
      Usb_reset_data_toggle();
     732:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     736:	88 60       	ori	r24, 0x08	; 8
     738:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     73c:	08 95       	ret

0000073e <usb_user_get_descriptor>:
//!
//! @return FALSE, if the global descriptor no filled
//!
Bool usb_user_get_descriptor(U8 type, U8 string)
{
   switch(type)
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	21 f5       	brne	.+72     	; 0x78a <usb_user_get_descriptor+0x4c>
   {
      case DESCRIPTOR_STRING:
      switch (string)
     742:	61 30       	cpi	r22, 0x01	; 1
     744:	89 f0       	breq	.+34     	; 0x768 <usb_user_get_descriptor+0x2a>
     746:	50 f0       	brcs	.+20     	; 0x75c <usb_user_get_descriptor+0x1e>
     748:	62 30       	cpi	r22, 0x02	; 2
     74a:	a1 f0       	breq	.+40     	; 0x774 <usb_user_get_descriptor+0x36>
     74c:	63 30       	cpi	r22, 0x03	; 3
     74e:	e9 f4       	brne	.+58     	; 0x78a <usb_user_get_descriptor+0x4c>
         return TRUE;
         break;
           
#if (USB_DEVICE_SN_USE==ENABLE)              
         case SN_INDEX:
         data_to_transfer = sizeof (usb_user_serial_number);
     750:	8c e1       	ldi	r24, 0x1C	; 28
     752:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <data_to_transfer>
         pbuffer = &(usb_user_serial_number.bLength);
     756:	88 ec       	ldi	r24, 0xC8	; 200
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	11 c0       	rjmp	.+34     	; 0x77e <usb_user_get_descriptor+0x40>
   {
      case DESCRIPTOR_STRING:
      switch (string)
      {
         case LANG_ID:
         data_to_transfer = sizeof (usb_user_language_id);
     75c:	84 e0       	ldi	r24, 0x04	; 4
     75e:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <data_to_transfer>
         pbuffer = &(usb_user_language_id.bLength);
     762:	84 ec       	ldi	r24, 0xC4	; 196
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0b c0       	rjmp	.+22     	; 0x77e <usb_user_get_descriptor+0x40>
         return TRUE;
         break;
        
         case MAN_INDEX:
         data_to_transfer = sizeof (usb_user_manufacturer_string_descriptor);
     768:	8a e1       	ldi	r24, 0x1A	; 26
     76a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <data_to_transfer>
         pbuffer = &(usb_user_manufacturer_string_descriptor.bLength);
     76e:	84 e0       	ldi	r24, 0x04	; 4
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	05 c0       	rjmp	.+10     	; 0x77e <usb_user_get_descriptor+0x40>
         return TRUE;
         break;
        
         case PROD_INDEX:
         data_to_transfer = sizeof (usb_user_product_string_descriptor);
     774:	80 e2       	ldi	r24, 0x20	; 32
     776:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <data_to_transfer>
         pbuffer = &(usb_user_product_string_descriptor.bLength);
     77a:	84 ee       	ldi	r24, 0xE4	; 228
     77c:	90 e0       	ldi	r25, 0x00	; 0
         break;
           
#if (USB_DEVICE_SN_USE==ENABLE)              
         case SN_INDEX:
         data_to_transfer = sizeof (usb_user_serial_number);
         pbuffer = &(usb_user_serial_number.bLength);
     77e:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <pbuffer+0x1>
     782:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <pbuffer>
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
         f_get_serial_string=TRUE;
         data_to_transfer += (SN_LENGTH*4);
#endif
         return TRUE;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	08 95       	ret
         break;
#endif
      }
      break;
   }
   return FALSE;
     78a:	80 e0       	ldi	r24, 0x00	; 0
}
     78c:	08 95       	ret

0000078e <mem_test_unit_ready>:
{
   if (lun == 0)
      return (U8 code*)lun_name;

   return 0;   // Remove compiler warning
}
     78e:	81 11       	cpse	r24, r1
     790:	01 c0       	rjmp	.+2      	; 0x794 <mem_test_unit_ready+0x6>
     792:	7e c7       	rjmp	.+3836   	; 0x1690 <cf_test_unit_ready>
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	08 95       	ret

0000079a <mem_read_capacity>:
     79a:	81 11       	cpse	r24, r1
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <mem_read_capacity+0x8>
     79e:	cb 01       	movw	r24, r22
     7a0:	80 c7       	rjmp	.+3840   	; 0x16a2 <cf_read_capacity>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	08 95       	ret

000007a8 <mem_wr_protect>:
     7a8:	81 11       	cpse	r24, r1
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <mem_wr_protect+0x6>
     7ac:	84 c7       	rjmp	.+3848   	; 0x16b6 <cf_wr_protect>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	08 95       	ret

000007b2 <memory_2_usb>:
//!   It is ready    ->    CTRL_GOOD
//!   A error occur  ->    CTRL_FAIL
//!   Memory unplug  ->    CTRL_NO_PRESENT
//!
Ctrl_status    memory_2_usb( U8 lun , U32 addr , U16 nb_sector )
{
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	6a 01       	movw	r12, r20
     7bc:	7b 01       	movw	r14, r22
   Ctrl_status status=CTRL_FAIL;

   if (lun == 0)
     7be:	81 11       	cpse	r24, r1
     7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <memory_2_usb+0x20>
      status = cf_read_10(addr , nb_sector);
     7c2:	a9 01       	movw	r20, r18
     7c4:	c7 01       	movw	r24, r14
     7c6:	b6 01       	movw	r22, r12

   return   status;
}
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
Ctrl_status    memory_2_usb( U8 lun , U32 addr , U16 nb_sector )
{
   Ctrl_status status=CTRL_FAIL;

   if (lun == 0)
      status = cf_read_10(addr , nb_sector);
     7ce:	cf 90       	pop	r12

   return   status;
}
     7d0:	79 c7       	rjmp	.+3826   	; 0x16c4 <cf_read_10>
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	08 95       	ret

000007e0 <usb_2_memory>:
//!   It is ready    ->    CTRL_GOOD
//!   A error occur  ->    CTRL_FAIL
//!   Memory unplug  ->    CTRL_NO_PRESENT
//!
Ctrl_status    usb_2_memory( U8 lun , U32 addr , U16 nb_sector )
{
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	6a 01       	movw	r12, r20
     7ea:	7b 01       	movw	r14, r22
   Ctrl_status status=CTRL_FAIL;

   if (lun == 0)
     7ec:	81 11       	cpse	r24, r1
     7ee:	08 c0       	rjmp	.+16     	; 0x800 <usb_2_memory+0x20>
      status = cf_write_10(addr , nb_sector);
     7f0:	a9 01       	movw	r20, r18
     7f2:	c7 01       	movw	r24, r14
     7f4:	b6 01       	movw	r22, r12

   return   status;
}
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	df 90       	pop	r13
Ctrl_status    usb_2_memory( U8 lun , U32 addr , U16 nb_sector )
{
   Ctrl_status status=CTRL_FAIL;

   if (lun == 0)
      status = cf_write_10(addr , nb_sector);
     7fc:	cf 90       	pop	r12

   return   status;
}
     7fe:	6b c7       	rjmp	.+3798   	; 0x16d6 <cf_write_10>
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	08 95       	ret

0000080e <scheduler_init>:
   #ifdef Scheduler_task_1_init
      Scheduler_task_1_init();  
      Scheduler_call_next_init();
   #endif
   #ifdef Scheduler_task_2_init
      Scheduler_task_2_init();  
     80e:	2f d6       	rcall	.+3166   	; 0x146e <usb_task_init>
     810:	db cd       	rjmp	.-1098   	; 0x3c8 <storage_task_init>

00000812 <scheduler_tasks>:
      #ifdef Scheduler_task_1
         Scheduler_task_1();
         Scheduler_call_next_task();
      #endif
      #ifdef Scheduler_task_2
         Scheduler_task_2();
     812:	33 d6       	rcall	.+3174   	; 0x147a <usb_task>
     814:	e7 de       	rcall	.-562    	; 0x5e4 <storage_task>
     816:	fd cf       	rjmp	.-6      	; 0x812 <scheduler_tasks>

00000818 <scheduler>:
//! @param  :none
//! @return :none
void scheduler (void)
{
   scheduler_init();
   scheduler_tasks();
     818:	fa df       	rcall	.-12     	; 0x80e <scheduler_init>
     81a:	fb df       	rcall	.-10     	; 0x812 <scheduler_tasks>

0000081c <send_informational_exceptions_page>:
 */
Bool sbc_prevent_allow_medium_removal(void)
{
   sbc_lun_status_is_good();
   return TRUE;
}
     81c:	e1 ef       	ldi	r30, 0xF1	; 241
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	8c e1       	ldi	r24, 0x1C	; 28
     822:	80 83       	st	Z, r24
     824:	8a e0       	ldi	r24, 0x0A	; 10
     826:	80 83       	st	Z, r24
     828:	10 82       	st	Z, r1
     82a:	85 e0       	ldi	r24, 0x05	; 5
     82c:	80 83       	st	Z, r24
     82e:	10 82       	st	Z, r1
     830:	10 82       	st	Z, r1
     832:	10 82       	st	Z, r1
     834:	10 82       	st	Z, r1
     836:	10 82       	st	Z, r1
     838:	10 82       	st	Z, r1
     83a:	10 82       	st	Z, r1
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 83       	st	Z, r24
     840:	08 95       	ret

00000842 <sbc_header_mode_sense>:
     842:	cf 93       	push	r28
     844:	c8 2f       	mov	r28, r24
     846:	81 11       	cpse	r24, r1
     848:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     84c:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     850:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     854:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <usb_LUN>
     858:	a7 df       	rcall	.-178    	; 0x7a8 <mem_wr_protect>
     85a:	88 23       	and	r24, r24
     85c:	21 f0       	breq	.+8      	; 0x866 <sbc_header_mode_sense+0x24>
     85e:	80 e8       	ldi	r24, 0x80	; 128
     860:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     864:	02 c0       	rjmp	.+4      	; 0x86a <sbc_header_mode_sense+0x28>
     866:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     86a:	cc 23       	and	r28, r28
     86c:	31 f0       	breq	.+12     	; 0x87a <sbc_header_mode_sense+0x38>
     86e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     872:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     876:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     87a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <send_read_write_error_recovery_page>:
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     888:	9a e0       	ldi	r25, 0x0A	; 10
     88a:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     88e:	90 e8       	ldi	r25, 0x80	; 128
     890:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     894:	23 e0       	ldi	r18, 0x03	; 3
     896:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     89a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     89e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8a2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8a6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8aa:	8d 30       	cpi	r24, 0x0D	; 13
     8ac:	40 f0       	brcs	.+16     	; 0x8be <send_read_write_error_recovery_page+0x3c>
     8ae:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8b2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8b6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8ba:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8be:	08 95       	ret

000008c0 <sbc_lun_status_is_good>:
     8c0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <g_scsi_status>
     8c4:	ea e0       	ldi	r30, 0x0A	; 10
     8c6:	f2 e0       	ldi	r31, 0x02	; 2
     8c8:	10 82       	st	Z, r1
     8ca:	11 82       	std	Z+1, r1	; 0x01
     8cc:	12 82       	std	Z+2, r1	; 0x02
     8ce:	08 95       	ret

000008d0 <sbc_request_sense>:
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	62 97       	sbiw	r28, 0x12	; 18
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <g_scsi_command+0x4>
     8ec:	83 31       	cpi	r24, 0x13	; 19
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <sbc_request_sense+0x22>
     8f0:	82 e1       	ldi	r24, 0x12	; 18
     8f2:	90 e7       	ldi	r25, 0x70	; 112
     8f4:	99 83       	std	Y+1, r25	; 0x01
     8f6:	1a 82       	std	Y+2, r1	; 0x02
     8f8:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <g_scsi_sense>
     8fc:	9b 83       	std	Y+3, r25	; 0x03
     8fe:	1c 82       	std	Y+4, r1	; 0x04
     900:	1d 82       	std	Y+5, r1	; 0x05
     902:	1e 82       	std	Y+6, r1	; 0x06
     904:	1f 82       	std	Y+7, r1	; 0x07
     906:	9a e0       	ldi	r25, 0x0A	; 10
     908:	98 87       	std	Y+8, r25	; 0x08
     90a:	19 86       	std	Y+9, r1	; 0x09
     90c:	1a 86       	std	Y+10, r1	; 0x0a
     90e:	1b 86       	std	Y+11, r1	; 0x0b
     910:	1c 86       	std	Y+12, r1	; 0x0c
     912:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <g_scsi_sense+0x1>
     916:	9d 87       	std	Y+13, r25	; 0x0d
     918:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <g_scsi_sense+0x2>
     91c:	9e 87       	std	Y+14, r25	; 0x0e
     91e:	1f 86       	std	Y+15, r1	; 0x0f
     920:	18 8a       	std	Y+16, r1	; 0x10
     922:	19 8a       	std	Y+17, r1	; 0x11
     924:	1a 8a       	std	Y+18, r1	; 0x12
     926:	9e 01       	movw	r18, r28
     928:	2f 5f       	subi	r18, 0xFF	; 255
     92a:	3f 4f       	sbci	r19, 0xFF	; 255
     92c:	f9 01       	movw	r30, r18
     92e:	9e 2f       	mov	r25, r30
     930:	92 1b       	sub	r25, r18
     932:	98 17       	cp	r25, r24
     934:	20 f4       	brcc	.+8      	; 0x93e <sbc_request_sense+0x6e>
     936:	91 91       	ld	r25, Z+
     938:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     93c:	f8 cf       	rjmp	.-16     	; 0x92e <sbc_request_sense+0x5e>
     93e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     942:	9f 77       	andi	r25, 0x7F	; 127
     944:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     948:	40 91 f5 01 	lds	r20, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     94c:	50 91 f6 01 	lds	r21, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     950:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     954:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     958:	8a 01       	movw	r16, r20
     95a:	9b 01       	movw	r18, r22
     95c:	08 1b       	sub	r16, r24
     95e:	11 09       	sbc	r17, r1
     960:	21 09       	sbc	r18, r1
     962:	31 09       	sbc	r19, r1
     964:	00 93 f5 01 	sts	0x01F5, r16	; 0x8001f5 <g_scsi_data_remaining>
     968:	10 93 f6 01 	sts	0x01F6, r17	; 0x8001f6 <g_scsi_data_remaining+0x1>
     96c:	20 93 f7 01 	sts	0x01F7, r18	; 0x8001f7 <g_scsi_data_remaining+0x2>
     970:	30 93 f8 01 	sts	0x01F8, r19	; 0x8001f8 <g_scsi_data_remaining+0x3>
     974:	a5 df       	rcall	.-182    	; 0x8c0 <sbc_lun_status_is_good>
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	62 96       	adiw	r28, 0x12	; 18
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	08 95       	ret

0000098e <sbc_lun_status_is_not_present>:

//! This fonction send the UFI status "lun not present"
//!
void sbc_lun_status_is_not_present(void)
{
   Sbc_send_failed();
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_NOT_READY, SBC_ASC_MEDIUM_NOT_PRESENT, 0x00);
     994:	ea e0       	ldi	r30, 0x0A	; 10
     996:	f2 e0       	ldi	r31, 0x02	; 2
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	80 83       	st	Z, r24
     99c:	8a e3       	ldi	r24, 0x3A	; 58
     99e:	81 83       	std	Z+1, r24	; 0x01
     9a0:	12 82       	std	Z+2, r1	; 0x02
     9a2:	08 95       	ret

000009a4 <sbc_lun_status_is_busy_or_change>:

//! This fonction send the UFI status busy and change
//!
void sbc_lun_status_is_busy_or_change(void)
{
   Sbc_send_failed();
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_UNIT_ATTENTION, SBC_ASC_NOT_READY_TO_READY_CHANGE, 0x00 );
     9aa:	ea e0       	ldi	r30, 0x0A	; 10
     9ac:	f2 e0       	ldi	r31, 0x02	; 2
     9ae:	86 e0       	ldi	r24, 0x06	; 6
     9b0:	80 83       	st	Z, r24
     9b2:	88 e2       	ldi	r24, 0x28	; 40
     9b4:	81 83       	std	Z+1, r24	; 0x01
     9b6:	12 82       	std	Z+2, r1	; 0x02
     9b8:	08 95       	ret

000009ba <sbc_lun_status_is_fail>:

//! This fonction send the UFI status FAIL
//!
void sbc_lun_status_is_fail(void)
{
   Sbc_send_failed();
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_HARDWARE_ERROR, SBC_ASC_NO_ADDITIONAL_SENSE_INFORMATION, 0x00);
     9c0:	ea e0       	ldi	r30, 0x0A	; 10
     9c2:	f2 e0       	ldi	r31, 0x02	; 2
     9c4:	84 e0       	ldi	r24, 0x04	; 4
     9c6:	80 83       	st	Z, r24
     9c8:	11 82       	std	Z+1, r1	; 0x01
     9ca:	12 82       	std	Z+2, r1	; 0x02
     9cc:	08 95       	ret

000009ce <sbc_test_unit_ready>:
}


Bool sbc_test_unit_ready(void)
{
   switch ( mem_test_unit_ready(usb_LUN) )
     9ce:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <usb_LUN>
     9d2:	dd de       	rcall	.-582    	; 0x78e <mem_test_unit_ready>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	91 05       	cpc	r25, r1
     9d8:	39 f0       	breq	.+14     	; 0x9e8 <sbc_test_unit_ready+0x1a>
     9da:	83 30       	cpi	r24, 0x03	; 3
     9dc:	91 05       	cpc	r25, r1
     9de:	31 f0       	breq	.+12     	; 0x9ec <sbc_test_unit_ready+0x1e>
     9e0:	89 2b       	or	r24, r25
   {
      case CTRL_GOOD :
      sbc_lun_status_is_good();
     9e2:	31 f4       	brne	.+12     	; 0x9f0 <sbc_test_unit_ready+0x22>
      case CTRL_NO_PRESENT :
      sbc_lun_status_is_not_present();
      break;

      case CTRL_BUSY :
      sbc_lun_status_is_busy_or_change();
     9e4:	6d df       	rcall	.-294    	; 0x8c0 <sbc_lun_status_is_good>
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <sbc_test_unit_ready+0x24>
      break;
     9e8:	d2 df       	rcall	.-92     	; 0x98e <sbc_lun_status_is_not_present>

      case CTRL_FAIL :
      default :
      sbc_lun_status_is_fail();
     9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <sbc_test_unit_ready+0x24>
     9ec:	db df       	rcall	.-74     	; 0x9a4 <sbc_lun_status_is_busy_or_change>
      break;
   }
   return TRUE;
}
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <sbc_test_unit_ready+0x24>
     9f0:	e4 df       	rcall	.-56     	; 0x9ba <sbc_lun_status_is_fail>
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	08 95       	ret

000009f6 <sbc_read_capacity>:


Bool sbc_read_capacity (void)
{
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <sbc_read_capacity+0x6>
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <sbc_read_capacity+0x8>
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
   U32 mem_size_nb_sector;

   switch ( mem_read_capacity( usb_LUN, &mem_size_nb_sector ) )
     a02:	be 01       	movw	r22, r28
     a04:	6f 5f       	subi	r22, 0xFF	; 255
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <usb_LUN>
     a0c:	c6 de       	rcall	.-628    	; 0x79a <mem_read_capacity>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	91 05       	cpc	r25, r1
     a12:	a9 f1       	breq	.+106    	; 0xa7e <sbc_read_capacity+0x88>
     a14:	83 30       	cpi	r24, 0x03	; 3
     a16:	91 05       	cpc	r25, r1
     a18:	a1 f1       	breq	.+104    	; 0xa82 <sbc_read_capacity+0x8c>
     a1a:	89 2b       	or	r24, r25
     a1c:	a1 f5       	brne	.+104    	; 0xa86 <sbc_read_capacity+0x90>
   {
      case CTRL_GOOD :
      Usb_write_byte(MSB0(mem_size_nb_sector));    // return nb block
     a1e:	8c 81       	ldd	r24, Y+4	; 0x04
     a20:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte(MSB1(mem_size_nb_sector));
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
     a26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte(MSB2(mem_size_nb_sector));
     a2a:	8a 81       	ldd	r24, Y+2	; 0x02
     a2c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte(MSB3(mem_size_nb_sector));
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte( 0               );           // return block size (= 512B)
     a36:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte( 0               );
     a3a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte( (U8)(512 >> 8)  );
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_write_byte( (U8)(512 & 0xFF));
     a44:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

      Sbc_valid_write_usb(SBC_READ_CAPACITY_LENGTH);
     a48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a4c:	8f 77       	andi	r24, 0x7F	; 127
     a4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a52:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     a56:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     a5a:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     a5e:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     a62:	08 97       	sbiw	r24, 0x08	; 8
     a64:	a1 09       	sbc	r26, r1
     a66:	b1 09       	sbc	r27, r1
     a68:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <g_scsi_data_remaining>
     a6c:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <g_scsi_data_remaining+0x1>
     a70:	a0 93 f7 01 	sts	0x01F7, r26	; 0x8001f7 <g_scsi_data_remaining+0x2>
     a74:	b0 93 f8 01 	sts	0x01F8, r27	; 0x8001f8 <g_scsi_data_remaining+0x3>
      sbc_lun_status_is_good();
      return TRUE;
      break;

      case CTRL_NO_PRESENT :
      sbc_lun_status_is_not_present();
     a78:	23 df       	rcall	.-442    	; 0x8c0 <sbc_lun_status_is_good>
      break;

      case CTRL_BUSY :
      sbc_lun_status_is_busy_or_change();
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	06 c0       	rjmp	.+12     	; 0xa8a <sbc_read_capacity+0x94>
     a7e:	87 df       	rcall	.-242    	; 0x98e <sbc_lun_status_is_not_present>
      break;

      case CTRL_FAIL :
      default :
      sbc_lun_status_is_fail();
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <sbc_read_capacity+0x92>
     a82:	90 df       	rcall	.-224    	; 0x9a4 <sbc_lun_status_is_busy_or_change>
      break;
   }
   return FALSE;
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <sbc_read_capacity+0x92>
}
     a86:	99 df       	rcall	.-206    	; 0x9ba <sbc_lun_status_is_fail>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <sbc_lun_status_is_protected>:

//! This fonction send the UFI status FAIL because write protection
//!
void sbc_lun_status_is_protected(void)
{
   Sbc_send_failed();
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_DATA_PROTECT, SBC_ASC_WRITE_PROTECTED, 0x00);
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	f2 e0       	ldi	r31, 0x02	; 2
     aa2:	87 e0       	ldi	r24, 0x07	; 7
     aa4:	80 83       	st	Z, r24
     aa6:	87 e2       	ldi	r24, 0x27	; 39
     aa8:	81 83       	std	Z+1, r24	; 0x01
     aaa:	12 82       	std	Z+2, r1	; 0x02
     aac:	08 95       	ret

00000aae <sbc_lun_status_is_cdb_field>:

//! This fonction send the UFI status FAIL because CDB field is invalid
//!
void sbc_lun_status_is_cdb_field(void)
{
   Sbc_send_failed();
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <g_scsi_status>
   Sbc_build_sense(SBC_SENSE_KEY_ILLEGAL_REQUEST, SBC_ASC_INVALID_FIELD_IN_CDB, 0x00);
     ab4:	ea e0       	ldi	r30, 0x0A	; 10
     ab6:	f2 e0       	ldi	r31, 0x02	; 2
     ab8:	85 e0       	ldi	r24, 0x05	; 5
     aba:	80 83       	st	Z, r24
     abc:	84 e2       	ldi	r24, 0x24	; 36
     abe:	81 83       	std	Z+1, r24	; 0x01
     ac0:	12 82       	std	Z+2, r1	; 0x02
     ac2:	08 95       	ret

00000ac4 <sbc_inquiry>:
 * @return  FALSE: result KO,
 *          TRUE:  result OK
 *
 */
Bool sbc_inquiry (void)
{
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
   PGM_VOID_P ptr;
#else
   U8 code *ptr;
#endif

   if( (0 != (g_scsi_command[1] & 0x03) )       // CMDT and EPVD bits are 0
     ac8:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <g_scsi_command+0x1>
     acc:	83 70       	andi	r24, 0x03	; 3
     ace:	21 f4       	brne	.+8      	; 0xad8 <sbc_inquiry+0x14>
   ||  (0 !=  g_scsi_command[2]         ) )     // PAGE or OPERATION CODE fields = 0x00?
     ad0:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <g_scsi_command+0x2>
     ad4:	88 23       	and	r24, r24
   {  
      // (CMDT=EVPD <> 0) or (PAGE CODE <> 0x00)
      // No standard inquiry asked
      sbc_lun_status_is_cdb_field();
     ad6:	19 f0       	breq	.+6      	; 0xade <sbc_inquiry+0x1a>
      return FALSE;
     ad8:	ea df       	rcall	.-44     	; 0xaae <sbc_lun_status_is_cdb_field>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	40 c0       	rjmp	.+128    	; 0xb5e <__stack+0x5f>
     ade:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <g_scsi_command+0x4>
     ae2:	91 36       	cpi	r25, 0x61	; 97
     ae4:	08 f0       	brcs	.+2      	; 0xae8 <sbc_inquiry+0x24>
   {
      allocation_length = SBC_MAX_INQUIRY_DATA;
   }

   // send first inquiry data (0 to 8)
   ptr = (code U8*) &sbc_std_inquiry_data;
     ae6:	90 e6       	ldi	r25, 0x60	; 96
     ae8:	20 e5       	ldi	r18, 0x50	; 80

   for ( i=0 ; ((i != 36) && (allocation_length > i)); i++)
     aea:	31 e0       	ldi	r19, 0x01	; 1
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	89 17       	cp	r24, r25
   {
      if( 8 == i )
     af0:	c9 f0       	breq	.+50     	; 0xb24 <__stack+0x25>
     af2:	88 30       	cpi	r24, 0x08	; 8
      {  // send vendor id (8 to 16)
           ptr = (code U8 *) &g_sbc_vendor_id;
      }
      if( 16 == i )
     af4:	29 f0       	breq	.+10     	; 0xb00 <__stack+0x1>
     af6:	80 31       	cpi	r24, 0x10	; 16
      {  // send product id (16 to 32)
         ptr = (code U8 *) &g_sbc_product_id;
      }
      if( 32 == i )
     af8:	31 f0       	breq	.+12     	; 0xb06 <__stack+0x7>
     afa:	80 32       	cpi	r24, 0x20	; 32
     afc:	31 f4       	brne	.+12     	; 0xb0a <__stack+0xb>

   for ( i=0 ; ((i != 36) && (allocation_length > i)); i++)
   {
      if( 8 == i )
      {  // send vendor id (8 to 16)
           ptr = (code U8 *) &g_sbc_vendor_id;
     afe:	07 c0       	rjmp	.+14     	; 0xb0e <__stack+0xf>
     b00:	2c e6       	ldi	r18, 0x6C	; 108
     b02:	31 e0       	ldi	r19, 0x01	; 1
      }
      if( 16 == i )
      {  // send product id (16 to 32)
         ptr = (code U8 *) &g_sbc_product_id;
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <__stack+0xb>
     b06:	2c e5       	ldi	r18, 0x5C	; 92

   for ( i=0 ; ((i != 36) && (allocation_length > i)); i++)
   {
      if( 8 == i )
      {  // send vendor id (8 to 16)
           ptr = (code U8 *) &g_sbc_vendor_id;
     b08:	31 e0       	ldi	r19, 0x01	; 1
     b0a:	f9 01       	movw	r30, r18
      {  // send product id (16 to 32)
         ptr = (code U8 *) &g_sbc_product_id;
      }
      if( 32 == i )
      {  // send revision id (32 to 36)
         ptr = (code U8 *) &g_sbc_revision_id;
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <__stack+0x13>
     b0e:	e8 e5       	ldi	r30, 0x58	; 88
      }
#ifndef __GNUC__
      Usb_write_byte((U8)(*ptr++));
#else    // AVRGCC does not support point to PGM space
//warning with AVRGCC assumes devices descriptors are stored in the lower 64Kbytes of on-chip flash memory
      Usb_write_byte(pgm_read_byte_near((unsigned int)ptr++));
     b10:	f1 e0       	ldi	r31, 0x01	; 1
     b12:	9f 01       	movw	r18, r30
     b14:	2f 5f       	subi	r18, 0xFF	; 255
     b16:	3f 4f       	sbci	r19, 0xFF	; 255
     b18:	e4 91       	lpm	r30, Z
     b1a:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   }

   // send first inquiry data (0 to 8)
   ptr = (code U8*) &sbc_std_inquiry_data;

   for ( i=0 ; ((i != 36) && (allocation_length > i)); i++)
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	84 32       	cpi	r24, 0x24	; 36
//warning with AVRGCC assumes devices descriptors are stored in the lower 64Kbytes of on-chip flash memory
      Usb_write_byte(pgm_read_byte_near((unsigned int)ptr++));
#endif

   }
   Sbc_valid_write_usb(i);
     b22:	29 f7       	brne	.-54     	; 0xaee <sbc_inquiry+0x2a>
     b24:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b28:	9f 77       	andi	r25, 0x7F	; 127
     b2a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b2e:	40 91 f5 01 	lds	r20, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     b32:	50 91 f6 01 	lds	r21, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     b36:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     b3a:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     b3e:	8a 01       	movw	r16, r20
     b40:	9b 01       	movw	r18, r22
     b42:	08 1b       	sub	r16, r24
     b44:	11 09       	sbc	r17, r1
     b46:	21 09       	sbc	r18, r1
     b48:	31 09       	sbc	r19, r1
     b4a:	00 93 f5 01 	sts	0x01F5, r16	; 0x8001f5 <g_scsi_data_remaining>
     b4e:	10 93 f6 01 	sts	0x01F6, r17	; 0x8001f6 <g_scsi_data_remaining+0x1>
     b52:	20 93 f7 01 	sts	0x01F7, r18	; 0x8001f7 <g_scsi_data_remaining+0x2>
   sbc_lun_status_is_good();
     b56:	30 93 f8 01 	sts	0x01F8, r19	; 0x8001f8 <g_scsi_data_remaining+0x3>
     b5a:	b2 de       	rcall	.-668    	; 0x8c0 <sbc_lun_status_is_good>
   return TRUE;      
}
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <sbc_read_10>:
   return FALSE;
}


Bool sbc_read_10 (void)
{
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <sbc_read_10+0x8>
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <sbc_read_10+0xa>
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <sbc_read_10+0xc>
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
   U32   mass_addr;                       // rd or wr block address
   U16   mass_size;                       // rd or write nb of blocks

   MSB0(mass_addr) = g_scsi_command[2];   // read address
     b74:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <g_scsi_command+0x2>
     b78:	8c 83       	std	Y+4, r24	; 0x04
   MSB1(mass_addr) = g_scsi_command[3];
     b7a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <g_scsi_command+0x3>
     b7e:	8b 83       	std	Y+3, r24	; 0x03
   MSB2(mass_addr) = g_scsi_command[4];
     b80:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <g_scsi_command+0x4>
     b84:	8a 83       	std	Y+2, r24	; 0x02
   MSB3(mass_addr) = g_scsi_command[5];
     b86:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <g_scsi_command+0x5>
     b8a:	89 83       	std	Y+1, r24	; 0x01

   MSB(mass_size) = g_scsi_command[7];    // read size
     b8c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <g_scsi_command+0x7>
     b90:	8e 83       	std	Y+6, r24	; 0x06
   LSB(mass_size) = g_scsi_command[8];
     b92:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <g_scsi_command+0x8>
     b96:	8d 83       	std	Y+5, r24	; 0x05
   
   if( Is_usb_ms_data_direction_out() )
     b98:	10 91 f2 01 	lds	r17, 0x01F2	; 0x8001f2 <ms_data_direction>
     b9c:	11 11       	cpse	r17, r1
   {
      sbc_lun_status_is_cdb_field();
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <sbc_read_10+0x40>
      return FALSE;
     ba0:	86 df       	rcall	.-244    	; 0xaae <sbc_lun_status_is_cdb_field>
   }
   if( 0 == g_scsi_data_remaining )
     ba2:	56 c0       	rjmp	.+172    	; 0xc50 <sbc_read_10+0xec>
     ba4:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     ba8:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     bac:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     bb0:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	a1 05       	cpc	r26, r1
     bb8:	b1 05       	cpc	r27, r1
   {
      if( mass_size == (g_scsi_data_remaining/512) )
     bba:	41 f4       	brne	.+16     	; 0xbcc <sbc_read_10+0x68>
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
      {
         sbc_lun_status_is_good();
     bc0:	89 2b       	or	r24, r25
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <sbc_read_10+0x64>
      }else{
         sbc_lun_status_is_cdb_field();
     bc4:	7d de       	rcall	.-774    	; 0x8c0 <sbc_lun_status_is_good>
     bc6:	3c c0       	rjmp	.+120    	; 0xc40 <sbc_read_10+0xdc>
     bc8:	72 df       	rcall	.-284    	; 0xaae <sbc_lun_status_is_cdb_field>
      }
      return TRUE;
   }

   switch ( memory_2_usb( usb_LUN , mass_addr,  g_scsi_data_remaining/512 ) )
     bca:	3a c0       	rjmp	.+116    	; 0xc40 <sbc_read_10+0xdc>
     bcc:	39 e0       	ldi	r19, 0x09	; 9
     bce:	b6 95       	lsr	r27
     bd0:	a7 95       	ror	r26
     bd2:	97 95       	ror	r25
     bd4:	87 95       	ror	r24
     bd6:	3a 95       	dec	r19
     bd8:	d1 f7       	brne	.-12     	; 0xbce <sbc_read_10+0x6a>
     bda:	49 81       	ldd	r20, Y+1	; 0x01
     bdc:	5a 81       	ldd	r21, Y+2	; 0x02
     bde:	6b 81       	ldd	r22, Y+3	; 0x03
     be0:	7c 81       	ldd	r23, Y+4	; 0x04
     be2:	9c 01       	movw	r18, r24
     be4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <usb_LUN>
     be8:	e4 dd       	rcall	.-1080   	; 0x7b2 <memory_2_usb>
     bea:	82 30       	cpi	r24, 0x02	; 2
     bec:	91 05       	cpc	r25, r1
     bee:	51 f1       	breq	.+84     	; 0xc44 <sbc_read_10+0xe0>
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	91 05       	cpc	r25, r1
     bf4:	49 f1       	breq	.+82     	; 0xc48 <sbc_read_10+0xe4>
     bf6:	89 2b       	or	r24, r25
   {
      case CTRL_GOOD :
      if( mass_size == (g_scsi_data_remaining/512) )
     bf8:	49 f5       	brne	.+82     	; 0xc4c <sbc_read_10+0xe8>
     bfa:	4d 81       	ldd	r20, Y+5	; 0x05
     bfc:	5e 81       	ldd	r21, Y+6	; 0x06
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     c06:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     c0a:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     c0e:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     c12:	29 e0       	ldi	r18, 0x09	; 9
     c14:	b6 95       	lsr	r27
     c16:	a7 95       	ror	r26
     c18:	97 95       	ror	r25
     c1a:	87 95       	ror	r24
     c1c:	2a 95       	dec	r18
     c1e:	d1 f7       	brne	.-12     	; 0xc14 <sbc_read_10+0xb0>
     c20:	48 17       	cp	r20, r24
     c22:	59 07       	cpc	r21, r25
      {
         sbc_lun_status_is_good();
     c24:	6a 07       	cpc	r22, r26
     c26:	7b 07       	cpc	r23, r27
     c28:	11 f4       	brne	.+4      	; 0xc2e <sbc_read_10+0xca>
      }else{
         sbc_lun_status_is_cdb_field();
     c2a:	4a de       	rcall	.-876    	; 0x8c0 <sbc_lun_status_is_good>
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <sbc_read_10+0xcc>
      }
      g_scsi_data_remaining = 0;
     c2e:	3f df       	rcall	.-386    	; 0xaae <sbc_lun_status_is_cdb_field>
     c30:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <g_scsi_data_remaining>
     c34:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <g_scsi_data_remaining+0x1>
      default :
      sbc_lun_status_is_fail();
      return FALSE;
      break;
   }
   return TRUE;
     c38:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <g_scsi_data_remaining+0x2>
      }
      g_scsi_data_remaining = 0;
      break;

      case CTRL_NO_PRESENT :
      sbc_lun_status_is_not_present();
     c3c:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <g_scsi_data_remaining+0x3>
      return FALSE;
      break;

      case CTRL_BUSY :
      sbc_lun_status_is_busy_or_change();
     c40:	11 e0       	ldi	r17, 0x01	; 1
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <sbc_read_10+0xec>
     c44:	a4 de       	rcall	.-696    	; 0x98e <sbc_lun_status_is_not_present>
      return FALSE;
      break;

      case CTRL_FAIL :
      default :
      sbc_lun_status_is_fail();
     c46:	03 c0       	rjmp	.+6      	; 0xc4e <sbc_read_10+0xea>
     c48:	ad de       	rcall	.-678    	; 0x9a4 <sbc_lun_status_is_busy_or_change>
      return FALSE;
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <sbc_read_10+0xea>
      break;
   }
   return TRUE;
}
     c4c:	b6 de       	rcall	.-660    	; 0x9ba <sbc_lun_status_is_fail>
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	81 2f       	mov	r24, r17
     c52:	26 96       	adiw	r28, 0x06	; 6
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	08 95       	ret

00000c66 <sbc_write_10>:


Bool sbc_write_10 (void)
{
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <sbc_write_10+0x6>
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <sbc_write_10+0x8>
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <sbc_write_10+0xa>
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
   U32   mass_addr;                       // rd or wr block address
   U16   mass_size;                       // rd or write nb of blocks

   MSB0(mass_addr) = g_scsi_command[2];   // read address
     c74:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <g_scsi_command+0x2>
     c78:	8c 83       	std	Y+4, r24	; 0x04
   MSB1(mass_addr) = g_scsi_command[3];
     c7a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <g_scsi_command+0x3>
     c7e:	8b 83       	std	Y+3, r24	; 0x03
   MSB2(mass_addr) = g_scsi_command[4];
     c80:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <g_scsi_command+0x4>
     c84:	8a 83       	std	Y+2, r24	; 0x02
   MSB3(mass_addr) = g_scsi_command[5];
     c86:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <g_scsi_command+0x5>
     c8a:	89 83       	std	Y+1, r24	; 0x01

   MSB(mass_size) = g_scsi_command[7];    // read size
     c8c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <g_scsi_command+0x7>
     c90:	8e 83       	std	Y+6, r24	; 0x06
   LSB(mass_size) = g_scsi_command[8];
     c92:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <g_scsi_command+0x8>
     c96:	8d 83       	std	Y+5, r24	; 0x05
   
   if( Is_usb_ms_data_direction_in() )
     c98:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ms_data_direction>
     c9c:	81 30       	cpi	r24, 0x01	; 1
   {
      sbc_lun_status_is_cdb_field();
     c9e:	11 f4       	brne	.+4      	; 0xca4 <sbc_write_10+0x3e>
     ca0:	06 df       	rcall	.-500    	; 0xaae <sbc_lun_status_is_cdb_field>
      return FALSE;
   }

   if( 0 == g_scsi_data_remaining )
     ca2:	64 c0       	rjmp	.+200    	; 0xd6c <sbc_write_10+0x106>
     ca4:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     ca8:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     cac:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     cb0:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     cb4:	89 2b       	or	r24, r25
     cb6:	8a 2b       	or	r24, r26
     cb8:	8b 2b       	or	r24, r27
   {
      if( mass_size == (g_scsi_data_remaining/512) )
     cba:	49 f4       	brne	.+18     	; 0xcce <sbc_write_10+0x68>
     cbc:	8d 81       	ldd	r24, Y+5	; 0x05
     cbe:	9e 81       	ldd	r25, Y+6	; 0x06
      {
         sbc_lun_status_is_good();
     cc0:	89 2b       	or	r24, r25
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <sbc_write_10+0x62>
      }else{
         sbc_lun_status_is_cdb_field();
     cc4:	fd dd       	rcall	.-1030   	; 0x8c0 <sbc_lun_status_is_good>
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <sbc_write_10+0x64>
      }
      return TRUE;
     cc8:	f2 de       	rcall	.-540    	; 0xaae <sbc_lun_status_is_cdb_field>
   }
   
   if( TRUE == mem_wr_protect( usb_LUN ) )
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	50 c0       	rjmp	.+160    	; 0xd6e <sbc_write_10+0x108>
     cce:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <usb_LUN>
     cd2:	6a dd       	rcall	.-1324   	; 0x7a8 <mem_wr_protect>
   {
      sbc_lun_status_is_protected();
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	11 f4       	brne	.+4      	; 0xcdc <sbc_write_10+0x76>
     cd8:	df de       	rcall	.-578    	; 0xa98 <sbc_lun_status_is_protected>
      return FALSE;
   }

   switch (usb_2_memory( usb_LUN , mass_addr, g_scsi_data_remaining/512 ))
     cda:	48 c0       	rjmp	.+144    	; 0xd6c <sbc_write_10+0x106>
     cdc:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     ce0:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     ce4:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     ce8:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     cec:	39 e0       	ldi	r19, 0x09	; 9
     cee:	b6 95       	lsr	r27
     cf0:	a7 95       	ror	r26
     cf2:	97 95       	ror	r25
     cf4:	87 95       	ror	r24
     cf6:	3a 95       	dec	r19
     cf8:	d1 f7       	brne	.-12     	; 0xcee <sbc_write_10+0x88>
     cfa:	49 81       	ldd	r20, Y+1	; 0x01
     cfc:	5a 81       	ldd	r21, Y+2	; 0x02
     cfe:	6b 81       	ldd	r22, Y+3	; 0x03
     d00:	7c 81       	ldd	r23, Y+4	; 0x04
     d02:	9c 01       	movw	r18, r24
     d04:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <usb_LUN>
     d08:	6b dd       	rcall	.-1322   	; 0x7e0 <usb_2_memory>
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	91 05       	cpc	r25, r1
     d0e:	49 f1       	breq	.+82     	; 0xd62 <sbc_write_10+0xfc>
     d10:	83 30       	cpi	r24, 0x03	; 3
     d12:	91 05       	cpc	r25, r1
     d14:	41 f1       	breq	.+80     	; 0xd66 <sbc_write_10+0x100>
     d16:	89 2b       	or	r24, r25
   {
      case CTRL_GOOD :
      if( mass_size == (g_scsi_data_remaining/512) )
     d18:	41 f5       	brne	.+80     	; 0xd6a <sbc_write_10+0x104>
     d1a:	4d 81       	ldd	r20, Y+5	; 0x05
     d1c:	5e 81       	ldd	r21, Y+6	; 0x06
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     d26:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     d2a:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     d2e:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     d32:	29 e0       	ldi	r18, 0x09	; 9
     d34:	b6 95       	lsr	r27
     d36:	a7 95       	ror	r26
     d38:	97 95       	ror	r25
     d3a:	87 95       	ror	r24
     d3c:	2a 95       	dec	r18
     d3e:	d1 f7       	brne	.-12     	; 0xd34 <sbc_write_10+0xce>
     d40:	48 17       	cp	r20, r24
     d42:	59 07       	cpc	r21, r25
      {
         sbc_lun_status_is_good();
     d44:	6a 07       	cpc	r22, r26
     d46:	7b 07       	cpc	r23, r27
     d48:	11 f4       	brne	.+4      	; 0xd4e <sbc_write_10+0xe8>
      }else{
         sbc_lun_status_is_cdb_field();
     d4a:	ba dd       	rcall	.-1164   	; 0x8c0 <sbc_lun_status_is_good>
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <sbc_write_10+0xea>
      }
      g_scsi_data_remaining = 0;
     d4e:	af de       	rcall	.-674    	; 0xaae <sbc_lun_status_is_cdb_field>
     d50:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <g_scsi_data_remaining>
     d54:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <g_scsi_data_remaining+0x1>
     d58:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <g_scsi_data_remaining+0x2>
      break;

      case CTRL_NO_PRESENT :
      sbc_lun_status_is_not_present();
     d5c:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <g_scsi_data_remaining+0x3>
      return FALSE;
      break;

      case CTRL_BUSY :
      sbc_lun_status_is_busy_or_change();
     d60:	b4 cf       	rjmp	.-152    	; 0xcca <sbc_write_10+0x64>
     d62:	15 de       	rcall	.-982    	; 0x98e <sbc_lun_status_is_not_present>
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <sbc_write_10+0x106>
      return FALSE;
      break;

      case CTRL_FAIL :
      default :
      sbc_lun_status_is_fail();
     d66:	1e de       	rcall	.-964    	; 0x9a4 <sbc_lun_status_is_busy_or_change>
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <sbc_write_10+0x106>
      return FALSE;
     d6a:	27 de       	rcall	.-946    	; 0x9ba <sbc_lun_status_is_fail>
      break;
   }
   return TRUE;
}
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	26 96       	adiw	r28, 0x06	; 6
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <sbc_mode_sense>:
 * @return  FALSE: result KO,
 *          TRUE:  result OK
 *
 */
Bool sbc_mode_sense( Bool b_sense_10 )
{
     d80:	cf 93       	push	r28
   U8 allocation_length;

   if( b_sense_10 )
     d82:	88 23       	and	r24, r24
     d84:	19 f0       	breq	.+6      	; 0xd8c <sbc_mode_sense+0xc>
      allocation_length = g_scsi_command[8];
     d86:	c0 91 01 02 	lds	r28, 0x0201	; 0x800201 <g_scsi_command+0x8>
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <sbc_mode_sense+0x10>
   else
      allocation_length = g_scsi_command[4];
     d8c:	c0 91 fd 01 	lds	r28, 0x01FD	; 0x8001fd <g_scsi_command+0x4>

   // switch for page code
   switch ( g_scsi_command[2] & SBC_MSK_PAGE_CODE )
     d90:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <g_scsi_command+0x2>
     d94:	9f 73       	andi	r25, 0x3F	; 63
     d96:	9c 31       	cpi	r25, 0x1C	; 28
     d98:	51 f0       	breq	.+20     	; 0xdae <sbc_mode_sense+0x2e>
     d9a:	9f 33       	cpi	r25, 0x3F	; 63
     d9c:	e1 f0       	breq	.+56     	; 0xdd6 <sbc_mode_sense+0x56>
     d9e:	91 30       	cpi	r25, 0x01	; 1
     da0:	09 f0       	breq	.+2      	; 0xda4 <sbc_mode_sense+0x24>
     da2:	82 c0       	rjmp	.+260    	; 0xea8 <sbc_mode_sense+0x128>
      send_informational_exceptions_page();
      Sbc_valid_write_usb(SBC_MODE_DATA_LENGTH_INFORMATIONAL_EXCEPTIONS + 1);
      break;

      case SBC_PAGE_CODE_READ_WRITE_ERROR_RECOVERY:
      sbc_header_mode_sense( b_sense_10 , SBC_MODE_DATA_LENGTH_READ_WRITE_ERROR_RECOVERY );
     da4:	6f e0       	ldi	r22, 0x0F	; 15
      send_read_write_error_recovery_page(allocation_length);
     da6:	4d dd       	rcall	.-1382   	; 0x842 <sbc_header_mode_sense>

   // switch for page code
   switch ( g_scsi_command[2] & SBC_MSK_PAGE_CODE )
   {
      case SBC_PAGE_CODE_INFORMATIONAL_EXCEPTIONS:
      sbc_header_mode_sense( b_sense_10 , SBC_MODE_DATA_LENGTH_INFORMATIONAL_EXCEPTIONS );
     da8:	8c 2f       	mov	r24, r28
     daa:	6b dd       	rcall	.-1322   	; 0x882 <send_read_write_error_recovery_page>
      send_informational_exceptions_page();
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <sbc_mode_sense+0x34>
     dae:	6f e0       	ldi	r22, 0x0F	; 15
      break;

      case SBC_PAGE_CODE_READ_WRITE_ERROR_RECOVERY:
      sbc_header_mode_sense( b_sense_10 , SBC_MODE_DATA_LENGTH_READ_WRITE_ERROR_RECOVERY );
      send_read_write_error_recovery_page(allocation_length);
      Sbc_valid_write_usb(SBC_MODE_DATA_LENGTH_READ_WRITE_ERROR_RECOVERY + 1);
     db0:	48 dd       	rcall	.-1392   	; 0x842 <sbc_header_mode_sense>
     db2:	34 dd       	rcall	.-1432   	; 0x81c <send_informational_exceptions_page>
     db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     db8:	8f 77       	andi	r24, 0x7F	; 127
     dba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dbe:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     dc2:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     dc6:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     dca:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     dce:	40 97       	sbiw	r24, 0x10	; 16
     dd0:	a1 09       	sbc	r26, r1
      break;

      case SBC_PAGE_CODE_ALL:
      if( b_sense_10 ) {
     dd2:	b1 09       	sbc	r27, r1
     dd4:	4c c0       	rjmp	.+152    	; 0xe6e <sbc_mode_sense+0xee>
         sbc_header_mode_sense( b_sense_10 , (allocation_length < (SBC_MODE_DATA_LENGTH_CODE_ALL+2))? (allocation_length-2) : SBC_MODE_DATA_LENGTH_CODE_ALL );
     dd6:	88 23       	and	r24, r24
     dd8:	d1 f0       	breq	.+52     	; 0xe0e <sbc_mode_sense+0x8e>
     dda:	cd 31       	cpi	r28, 0x1D	; 29
     ddc:	18 f4       	brcc	.+6      	; 0xde4 <sbc_mode_sense+0x64>
     dde:	6e ef       	ldi	r22, 0xFE	; 254
     de0:	6c 0f       	add	r22, r28
      }else{
         sbc_header_mode_sense( b_sense_10 , (allocation_length < (SBC_MODE_DATA_LENGTH_CODE_ALL+1))? (allocation_length-1) : SBC_MODE_DATA_LENGTH_CODE_ALL );
      }
      if( b_sense_10 )
      {
         if (allocation_length == 8)
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <sbc_mode_sense+0x66>
     de4:	6b e1       	ldi	r22, 0x1B	; 27
         {
            Sbc_valid_write_usb(8);
     de6:	2d dd       	rcall	.-1446   	; 0x842 <sbc_header_mode_sense>
     de8:	c8 30       	cpi	r28, 0x08	; 8
     dea:	61 f5       	brne	.+88     	; 0xe44 <sbc_mode_sense+0xc4>
     dec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     df0:	8f 77       	andi	r24, 0x7F	; 127
     df2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     df6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     dfa:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     dfe:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     e02:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     e06:	08 97       	sbiw	r24, 0x08	; 8

      case SBC_PAGE_CODE_ALL:
      if( b_sense_10 ) {
         sbc_header_mode_sense( b_sense_10 , (allocation_length < (SBC_MODE_DATA_LENGTH_CODE_ALL+2))? (allocation_length-2) : SBC_MODE_DATA_LENGTH_CODE_ALL );
      }else{
         sbc_header_mode_sense( b_sense_10 , (allocation_length < (SBC_MODE_DATA_LENGTH_CODE_ALL+1))? (allocation_length-1) : SBC_MODE_DATA_LENGTH_CODE_ALL );
     e08:	a1 09       	sbc	r26, r1
     e0a:	b1 09       	sbc	r27, r1
     e0c:	30 c0       	rjmp	.+96     	; 0xe6e <sbc_mode_sense+0xee>
     e0e:	cc 31       	cpi	r28, 0x1C	; 28
     e10:	18 f4       	brcc	.+6      	; 0xe18 <sbc_mode_sense+0x98>
     e12:	6f ef       	ldi	r22, 0xFF	; 255
     e14:	6c 0f       	add	r22, r28
            break;
         }
      }
      else
      {
         if (allocation_length == 4)
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <sbc_mode_sense+0x9a>
     e18:	6b e1       	ldi	r22, 0x1B	; 27
         {
            Sbc_valid_write_usb(4);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	12 dd       	rcall	.-1500   	; 0x842 <sbc_header_mode_sense>
     e1e:	c4 30       	cpi	r28, 0x04	; 4
     e20:	89 f4       	brne	.+34     	; 0xe44 <sbc_mode_sense+0xc4>
     e22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e26:	8f 77       	andi	r24, 0x7F	; 127
     e28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e2c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     e30:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     e34:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
            break;
         }
      }
      // send page by ascending order code
      send_read_write_error_recovery_page(allocation_length);  // 12 bytes
     e38:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     e3c:	04 97       	sbiw	r24, 0x04	; 4
      if (allocation_length > 12)
     e3e:	a1 09       	sbc	r26, r1
     e40:	b1 09       	sbc	r27, r1
      {
         send_informational_exceptions_page();                 // 12 bytes
     e42:	15 c0       	rjmp	.+42     	; 0xe6e <sbc_mode_sense+0xee>
     e44:	8c 2f       	mov	r24, r28
         Sbc_valid_write_usb(SBC_MODE_DATA_LENGTH_CODE_ALL + 1);
     e46:	1d dd       	rcall	.-1478   	; 0x882 <send_read_write_error_recovery_page>
     e48:	cd 30       	cpi	r28, 0x0D	; 13
     e4a:	e0 f0       	brcs	.+56     	; 0xe84 <sbc_mode_sense+0x104>
     e4c:	e7 dc       	rcall	.-1586   	; 0x81c <send_informational_exceptions_page>
     e4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e52:	8f 77       	andi	r24, 0x7F	; 127
     e54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e58:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     e5c:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     e60:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     e64:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
     e68:	4c 97       	sbiw	r24, 0x1c	; 28
     e6a:	a1 09       	sbc	r26, r1
     e6c:	b1 09       	sbc	r27, r1
     e6e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <g_scsi_data_remaining>
     e72:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <g_scsi_data_remaining+0x1>
      default:
      sbc_lun_status_is_cdb_field();
      return FALSE;
      break;
   }
   sbc_lun_status_is_good();
     e76:	a0 93 f7 01 	sts	0x01F7, r26	; 0x8001f7 <g_scsi_data_remaining+0x2>
   return TRUE;
     e7a:	b0 93 f8 01 	sts	0x01F8, r27	; 0x8001f8 <g_scsi_data_remaining+0x3>
         send_informational_exceptions_page();                 // 12 bytes
         Sbc_valid_write_usb(SBC_MODE_DATA_LENGTH_CODE_ALL + 1);
      }
      else
      {
         Sbc_valid_write_usb(allocation_length);
     e7e:	20 dd       	rcall	.-1472   	; 0x8c0 <sbc_lun_status_is_good>
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	14 c0       	rjmp	.+40     	; 0xeac <sbc_mode_sense+0x12c>
     e84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e88:	8f 77       	andi	r24, 0x7F	; 127
     e8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e8e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <g_scsi_data_remaining>
     e92:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <g_scsi_data_remaining+0x1>
     e96:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <g_scsi_data_remaining+0x2>
     e9a:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <g_scsi_data_remaining+0x3>
      }
      break;

      default:
      sbc_lun_status_is_cdb_field();
     e9e:	8c 1b       	sub	r24, r28
     ea0:	91 09       	sbc	r25, r1
      return FALSE;
     ea2:	a1 09       	sbc	r26, r1
      break;
   }
   sbc_lun_status_is_good();
   return TRUE;
}
     ea4:	b1 09       	sbc	r27, r1
     ea6:	e3 cf       	rjmp	.-58     	; 0xe6e <sbc_mode_sense+0xee>
     ea8:	02 de       	rcall	.-1020   	; 0xaae <sbc_lun_status_is_cdb_field>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <scsi_decode_command>:
 */
Bool scsi_decode_command(void)
{
   Bool status;

   if (g_scsi_command[0] == SBC_CMD_WRITE_10)
     eb0:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <g_scsi_command>
     eb4:	8a 32       	cpi	r24, 0x2A	; 42
   {
      Scsi_start_write_action();
      status = sbc_write_10();
     eb6:	09 f4       	brne	.+2      	; 0xeba <scsi_decode_command+0xa>
      Scsi_stop_write_action();
      return status;
   }
   if (g_scsi_command[0] == SBC_CMD_READ_10 )
     eb8:	d6 ce       	rjmp	.-596    	; 0xc66 <sbc_write_10>
   {
      Scsi_start_read_action();
      status = sbc_read_10();
     eba:	88 32       	cpi	r24, 0x28	; 40
     ebc:	09 f4       	brne	.+2      	; 0xec0 <scsi_decode_command+0x10>
      Scsi_stop_read_action();
      return status;
   }

   switch (g_scsi_command[0])
     ebe:	52 ce       	rjmp	.-860    	; 0xb64 <sbc_read_10>
     ec0:	8b 31       	cpi	r24, 0x1B	; 27
     ec2:	e9 f0       	breq	.+58     	; 0xefe <scsi_decode_command+0x4e>
     ec4:	60 f4       	brcc	.+24     	; 0xede <scsi_decode_command+0x2e>
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	b1 f0       	breq	.+44     	; 0xef6 <scsi_decode_command+0x46>
     eca:	18 f4       	brcc	.+6      	; 0xed2 <scsi_decode_command+0x22>
      case SBC_CMD_INQUIRY:                     // 0x12 - Mandatory
      return sbc_inquiry();
      break;

      case SBC_CMD_TEST_UNIT_READY:             // 0x00 - Mandatory
      return sbc_test_unit_ready();
     ecc:	81 11       	cpse	r24, r1
     ece:	1a c0       	rjmp	.+52     	; 0xf04 <scsi_decode_command+0x54>
      status = sbc_read_10();
      Scsi_stop_read_action();
      return status;
   }

   switch (g_scsi_command[0])
     ed0:	7e cd       	rjmp	.-1284   	; 0x9ce <sbc_test_unit_ready>
     ed2:	82 31       	cpi	r24, 0x12	; 18
     ed4:	89 f0       	breq	.+34     	; 0xef8 <scsi_decode_command+0x48>
     ed6:	8a 31       	cpi	r24, 0x1A	; 26
      case SBC_CMD_READ_CAPACITY:               // 0x25 - Mandatory
      return sbc_read_capacity();
      break;

      case SBC_CMD_MODE_SENSE_6:                // 0x1A - Optional
      return sbc_mode_sense( FALSE );
     ed8:	a9 f4       	brne	.+42     	; 0xf04 <scsi_decode_command+0x54>
     eda:	80 e0       	ldi	r24, 0x00	; 0
      status = sbc_read_10();
      Scsi_stop_read_action();
      return status;
   }

   switch (g_scsi_command[0])
     edc:	0f c0       	rjmp	.+30     	; 0xefc <scsi_decode_command+0x4c>
     ede:	85 32       	cpi	r24, 0x25	; 37
     ee0:	61 f0       	breq	.+24     	; 0xefa <scsi_decode_command+0x4a>
     ee2:	18 f4       	brcc	.+6      	; 0xeea <scsi_decode_command+0x3a>
     ee4:	8e 31       	cpi	r24, 0x1E	; 30
     ee6:	59 f0       	breq	.+22     	; 0xefe <scsi_decode_command+0x4e>
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <scsi_decode_command+0x54>
     eea:	8f 32       	cpi	r24, 0x2F	; 47
      case SBC_CMD_REQUEST_SENSE:               // 0x03 - Mandatory
      return sbc_request_sense();
      break;

      case SBC_CMD_INQUIRY:                     // 0x12 - Mandatory
      return sbc_inquiry();
     eec:	41 f0       	breq	.+16     	; 0xefe <scsi_decode_command+0x4e>
     eee:	8a 35       	cpi	r24, 0x5A	; 90
      case SBC_CMD_TEST_UNIT_READY:             // 0x00 - Mandatory
      return sbc_test_unit_ready();
      break;

      case SBC_CMD_READ_CAPACITY:               // 0x25 - Mandatory
      return sbc_read_capacity();
     ef0:	49 f4       	brne	.+18     	; 0xf04 <scsi_decode_command+0x54>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
      case SBC_CMD_VERIFY_10:                   // 0x2F - Optional
      sbc_lun_status_is_good();
      break;

      case SBC_CMD_MODE_SENSE_10:               // 0x5A - Optional
      return sbc_mode_sense( TRUE );
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <scsi_decode_command+0x4c>
     ef6:	ec cc       	rjmp	.-1576   	; 0x8d0 <sbc_request_sense>
      break;

      case SBC_CMD_START_STOP_UNIT:             // 0x1B - Optional but ignored because this command is used by the Linux 2.4 kernel,
      sbc_lun_status_is_good();                 // for which we can not reply INVALID COMMAND, otherwise the disk will not mount.
     ef8:	e5 cd       	rjmp	.-1078   	; 0xac4 <sbc_inquiry>
     efa:	7d cd       	rjmp	.-1286   	; 0x9f6 <sbc_read_capacity>
      Sbc_send_failed();
      Sbc_build_sense(SBC_SENSE_KEY_ILLEGAL_REQUEST, SBC_ASC_INVALID_COMMAND_OPERATION_CODE, 0x00);
      return FALSE;
      break;
   }
   return TRUE;
     efc:	41 cf       	rjmp	.-382    	; 0xd80 <sbc_mode_sense>
      return sbc_mode_sense( TRUE );
      break;

      case SBC_CMD_START_STOP_UNIT:             // 0x1B - Optional but ignored because this command is used by the Linux 2.4 kernel,
      sbc_lun_status_is_good();                 // for which we can not reply INVALID COMMAND, otherwise the disk will not mount.
      break;                                    
     efe:	e0 dc       	rcall	.-1600   	; 0x8c0 <sbc_lun_status_is_good>
      case SBC_CMD_WRITE_BUFFER:                // 0x3B - Optional
      case SBC_CMD_RESERVE_10:                  // 0x56 - Mandatory
      case SBC_CMD_RELEASE_10:                  // 0x57 - Mandatory - see chapter 7.16 - SPC 2
      default:
      // Command not supported
      Sbc_send_failed();
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	08 95       	ret
     f04:	81 e0       	ldi	r24, 0x01	; 1
      Sbc_build_sense(SBC_SENSE_KEY_ILLEGAL_REQUEST, SBC_ASC_INVALID_COMMAND_OPERATION_CODE, 0x00);
     f06:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <g_scsi_status>
     f0a:	85 e0       	ldi	r24, 0x05	; 5
     f0c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <g_scsi_sense>
     f10:	80 e2       	ldi	r24, 0x20	; 32
     f12:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <g_scsi_sense+0x1>
      return FALSE;
     f16:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <g_scsi_sense+0x2>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	08 95       	ret

00000f1e <usb_process_request>:
//! @brief This function reads the SETUP request sent to the default control endpoint
//! and calls the appropriate function. When exiting of the usb_read_request
//! function, the device is ready to manage the next request.
//!
void usb_process_request(void)
{
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	00 d0       	rcall	.+0      	; 0xf28 <usb_process_request+0xa>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
   U8 bmRequestType;
   U8 bmRequest;

   Usb_ack_control_out();
     f2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f30:	8b 7f       	andi	r24, 0xFB	; 251
     f32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   bmRequestType = Usb_read_byte();
     f36:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   bmRequest     = Usb_read_byte();
     f3a:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   switch (bmRequest)
     f3e:	80 2f       	mov	r24, r16
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	8c 30       	cpi	r24, 0x0C	; 12
     f44:	91 05       	cpc	r25, r1
     f46:	08 f0       	brcs	.+2      	; 0xf4a <usb_process_request+0x2c>
     f48:	fe c1       	rjmp	.+1020   	; 0x1346 <usb_process_request+0x428>
     f4a:	fc 01       	movw	r30, r24
     f4c:	ea 5a       	subi	r30, 0xAA	; 170
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__tablejump2__>
   {
      case SETUP_GET_DESCRIPTOR:
      if (USB_SETUP_GET_STAND_DEVICE == bmRequestType)
     f54:	10 38       	cpi	r17, 0x80	; 128
     f56:	09 f0       	breq	.+2      	; 0xf5a <usb_process_request+0x3c>
     f58:	f6 c1       	rjmp	.+1004   	; 0x1346 <usb_process_request+0x428>
   U16  sn_index=0;
   U8   initial_data_to_transfer;
#endif
    
   zlp             = FALSE;                  /* no zero length packet */
   string_type     = Usb_read_byte();        /* read LSB of wValue    */
     f5a:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   descriptor_type = Usb_read_byte();        /* read MSB of wValue    */
     f5e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   switch (descriptor_type)
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	41 f0       	breq	.+16     	; 0xf76 <usb_process_request+0x58>
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	81 f4       	brne	.+32     	; 0xf8a <usb_process_request+0x6c>
      data_to_transfer = Usb_get_dev_desc_length(); //!< sizeof (usb_user_device_descriptor);
      pbuffer          = Usb_get_dev_desc_pointer();
      break;
      
      case DESCRIPTOR_CONFIGURATION:
      data_to_transfer = Usb_get_conf_desc_length(); //!< sizeof (usb_user_configuration_descriptor);
     f6a:	80 e2       	ldi	r24, 0x20	; 32
     f6c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <data_to_transfer>
      pbuffer          = Usb_get_conf_desc_pointer();
     f70:	8e e1       	ldi	r24, 0x1E	; 30
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <usb_process_request+0x62>
   descriptor_type = Usb_read_byte();        /* read MSB of wValue    */

   switch (descriptor_type)
   {
      case DESCRIPTOR_DEVICE:
      data_to_transfer = Usb_get_dev_desc_length(); //!< sizeof (usb_user_device_descriptor);
     f76:	82 e1       	ldi	r24, 0x12	; 18
     f78:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <data_to_transfer>
      pbuffer          = Usb_get_dev_desc_pointer();
     f7c:	8e e3       	ldi	r24, 0x3E	; 62
     f7e:	91 e0       	ldi	r25, 0x01	; 1
      break;
      
      case DESCRIPTOR_CONFIGURATION:
      data_to_transfer = Usb_get_conf_desc_length(); //!< sizeof (usb_user_configuration_descriptor);
      pbuffer          = Usb_get_conf_desc_pointer();
     f80:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <pbuffer+0x1>
     f84:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <pbuffer>
      break;
      
      default:
      if( !usb_user_get_descriptor(descriptor_type, string_type))
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <usb_process_request+0x74>
     f8a:	d9 db       	rcall	.-2126   	; 0x73e <usb_user_get_descriptor>
     f8c:	88 23       	and	r24, r24
     f8e:	09 f4       	brne	.+2      	; 0xf92 <usb_process_request+0x74>
         return FALSE;  // Unknow descriptor then stall request
      break;
   }

   dummy = Usb_read_byte();                     //!< don't care of wIndex field
     f90:	da c1       	rjmp	.+948    	; 0x1346 <usb_process_request+0x428>
     f92:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   dummy = Usb_read_byte();
     f96:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   LSB(wLength) = Usb_read_byte();              //!< read wLength
     f9a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   MSB(wLength) = Usb_read_byte();
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_ack_receive_setup() ;                  //!< clear the receive setup flag
     fa4:	8a 83       	std	Y+2, r24	; 0x02
     fa6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     faa:	87 7f       	andi	r24, 0xF7	; 247
     fac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   if (wLength > data_to_transfer)
     fb0:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <data_to_transfer>
     fb4:	29 81       	ldd	r18, Y+1	; 0x01
     fb6:	3a 81       	ldd	r19, Y+2	; 0x02
     fb8:	48 2f       	mov	r20, r24
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	42 17       	cp	r20, r18
     fbe:	53 07       	cpc	r21, r19
   {
      if ((data_to_transfer % EP_CONTROL_LENGTH) == 0) { zlp = TRUE; }
     fc0:	20 f4       	brcc	.+8      	; 0xfca <usb_process_request+0xac>
     fc2:	8f 73       	andi	r24, 0x3F	; 63
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	21 f0       	breq	.+8      	; 0xfd0 <usb_process_request+0xb2>
      else { zlp = FALSE; }                   //!< no need of zero length packet
   }
   else
   {
      data_to_transfer = (U8)wLength;         //!< send only requested number of data
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <usb_process_request+0xb0>
     fca:	20 93 15 02 	sts	0x0215, r18	; 0x800215 <data_to_transfer>
   }

   Usb_ack_nak_out();
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      
      if (Is_usb_nak_out_sent())
         break;
      if (Is_usb_vbus_low())
         break;
      Usb_send_control_in();
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    
   byte_to_send=0;
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
     fda:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <data_to_transfer>
     fde:	81 11       	cpse	r24, r1
   
#if (USE_DEVICE_SN_UNIQUE==ENABLE)      
   f_get_serial_string=FALSE;                                                   //end of signature transmission    
#endif   

   if((zlp == TRUE) && (!Is_usb_nak_out_sent()))
     fe0:	04 c0       	rjmp	.+8      	; 0xfea <usb_process_request+0xcc>
     fe2:	91 30       	cpi	r25, 0x01	; 1
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <usb_process_request+0xca>
     fe6:	4e c0       	rjmp	.+156    	; 0x1084 <usb_process_request+0x166>
    
   byte_to_send=0;
#if (USE_DEVICE_SN_UNIQUE==ENABLE)
   initial_data_to_transfer = data_to_transfer;
#endif
   while((data_to_transfer != 0) && (!Is_usb_nak_out_sent()))
     fe8:	37 c0       	rjmp	.+110    	; 0x1058 <usb_process_request+0x13a>
     fea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fee:	84 fd       	sbrc	r24, 4
   {
      while(!Is_usb_read_control_enabled())
     ff0:	f8 cf       	rjmp	.-16     	; 0xfe2 <usb_process_request+0xc4>
     ff2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ff6:	80 fd       	sbrc	r24, 0
      {
         if (Is_usb_nak_out_sent())
     ff8:	08 c0       	rjmp	.+16     	; 0x100a <usb_process_request+0xec>
     ffa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ffe:	84 fd       	sbrc	r24, 4
            break;    // don't clear the flag now, it will be cleared after
         if (Is_usb_vbus_low())
    1000:	04 c0       	rjmp	.+8      	; 0x100a <usb_process_request+0xec>
    1002:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1006:	80 fd       	sbrc	r24, 0
    1008:	f4 cf       	rjmp	.-24     	; 0xff2 <usb_process_request+0xd4>
            break;          
      }
              
      nb_byte=0;
      while(data_to_transfer != 0)        //!< Send data until necessary
    100a:	81 e4       	ldi	r24, 0x41	; 65
    100c:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <data_to_transfer>
    1010:	22 23       	and	r18, r18
    1012:	b1 f0       	breq	.+44     	; 0x1040 <usb_process_request+0x122>
      {
         if(nb_byte++==EP_CONTROL_LENGTH) //!< Check endpoint 0 size
    1014:	81 50       	subi	r24, 0x01	; 1
         else
         {
            Usb_write_PGM_byte(pbuffer++);                                                 //Write a flash byte to USB        
         }        
#else          
         Usb_write_PGM_byte(pbuffer++);          
    1016:	a1 f0       	breq	.+40     	; 0x1040 <usb_process_request+0x122>
    1018:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <pbuffer>
    101c:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <pbuffer+0x1>
    1020:	9f 01       	movw	r18, r30
    1022:	2f 5f       	subi	r18, 0xFF	; 255
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	30 93 17 02 	sts	0x0217, r19	; 0x800217 <pbuffer+0x1>
    102a:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <pbuffer>
    102e:	e4 91       	lpm	r30, Z
    1030:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
#endif
         data_to_transfer --;                                                             //decrements the number of bytes to transmit.
    1034:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <data_to_transfer>
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	20 93 15 02 	sts	0x0215, r18	; 0x800215 <data_to_transfer>
      }
      
      if (Is_usb_nak_out_sent())
    103e:	e6 cf       	rjmp	.-52     	; 0x100c <usb_process_request+0xee>
    1040:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1044:	84 fd       	sbrc	r24, 4
         break;
      if (Is_usb_vbus_low())
    1046:	cd cf       	rjmp	.-102    	; 0xfe2 <usb_process_request+0xc4>
    1048:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    104c:	80 ff       	sbrs	r24, 0
         break;
      Usb_send_control_in();
    104e:	c9 cf       	rjmp	.-110    	; 0xfe2 <usb_process_request+0xc4>
    1050:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1054:	8e 7f       	andi	r24, 0xFE	; 254
   
#if (USE_DEVICE_SN_UNIQUE==ENABLE)      
   f_get_serial_string=FALSE;                                                   //end of signature transmission    
#endif   

   if((zlp == TRUE) && (!Is_usb_nak_out_sent()))
    1056:	bf cf       	rjmp	.-130    	; 0xfd6 <usb_process_request+0xb8>
    1058:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    105c:	84 fd       	sbrc	r24, 4
   {
      while(!Is_usb_read_control_enabled()) {if(Is_usb_vbus_low())break;}
    105e:	12 c0       	rjmp	.+36     	; 0x1084 <usb_process_request+0x166>
    1060:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1064:	80 fd       	sbrc	r24, 0
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <usb_process_request+0x152>
    1068:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    106c:	80 fd       	sbrc	r24, 0
      Usb_send_control_in();
    106e:	f8 cf       	rjmp	.-16     	; 0x1060 <usb_process_request+0x142>
    1070:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1074:	8e 7f       	andi	r24, 0xFE	; 254
    1076:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   }

   while (!(Is_usb_nak_out_sent())) {if(Is_usb_vbus_low())break;}
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <usb_process_request+0x166>
    107c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1080:	80 ff       	sbrs	r24, 0
    1082:	04 c0       	rjmp	.+8      	; 0x108c <usb_process_request+0x16e>
    1084:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1088:	84 ff       	sbrs	r24, 4
   Usb_ack_nak_out();
    108a:	f8 cf       	rjmp	.-16     	; 0x107c <usb_process_request+0x15e>
    108c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1090:	8f 7e       	andi	r24, 0xEF	; 239
    1092:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   Usb_ack_control_out();
    1096:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    109a:	8b 7f       	andi	r24, 0xFB	; 251
            return;
      }
      break;

      case SETUP_GET_CONFIGURATION:
      if (USB_SETUP_GET_STAND_DEVICE == bmRequestType)
    109c:	46 c0       	rjmp	.+140    	; 0x112a <usb_process_request+0x20c>
    109e:	10 38       	cpi	r17, 0x80	; 128
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <usb_process_request+0x186>
//! This function manages the GET CONFIGURATION request. The current
//! configuration number is returned.
//!
void usb_get_configuration(void)
{
   Usb_ack_receive_setup();
    10a2:	51 c1       	rjmp	.+674    	; 0x1346 <usb_process_request+0x428>
    10a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10a8:	87 7f       	andi	r24, 0xF7	; 247
    10aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   Usb_write_byte(usb_configuration_nb);
    10ae:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <usb_configuration_nb>
    10b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_ack_in_ready();
    10b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ba:	8e 7f       	andi	r24, 0xFE	; 254
    10bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10c4:	8f 77       	andi	r24, 0x7F	; 127
    10c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   while( !Is_usb_receive_out() ){if(Is_usb_vbus_low())break;}
    10ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ce:	82 fd       	sbrc	r24, 2
    10d0:	24 c0       	rjmp	.+72     	; 0x111a <usb_process_request+0x1fc>
    10d2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    10d6:	80 fd       	sbrc	r24, 0
    10d8:	f8 cf       	rjmp	.-16     	; 0x10ca <usb_process_request+0x1ac>
Bool usb_get_status( U8 bmRequestType )
{
   U8 wIndex;
   U8 dummy;

   dummy    = Usb_read_byte();                 //!< dummy read
    10da:	1f c0       	rjmp	.+62     	; 0x111a <usb_process_request+0x1fc>
    10dc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   dummy    = Usb_read_byte();                 //!< dummy read
    10e0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   wIndex   = Usb_read_byte();
    10e4:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   switch(bmRequestType)
    10e8:	11 38       	cpi	r17, 0x81	; 129
    10ea:	09 f0       	breq	.+2      	; 0x10ee <usb_process_request+0x1d0>
      Usb_ack_receive_setup();
      Usb_write_byte(device_status);
      break;

      case USB_SETUP_GET_STAND_INTERFACE:
      Usb_ack_receive_setup();
    10ec:	cc c0       	rjmp	.+408    	; 0x1286 <usb_process_request+0x368>
    10ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      Usb_write_byte(0);      // Reserved - always 0
    10f8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      break;
    
      default:
      return FALSE;
   }
   Usb_write_byte(0);
    10fc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

   Usb_send_control_in();
    1100:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1104:	8e 7f       	andi	r24, 0xFE	; 254
    1106:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   while( !Is_usb_receive_out() ){if(Is_usb_vbus_low())break;}
    110a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    110e:	82 fd       	sbrc	r24, 2
    1110:	04 c0       	rjmp	.+8      	; 0x111a <usb_process_request+0x1fc>
    1112:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1116:	80 fd       	sbrc	r24, 0

   Usb_write_byte(usb_configuration_nb);
   Usb_ack_in_ready();

   while( !Is_usb_receive_out() ){if(Is_usb_vbus_low())break;}
   Usb_ack_receive_out();
    1118:	f8 cf       	rjmp	.-16     	; 0x110a <usb_process_request+0x1ec>
    111a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    111e:	8b 7f       	andi	r24, 0xFB	; 251
    1120:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1124:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1128:	8f 77       	andi	r24, 0x7F	; 127
    112a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
         return;
      }
      break;

      case SETUP_SET_ADDRESS:
      if (USB_SETUP_SET_STAND_DEVICE == bmRequestType)
    112e:	1d c1       	rjmp	.+570    	; 0x136a <usb_process_request+0x44c>
    1130:	11 11       	cpse	r17, r1
//! This function manages the SET ADDRESS request. When complete, the device
//! will filter the requests using the new address.
//!
void usb_set_address(void)
{
   U8 addr = Usb_read_byte();
    1132:	09 c1       	rjmp	.+530    	; 0x1346 <usb_process_request+0x428>
    1134:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   Usb_configure_address(addr);
    1138:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    113c:	90 78       	andi	r25, 0x80	; 128
    113e:	8f 77       	andi	r24, 0x7F	; 127
    1140:	89 2b       	or	r24, r25
    1142:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

   Usb_ack_receive_setup();
    1146:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    114a:	87 7f       	andi	r24, 0xF7	; 247
    114c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

   Usb_send_control_in();                    // send a ZLP for STATUS phase
    1150:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1154:	8e 7f       	andi	r24, 0xFE	; 254
    1156:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   while(!Is_usb_in_ready()) {if(Is_usb_vbus_low())break;} // waits for status phase done
    115a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    115e:	80 fd       	sbrc	r24, 0
    1160:	04 c0       	rjmp	.+8      	; 0x116a <usb_process_request+0x24c>
    1162:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    1166:	80 fd       	sbrc	r24, 0
                                             // before using the new address
   Usb_enable_address();
    1168:	f8 cf       	rjmp	.-16     	; 0x115a <usb_process_request+0x23c>
    116a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
         return;
      }
      break;

      case SETUP_SET_CONFIGURATION:
      if (USB_SETUP_SET_STAND_DEVICE == bmRequestType)
    1174:	fa c0       	rjmp	.+500    	; 0x136a <usb_process_request+0x44c>
    1176:	11 11       	cpse	r17, r1
Bool usb_set_configuration( void )
{
   U8 configuration_number;

   // Get/Check new configuration
   configuration_number = Usb_read_byte();
    1178:	e6 c0       	rjmp	.+460    	; 0x1346 <usb_process_request+0x428>
    117a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   if (configuration_number > NB_CONFIGURATION)
    117e:	92 30       	cpi	r25, 0x02	; 2
    1180:	08 f0       	brcs	.+2      	; 0x1184 <usb_process_request+0x266>
      return FALSE;  //  Bad configuration number then stall request
   Usb_ack_receive_setup();
    1182:	e1 c0       	rjmp	.+450    	; 0x1346 <usb_process_request+0x428>
    1184:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1188:	87 7f       	andi	r24, 0xF7	; 247
    118a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   usb_configuration_nb = configuration_number;
    118e:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <usb_configuration_nb>
   
   Usb_send_control_in();                          // send a ZLP for STATUS phase
    1192:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1196:	8e 7f       	andi	r24, 0xFE	; 254
    1198:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   usb_user_endpoint_init(usb_configuration_nb);   // endpoint configuration
    119c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <usb_configuration_nb>
      // OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
      Usb_ack_receive_setup();
      endpoint_status[(EP_CONTROL & MSK_EP_DIR)] = 0x01;
   }
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
      return FALSE;  //  Bad configuration number then stall request
   Usb_ack_receive_setup();
   usb_configuration_nb = configuration_number;
   
   Usb_send_control_in();                          // send a ZLP for STATUS phase
   usb_user_endpoint_init(usb_configuration_nb);   // endpoint configuration
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
{
   U8 wValue;
   U8 wIndex;
   U8 dummy;

   switch (bmRequestType)
    11ac:	90 ca       	rjmp	.-2784   	; 0x6ce <usb_user_endpoint_init>
    11ae:	11 23       	and	r17, r17
    11b0:	a9 f1       	breq	.+106    	; 0x121c <usb_process_request+0x2fe>
    11b2:	12 30       	cpi	r17, 0x02	; 2
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <usb_process_request+0x29a>
      case USB_SETUP_SET_STAND_INTERFACE:
      return FALSE;                    // Unknow request
      break;
      
      case USB_SETUP_SET_STAND_ENDPOINT:
      wValue = Usb_read_byte();
    11b6:	c7 c0       	rjmp	.+398    	; 0x1346 <usb_process_request+0x428>
    11b8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      dummy  = Usb_read_byte();
    11bc:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      if (wValue != FEATURE_ENDPOINT_HALT)
    11c0:	81 11       	cpse	r24, r1
         return FALSE;                 // Unknow request
      wIndex = (Usb_read_byte() & MSK_EP_DIR);
    11c2:	c1 c0       	rjmp	.+386    	; 0x1346 <usb_process_request+0x428>
    11c4:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      Usb_select_endpoint(wIndex);
    11c8:	ef 77       	andi	r30, 0x7F	; 127
    11ca:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if( !Is_usb_endpoint_enabled())
    11ce:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11d2:	80 ff       	sbrs	r24, 0
      {
         Usb_select_endpoint(EP_CONTROL);
         return FALSE;              // Invalid request
      } 
      if(wIndex != EP_CONTROL)
    11d4:	40 c0       	rjmp	.+128    	; 0x1256 <usb_process_request+0x338>
    11d6:	ee 23       	and	r30, r30
      {
         Usb_disable_stall_handshake();
    11d8:	a9 f0       	breq	.+42     	; 0x1204 <usb_process_request+0x2e6>
    11da:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11de:	80 61       	ori	r24, 0x10	; 16
    11e0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
         Usb_reset_endpoint(wIndex);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 2e       	mov	r0, r30
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <usb_process_request+0x2d0>
    11ec:	88 0f       	add	r24, r24
    11ee:	0a 94       	dec	r0
    11f0:	ea f7       	brpl	.-6      	; 0x11ec <usb_process_request+0x2ce>
    11f2:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    11f6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
         Usb_reset_data_toggle();
    11fa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11fe:	88 60       	ori	r24, 0x08	; 8
    1200:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      }
      Usb_select_endpoint(EP_CONTROL);
    1204:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      endpoint_status[wIndex] = 0x00;
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	e3 5f       	subi	r30, 0xF3	; 243
    120c:	fd 4f       	sbci	r31, 0xFD	; 253
    120e:	10 82       	st	Z, r1
{
   U8 wValue;
   U8 wIndex;
   U8 dummy;

   switch (bmRequestType)
    1210:	31 c0       	rjmp	.+98     	; 0x1274 <usb_process_request+0x356>
    1212:	11 23       	and	r17, r17
    1214:	19 f0       	breq	.+6      	; 0x121c <usb_process_request+0x2fe>
    1216:	12 30       	cpi	r17, 0x02	; 2
    1218:	21 f0       	breq	.+8      	; 0x1222 <usb_process_request+0x304>
   {
      case USB_SETUP_SET_STAND_DEVICE:
      wValue = Usb_read_byte();
    121a:	95 c0       	rjmp	.+298    	; 0x1346 <usb_process_request+0x428>
    121c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      case USB_SETUP_SET_STAND_INTERFACE:
      return FALSE;                    // Unknow request
      break;

      case USB_SETUP_SET_STAND_ENDPOINT:
      wValue   = Usb_read_byte();
    1220:	92 c0       	rjmp	.+292    	; 0x1346 <usb_process_request+0x428>
    1222:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      dummy    = Usb_read_byte();                //!< dummy read
    1226:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      if (wValue != FEATURE_ENDPOINT_HALT)
    122a:	81 11       	cpse	r24, r1
         return FALSE;                 // Unknow request
      wIndex = (Usb_read_byte() & MSK_EP_DIR);
    122c:	8c c0       	rjmp	.+280    	; 0x1346 <usb_process_request+0x428>
    122e:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      if (wIndex == EP_CONTROL)
    1232:	ef 77       	andi	r30, 0x7F	; 127
      {
         Usb_enable_stall_handshake();
    1234:	51 f4       	brne	.+20     	; 0x124a <usb_process_request+0x32c>
    1236:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    123a:	80 62       	ori	r24, 0x20	; 32
    123c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
         Usb_ack_receive_setup();
    1240:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1244:	87 7f       	andi	r24, 0xF7	; 247
    1246:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      }
      Usb_select_endpoint(wIndex);
    124a:	e0 93 e9 00 	sts	0x00E9, r30	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      if( !Is_usb_endpoint_enabled())
    124e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1252:	80 fd       	sbrc	r24, 0
      {
         Usb_select_endpoint(EP_CONTROL);
    1254:	03 c0       	rjmp	.+6      	; 0x125c <usb_process_request+0x33e>
    1256:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
         return FALSE;              // Invalid request
      }
      Usb_enable_stall_handshake();
    125a:	75 c0       	rjmp	.+234    	; 0x1346 <usb_process_request+0x428>
    125c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1260:	80 62       	ori	r24, 0x20	; 32
    1262:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
      Usb_select_endpoint(EP_CONTROL);
    1266:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
      endpoint_status[wIndex] = 0x01;
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	e3 5f       	subi	r30, 0xF3	; 243
    126e:	fd 4f       	sbci	r31, 0xFD	; 253
    1270:	81 e0       	ldi	r24, 0x01	; 1
      Usb_ack_receive_setup();
    1272:	80 83       	st	Z, r24
    1274:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1278:	87 7f       	andi	r24, 0xF7	; 247
    127a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      Usb_send_control_in();
    127e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1282:	8e 7f       	andi	r24, 0xFE	; 254

   dummy    = Usb_read_byte();                 //!< dummy read
   dummy    = Usb_read_byte();                 //!< dummy read
   wIndex   = Usb_read_byte();

   switch(bmRequestType)
    1284:	52 cf       	rjmp	.-348    	; 0x112a <usb_process_request+0x20c>
    1286:	12 38       	cpi	r17, 0x82	; 130
    1288:	21 f0       	breq	.+8      	; 0x1292 <usb_process_request+0x374>
    128a:	10 38       	cpi	r17, 0x80	; 128
    128c:	09 f0       	breq	.+2      	; 0x1290 <usb_process_request+0x372>
    128e:	5b c0       	rjmp	.+182    	; 0x1346 <usb_process_request+0x428>
      Usb_ack_receive_setup();
      Usb_write_byte(0);      // Reserved - always 0
      break;

      case USB_SETUP_GET_STAND_ENDPOINT:
      Usb_ack_receive_setup();
    1290:	2e cf       	rjmp	.-420    	; 0x10ee <usb_process_request+0x1d0>
    1292:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1296:	87 7f       	andi	r24, 0xF7	; 247
    1298:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
      wIndex = wIndex & MSK_EP_DIR;
      Usb_write_byte( endpoint_status[wIndex] );
    129c:	ef 77       	andi	r30, 0x7F	; 127
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	e3 5f       	subi	r30, 0xF3	; 243
    12a2:	fd 4f       	sbci	r31, 0xFD	; 253
    12a4:	80 81       	ld	r24, Z
    12a6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
      if (usb_get_status(bmRequestType))
         return;
      break;

      case SETUP_GET_INTERFACE:
      if (USB_SETUP_GET_STAND_INTERFACE == bmRequestType)
    12aa:	28 cf       	rjmp	.-432    	; 0x10fc <usb_process_request+0x1de>
    12ac:	11 38       	cpi	r17, 0x81	; 129
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <usb_process_request+0x394>
   U16   wInterface;
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
    12b0:	4a c0       	rjmp	.+148    	; 0x1346 <usb_process_request+0x428>
    12b2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   wValue_msb = Usb_read_byte();
    12b6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   // wValue = Alternate Setting
   // wIndex = Interface
   LSB(wInterface)=Usb_read_byte();
    12ba:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   MSB(wInterface)=Usb_read_byte();
    12be:	99 83       	std	Y+1, r25	; 0x01
    12c0:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   if( (0!=wValue_msb) || (0!=wValue_msb) )
    12c4:	9a 83       	std	Y+2, r25	; 0x02
    12c6:	81 11       	cpse	r24, r1
      return FALSE;
   Usb_ack_receive_setup();
    12c8:	3e c0       	rjmp	.+124    	; 0x1346 <usb_process_request+0x428>
    12ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ce:	87 7f       	andi	r24, 0xF7	; 247
   
   Usb_write_byte( usb_user_interface_get(wInterface) );
    12d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	0a da       	rcall	.-3052   	; 0x6ee <usb_user_interface_get>
   Usb_send_control_in();
    12da:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    12de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12e2:	8e 7f       	andi	r24, 0xFE	; 254

   while( !Is_usb_receive_out() ){if(Is_usb_vbus_low())break;}
    12e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ec:	82 fd       	sbrc	r24, 2
    12ee:	15 cf       	rjmp	.-470    	; 0x111a <usb_process_request+0x1fc>
    12f0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    12f4:	80 fd       	sbrc	r24, 0
            return;
      }
      break;

      case SETUP_SET_INTERFACE:
      if (bmRequestType == USB_SETUP_SET_STAND_INTERFACE)
    12f6:	f8 cf       	rjmp	.-16     	; 0x12e8 <usb_process_request+0x3ca>
    12f8:	10 cf       	rjmp	.-480    	; 0x111a <usb_process_request+0x1fc>
   U16   wInterface;
   U8    wValue_msb;
   U8    wValue_lsb;

   // Read wValue
   wValue_lsb = Usb_read_byte();
    12fa:	11 30       	cpi	r17, 0x01	; 1
    12fc:	21 f5       	brne	.+72     	; 0x1346 <usb_process_request+0x428>
   wValue_msb = Usb_read_byte();
    12fe:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   // wValue = Alternate Setting
   // wIndex = Interface
   LSB(wInterface)=Usb_read_byte();
    1302:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1306:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   MSB(wInterface)=Usb_read_byte();
    130a:	99 83       	std	Y+1, r25	; 0x01
    130c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   if( 0!=wValue_msb )
    1310:	9a 83       	std	Y+2, r25	; 0x02
      return FALSE;
   Usb_ack_receive_setup();
    1312:	81 11       	cpse	r24, r1
    1314:	18 c0       	rjmp	.+48     	; 0x1346 <usb_process_request+0x428>
    1316:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   
   usb_user_interface_reset(wInterface, wValue_lsb);
    131a:	87 7f       	andi	r24, 0xF7	; 247
    131c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1320:	89 81       	ldd	r24, Y+1	; 0x01
   Usb_select_endpoint(EP_CONTROL);
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	e6 d9       	rcall	.-3124   	; 0x6f2 <usb_user_interface_reset>
            
   Usb_send_control_in();
    1326:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    132a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    132e:	8e 7f       	andi	r24, 0xFE	; 254
   while(!Is_usb_in_ready()) {if(Is_usb_vbus_low())break;}
    1330:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1334:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1338:	80 fd       	sbrc	r24, 0
    133a:	17 c0       	rjmp	.+46     	; 0x136a <usb_process_request+0x44c>
    133c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
      default:
      break;
   }

   // un-supported like standard request => call to user read request
   if( !usb_user_read_request(bmRequestType, bmRequest) )
    1340:	80 fd       	sbrc	r24, 0
    1342:	f8 cf       	rjmp	.-16     	; 0x1334 <usb_process_request+0x416>
    1344:	12 c0       	rjmp	.+36     	; 0x136a <usb_process_request+0x44c>
    1346:	60 2f       	mov	r22, r16
    1348:	81 2f       	mov	r24, r17
    134a:	5a d9       	rcall	.-3404   	; 0x600 <usb_user_read_request>
   {
      // Request unknow in the specific request list from interface
      // keep that order (set StallRq/clear RxSetup) or a
      // OUT request following the SETUP may be acknowledged
      Usb_enable_stall_handshake();
    134c:	81 11       	cpse	r24, r1
    134e:	0d c0       	rjmp	.+26     	; 0x136a <usb_process_request+0x44c>
    1350:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1354:	80 62       	ori	r24, 0x20	; 32
      Usb_ack_receive_setup();
    1356:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    135a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    135e:	87 7f       	andi	r24, 0xF7	; 247
      endpoint_status[(EP_CONTROL & MSK_EP_DIR)] = 0x01;
    1360:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1364:	81 e0       	ldi	r24, 0x01	; 1
   }
}
    1366:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <endpoint_status>
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <usb_device_task_init>:
//! @return none
//!
//!/
void usb_device_task_init(void)
{
   Enable_interrupt();
    1378:	78 94       	sei
   Usb_disable();
    137a:	e8 ed       	ldi	r30, 0xD8	; 216
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8f 76       	andi	r24, 0x6F	; 111
    1382:	80 83       	st	Z, r24
   Usb_enable();
    1384:	80 81       	ld	r24, Z
    1386:	80 69       	ori	r24, 0x90	; 144
    1388:	80 83       	st	Z, r24
   // Usb_select_device();
#if (USB_LOW_SPEED_DEVICE==ENABLE)
   Usb_low_speed_mode();
#endif
   Enable_interrupt();
    138a:	78 94       	sei
    138c:	08 95       	ret

0000138e <usb_start_device>:
//!
//! @return none
//!
void usb_start_device (void)
{
   Pll_start_auto();
    138e:	82 e1       	ldi	r24, 0x12	; 18
    1390:	89 bd       	out	0x29, r24	; 41
   Wait_pll_ready();
    1392:	09 b4       	in	r0, 0x29	; 41
    1394:	00 fe       	sbrs	r0, 0
    1396:	fd cf       	rjmp	.-6      	; 0x1392 <usb_start_device+0x4>

   Disable_interrupt();
    1398:	f8 94       	cli
   Usb_unfreeze_clock();
    139a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    139e:	8f 7d       	andi	r24, 0xDF	; 223
    13a0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   usb_init_device();         // configure the USB controller EP0
   Usb_attach();
    13a4:	54 d1       	rcall	.+680    	; 0x164e <usb_init_device>
    13a6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    13aa:	8e 7f       	andi	r24, 0xFE	; 254
    13ac:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   Enable_interrupt();
   
   Usb_enable_suspend_interrupt();
    13b0:	78 94       	sei
    13b2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13b6:	81 60       	ori	r24, 0x01	; 1
    13b8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   Usb_enable_reset_interrupt();
    13bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13c0:	88 60       	ori	r24, 0x08	; 8
    13c2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13c6:	08 95       	ret

000013c8 <usb_device_task>:
{
  
   // Non-OTG exclusives Device operations

   // VBUS state detection
   if (Is_usb_vbus_high()&& (usb_connected==FALSE))
    13c8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    13cc:	80 ff       	sbrs	r24, 0
    13ce:	13 c0       	rjmp	.+38     	; 0x13f6 <usb_device_task+0x2e>
    13d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <usb_connected>
    13d4:	81 11       	cpse	r24, r1
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <usb_device_task+0x2e>
   {
      usb_connected = TRUE;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <usb_connected>
      remote_wakeup_feature = DISABLED;
    13de:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <remote_wakeup_feature>
      Usb_vbus_on_action();
      Usb_send_event(EVT_USB_POWERED);
    13e2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_usb_event>
    13e6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_usb_event+0x1>
    13ea:	82 60       	ori	r24, 0x02	; 2
    13ec:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_usb_event+0x1>
    13f0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_usb_event>
      usb_start_device();
   }
   if (Is_usb_vbus_low()&& (usb_connected==TRUE))
    13f4:	cc df       	rcall	.-104    	; 0x138e <usb_start_device>
    13f6:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
    13fa:	80 fd       	sbrc	r24, 0
    13fc:	1b c0       	rjmp	.+54     	; 0x1434 <usb_device_task+0x6c>
    13fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <usb_connected>
    1402:	81 30       	cpi	r24, 0x01	; 1
   {
      usb_connected = FALSE;
    1404:	b9 f4       	brne	.+46     	; 0x1434 <usb_device_task+0x6c>
    1406:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <usb_connected>
      usb_configuration_nb = 0;
    140a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <usb_configuration_nb>
      Usb_send_event(EVT_USB_UNPOWERED);
    140e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_usb_event>
    1412:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_usb_event+0x1>
    1416:	84 60       	ori	r24, 0x04	; 4
    1418:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_usb_event+0x1>
    141c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_usb_event>
      Usb_detach();
    1420:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1424:	81 60       	ori	r24, 0x01	; 1
    1426:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
      Usb_freeze_clock();
    142a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    142e:	80 62       	ori	r24, 0x20	; 32
    1430:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
      Usb_vbus_off_action();
   }

   if(Is_usb_event(EVT_USB_RESET))
    1434:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_usb_event>
    1438:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_usb_event+0x1>
    143c:	90 ff       	sbrs	r25, 0
   {
      Usb_ack_event(EVT_USB_RESET);
    143e:	10 c0       	rjmp	.+32     	; 0x1460 <usb_device_task+0x98>
    1440:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_usb_event>
    1444:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_usb_event+0x1>
    1448:	9e 7f       	andi	r25, 0xFE	; 254
    144a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_usb_event+0x1>
    144e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_usb_event>
      Usb_reset_endpoint(0);
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    1458:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
      usb_configuration_nb=0;
    145c:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <usb_configuration_nb>
   // =======================================
   // Common Standard Device Control Requests
   // =======================================
   //   - device enumeration process
   //   - device control commands and features
   Usb_select_endpoint(EP_CONTROL);
    1460:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   if (Is_usb_receive_setup())
    1464:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   {
      usb_process_request();
    1468:	83 fd       	sbrc	r24, 3
    146a:	59 cd       	rjmp	.-1358   	; 0xf1e <usb_process_request>
    146c:	08 95       	ret

0000146e <usb_task_init>:
 *  @return none
 */
void usb_task_init(void)
{
   #if (USE_USB_PADS_REGULATOR==ENABLE)  // Otherwise assume USB PADs regulator is not used
   Usb_enable_regulator();
    146e:	e7 ed       	ldi	r30, 0xD7	; 215
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	81 60       	ori	r24, 0x01	; 1
   #endif

   usb_device_task_init();
    1476:	80 83       	st	Z, r24
    1478:	7f cf       	rjmp	.-258    	; 0x1378 <usb_device_task_init>

0000147a <usb_task>:
 *  @param none
 *
 *  @return none
*/
void usb_task(void)
{
    147a:	a6 cf       	rjmp	.-180    	; 0x13c8 <usb_device_task>

0000147c <__vector_10>:
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    14a2:	82 ff       	sbrs	r24, 2
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <__vector_10+0x3c>
    14a6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14aa:	82 ff       	sbrs	r24, 2
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <__vector_10+0x3c>
    14ae:	8b ef       	ldi	r24, 0xFB	; 251
    14b0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    14b4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sof_action>
    14b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    14bc:	80 ff       	sbrs	r24, 0
    14be:	40 c0       	rjmp	.+128    	; 0x1540 <__vector_10+0xc4>
    14c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14c4:	80 ff       	sbrs	r24, 0
    14c6:	3c c0       	rjmp	.+120    	; 0x1540 <__vector_10+0xc4>
    14c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <remote_wakeup_feature>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	d9 f4       	brne	.+54     	; 0x1506 <__vector_10+0x8a>
    14d0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <usb_configuration_nb>
    14d4:	88 23       	and	r24, r24
    14d6:	b9 f0       	breq	.+46     	; 0x1506 <__vector_10+0x8a>
    14d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14dc:	8e 7f       	andi	r24, 0xFE	; 254
    14de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14e2:	8f ee       	ldi	r24, 0xEF	; 239
    14e4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    14e8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14ec:	80 61       	ori	r24, 0x10	; 16
    14ee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14f2:	89 b5       	in	r24, 0x29	; 41
    14f4:	8d 7f       	andi	r24, 0xFD	; 253
    14f6:	89 bd       	out	0x29, r24	; 41
    14f8:	19 bc       	out	0x29, r1	; 41
    14fa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14fe:	80 62       	ori	r24, 0x20	; 32
    1500:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1504:	1d c0       	rjmp	.+58     	; 0x1540 <__vector_10+0xc4>
    1506:	8f ee       	ldi	r24, 0xEF	; 239
    1508:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    150c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_usb_event>
    1510:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_usb_event+0x1>
    1514:	80 62       	ori	r24, 0x20	; 32
    1516:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_usb_event+0x1>
    151a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_usb_event>
    151e:	8e ef       	ldi	r24, 0xFE	; 254
    1520:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1524:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1528:	80 61       	ori	r24, 0x10	; 16
    152a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    152e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1532:	80 62       	ori	r24, 0x20	; 32
    1534:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1538:	89 b5       	in	r24, 0x29	; 41
    153a:	8d 7f       	andi	r24, 0xFD	; 253
    153c:	89 bd       	out	0x29, r24	; 41
    153e:	19 bc       	out	0x29, r1	; 41
    1540:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1544:	84 ff       	sbrs	r24, 4
    1546:	29 c0       	rjmp	.+82     	; 0x159a <__vector_10+0x11e>
    1548:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    154c:	84 ff       	sbrs	r24, 4
    154e:	25 c0       	rjmp	.+74     	; 0x159a <__vector_10+0x11e>
    1550:	09 b4       	in	r0, 0x29	; 41
    1552:	00 fe       	sbrs	r0, 0
    1554:	1c c0       	rjmp	.+56     	; 0x158e <__vector_10+0x112>
    1556:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    155a:	8f 7d       	andi	r24, 0xDF	; 223
    155c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1560:	8f ee       	ldi	r24, 0xEF	; 239
    1562:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1566:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    156a:	8f 7e       	andi	r24, 0xEF	; 239
    156c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1570:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_usb_event>
    1574:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_usb_event+0x1>
    1578:	80 64       	ori	r24, 0x40	; 64
    157a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_usb_event+0x1>
    157e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_usb_event>
    1582:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1586:	81 60       	ori	r24, 0x01	; 1
    1588:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    158c:	06 c0       	rjmp	.+12     	; 0x159a <__vector_10+0x11e>
    158e:	82 e1       	ldi	r24, 0x12	; 18
    1590:	89 bd       	out	0x29, r24	; 41
    1592:	09 b4       	in	r0, 0x29	; 41
    1594:	00 fe       	sbrs	r0, 0
    1596:	fd cf       	rjmp	.-6      	; 0x1592 <__vector_10+0x116>
    1598:	de cf       	rjmp	.-68     	; 0x1556 <__vector_10+0xda>
    159a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    159e:	85 ff       	sbrs	r24, 5
    15a0:	1a c0       	rjmp	.+52     	; 0x15d6 <__vector_10+0x15a>
    15a2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15a6:	85 ff       	sbrs	r24, 5
    15a8:	16 c0       	rjmp	.+44     	; 0x15d6 <__vector_10+0x15a>
    15aa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15ae:	8f 7e       	andi	r24, 0xEF	; 239
    15b0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15b4:	8f ed       	ldi	r24, 0xDF	; 223
    15b6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    15ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15be:	8f 7d       	andi	r24, 0xDF	; 223
    15c0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15c4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_usb_event>
    15c8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_usb_event+0x1>
    15cc:	80 68       	ori	r24, 0x80	; 128
    15ce:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_usb_event+0x1>
    15d2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_usb_event>
    15d6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    15da:	83 ff       	sbrs	r24, 3
    15dc:	11 c0       	rjmp	.+34     	; 0x1600 <__vector_10+0x184>
    15de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    15e2:	83 ff       	sbrs	r24, 3
    15e4:	0d c0       	rjmp	.+26     	; 0x1600 <__vector_10+0x184>
    15e6:	87 ef       	ldi	r24, 0xF7	; 247
    15e8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    15ec:	30 d0       	rcall	.+96     	; 0x164e <usb_init_device>
    15ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_usb_event>
    15f2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_usb_event+0x1>
    15f6:	91 60       	ori	r25, 0x01	; 1
    15f8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_usb_event+0x1>
    15fc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_usb_event>
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	bf 91       	pop	r27
    1606:	af 91       	pop	r26
    1608:	9f 91       	pop	r25
    160a:	8f 91       	pop	r24
    160c:	7f 91       	pop	r23
    160e:	6f 91       	pop	r22
    1610:	5f 91       	pop	r21
    1612:	4f 91       	pop	r20
    1614:	3f 91       	pop	r19
    1616:	2f 91       	pop	r18
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <usb_config_ep>:
//! @return none
//!
void usb_halt_endpoint (U8 ep_num)
{
   Usb_select_endpoint(ep_num);
   Usb_enable_stall_handshake();
    1622:	eb ee       	ldi	r30, 0xEB	; 235
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	90 81       	ld	r25, Z
    1628:	91 60       	ori	r25, 0x01	; 1
    162a:	90 83       	st	Z, r25
    162c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1630:	ed ee       	ldi	r30, 0xED	; 237
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	82 70       	andi	r24, 0x02	; 2
    1638:	68 2b       	or	r22, r24
    163a:	60 83       	st	Z, r22
    163c:	80 81       	ld	r24, Z
    163e:	82 60       	ori	r24, 0x02	; 2
    1640:	80 83       	st	Z, r24
    1642:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1646:	88 1f       	adc	r24, r24
    1648:	88 27       	eor	r24, r24
    164a:	88 1f       	adc	r24, r24
    164c:	08 95       	ret

0000164e <usb_init_device>:
//!
//! @return status
//!
U8 usb_init_device (void)
{
   Usb_select_endpoint(EP_CONTROL);
    164e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   if(!Is_usb_endpoint_enabled())
    1652:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1656:	80 fd       	sbrc	r24, 0
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <usb_init_device+0x16>
   {
#if (USB_LOW_SPEED_DEVICE==DISABLE)
      return usb_configure_endpoint(EP_CONTROL,    \
    165a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    165e:	60 e3       	ldi	r22, 0x30	; 48
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	df cf       	rjmp	.-66     	; 0x1622 <usb_config_ep>
                              ONE_BANK,      \
                              NYET_DISABLED);
#endif
   }
   return FALSE;
}
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	08 95       	ret

00001668 <wdtdrv_disable>:
   // Ignored if IAR compiler optimization option "Always do cross call optimization" is enabled
   #pragma optimize=none 
#endif
void wdtdrv_disable(void)
{
   U8 save_int=Get_interrupt_state();
    1668:	8f b7       	in	r24, 0x3f	; 63
   Disable_interrupt();
    166a:	f8 94       	cli
#ifdef  __GNUC__
   Ack_wdt_reset();
    166c:	97 ef       	ldi	r25, 0xF7	; 247
    166e:	94 bf       	out	0x34, r25	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	a8 95       	wdr
    1676:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    167a:	98 61       	ori	r25, 0x18	; 24
    167c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1680:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1684:	0f be       	out	0x3f, r0	; 63
   Ack_wdt_reset();
   Wdt_reset_instruction();
   WDTCSR = (1<<WDCE) | (1<<WDE);
   WDTCSR = 0x00;
#endif
   if(save_int) { Enable_interrupt(); }
    1686:	87 ff       	sbrs	r24, 7
    1688:	01 c0       	rjmp	.+2      	; 0x168c <wdtdrv_disable+0x24>
    168a:	78 94       	sei
    168c:	08 95       	ret

0000168e <cf_mem_init>:
    168e:	2c c0       	rjmp	.+88     	; 0x16e8 <cf_init>

00001690 <cf_test_unit_ready>:
    1690:	39 d0       	rcall	.+114    	; 0x1704 <cf_mem_check>
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	19 f0       	breq	.+6      	; 0x169c <cf_test_unit_ready+0xc>
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	08 95       	ret
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	08 95       	ret

000016a2 <cf_read_capacity>:
    16a2:	41 e4       	ldi	r20, 0x41	; 65
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	fc 01       	movw	r30, r24
    16ac:	40 83       	st	Z, r20
    16ae:	51 83       	std	Z+1, r21	; 0x01
    16b0:	62 83       	std	Z+2, r22	; 0x02
    16b2:	73 83       	std	Z+3, r23	; 0x03
    16b4:	ed cf       	rjmp	.-38     	; 0x1690 <cf_test_unit_ready>

000016b6 <cf_wr_protect>:
    16b6:	8f b1       	in	r24, 0x0f	; 15
    16b8:	86 fb       	bst	r24, 6
    16ba:	88 27       	eor	r24, r24
    16bc:	80 f9       	bld	r24, 0
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	89 27       	eor	r24, r25
    16c2:	08 95       	ret

000016c4 <cf_read_10>:
    16c4:	21 d0       	rcall	.+66     	; 0x1708 <cf_read_sector>
    16c6:	21 e0       	ldi	r18, 0x01	; 1
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	88 23       	and	r24, r24
    16cc:	11 f0       	breq	.+4      	; 0x16d2 <cf_read_10+0xe>
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	c9 01       	movw	r24, r18
    16d4:	08 95       	ret

000016d6 <cf_write_10>:
    16d6:	ca d0       	rcall	.+404    	; 0x186c <cf_write_sector>
    16d8:	21 e0       	ldi	r18, 0x01	; 1
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	88 23       	and	r24, r24
    16de:	11 f0       	breq	.+4      	; 0x16e4 <cf_write_10+0xe>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	c9 01       	movw	r24, r18
    16e6:	08 95       	ret

000016e8 <cf_init>:
    16e8:	0e d4       	rcall	.+2076   	; 0x1f06 <boot_choice_init>
    16ea:	8e ef       	ldi	r24, 0xFE	; 254
    16ec:	93 e0       	ldi	r25, 0x03	; 3
    16ee:	78 d6       	rcall	.+3312   	; 0x23e0 <eeprom_read_word>
    16f0:	81 3c       	cpi	r24, 0xC1	; 193
    16f2:	23 e0       	ldi	r18, 0x03	; 3
    16f4:	92 07       	cpc	r25, r18
    16f6:	10 f0       	brcs	.+4      	; 0x16fc <cf_init+0x14>
    16f8:	80 ec       	ldi	r24, 0xC0	; 192
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	74 d1       	rcall	.+744    	; 0x19e6 <set_entryfile_size>
    16fe:	7d d1       	rcall	.+762    	; 0x19fa <parse_entry_file>
    1700:	cc d4       	rcall	.+2456   	; 0x209a <get_boot_choice>
    1702:	5c c2       	rjmp	.+1208   	; 0x1bbc <build_bootfile_parameters>

00001704 <cf_mem_check>:
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	08 95       	ret

00001708 <cf_read_sector>:
    1708:	9f 92       	push	r9
    170a:	af 92       	push	r10
    170c:	bf 92       	push	r11
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	00 d0       	rcall	.+0      	; 0x1720 <cf_read_sector+0x18>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	6a 01       	movw	r12, r20
    1726:	7b 01       	movw	r14, r22
    1728:	fe 2c       	mov	r15, r14
    172a:	ee 24       	eor	r14, r14
    172c:	ff 0c       	add	r15, r15
    172e:	b5 d4       	rcall	.+2410   	; 0x209a <get_boot_choice>
    1730:	45 d2       	rcall	.+1162   	; 0x1bbc <build_bootfile_parameters>
    1732:	8d 9a       	sbi	0x11, 5	; 17
    1734:	87 01       	movw	r16, r14
    1736:	88 e0       	ldi	r24, 0x08	; 8
    1738:	a8 2e       	mov	r10, r24
    173a:	f8 94       	cli
    173c:	b1 2c       	mov	r11, r1
    173e:	f8 01       	movw	r30, r16
    1740:	00 3c       	cpi	r16, 0xC0	; 192
    1742:	11 05       	cpc	r17, r1
    1744:	18 f4       	brcc	.+6      	; 0x174c <cf_read_sector+0x44>
    1746:	ea 55       	subi	r30, 0x5A	; 90
    1748:	fd 4f       	sbci	r31, 0xFD	; 253
    174a:	07 c0       	rjmp	.+14     	; 0x175a <cf_read_sector+0x52>
    174c:	ee 5f       	subi	r30, 0xFE	; 254
    174e:	f1 40       	sbci	r31, 0x01	; 1
    1750:	eb 30       	cpi	r30, 0x0B	; 11
    1752:	f1 05       	cpc	r31, r1
    1754:	30 f4       	brcc	.+12     	; 0x1762 <cf_read_sector+0x5a>
    1756:	e5 56       	subi	r30, 0x65	; 101
    1758:	fd 4f       	sbci	r31, 0xFD	; 253
    175a:	e4 91       	lpm	r30, Z
    175c:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1760:	53 c0       	rjmp	.+166    	; 0x1808 <cf_read_sector+0x100>
    1762:	99 24       	eor	r9, r9
    1764:	93 94       	inc	r9
    1766:	9b 0c       	add	r9, r11
    1768:	0c 33       	cpi	r16, 0x3C	; 60
    176a:	24 e0       	ldi	r18, 0x04	; 4
    176c:	12 07       	cpc	r17, r18
    176e:	61 f4       	brne	.+24     	; 0x1788 <cf_read_sector+0x80>
    1770:	3f d1       	rcall	.+638    	; 0x19f0 <get_bootfile_size>
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    177a:	b9 2c       	mov	r11, r9
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1782:	0d e3       	ldi	r16, 0x3D	; 61
    1784:	14 e0       	ldi	r17, 0x04	; 4
    1786:	40 c0       	rjmp	.+128    	; 0x1808 <cf_read_sector+0x100>
    1788:	0c 37       	cpi	r16, 0x7C	; 124
    178a:	84 e0       	ldi	r24, 0x04	; 4
    178c:	18 07       	cpc	r17, r24
    178e:	61 f4       	brne	.+24     	; 0x17a8 <cf_read_sector+0xa0>
    1790:	25 d1       	rcall	.+586    	; 0x19dc <get_entryfile_size>
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    179a:	b9 2c       	mov	r11, r9
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17a2:	0d e7       	ldi	r16, 0x7D	; 125
    17a4:	14 e0       	ldi	r17, 0x04	; 4
    17a6:	30 c0       	rjmp	.+96     	; 0x1808 <cf_read_sector+0x100>
    17a8:	f8 01       	movw	r30, r16
    17aa:	f4 50       	subi	r31, 0x04	; 4
    17ac:	e0 3c       	cpi	r30, 0xC0	; 192
    17ae:	f1 05       	cpc	r31, r1
    17b0:	58 f4       	brcc	.+22     	; 0x17c8 <cf_read_sector+0xc0>
    17b2:	e5 52       	subi	r30, 0x25	; 37
    17b4:	fe 4f       	sbci	r31, 0xFE	; 254
    17b6:	e4 91       	lpm	r30, Z
    17b8:	0b 36       	cpi	r16, 0x6B	; 107
    17ba:	24 e0       	ldi	r18, 0x04	; 4
    17bc:	12 07       	cpc	r17, r18
    17be:	71 f6       	brne	.-100    	; 0x175c <cf_read_sector+0x54>
    17c0:	7e 99       	sbic	0x0f, 6	; 15
    17c2:	cc cf       	rjmp	.-104    	; 0x175c <cf_read_sector+0x54>
    17c4:	e1 60       	ori	r30, 0x01	; 1
    17c6:	ca cf       	rjmp	.-108    	; 0x175c <cf_read_sector+0x54>
    17c8:	01 15       	cp	r16, r1
    17ca:	8a e0       	ldi	r24, 0x0A	; 10
    17cc:	18 07       	cpc	r17, r24
    17ce:	48 f0       	brcs	.+18     	; 0x17e2 <cf_read_sector+0xda>
    17d0:	0f d1       	rcall	.+542    	; 0x19f0 <get_bootfile_size>
    17d2:	96 5f       	subi	r25, 0xF6	; 246
    17d4:	08 17       	cp	r16, r24
    17d6:	19 07       	cpc	r17, r25
    17d8:	20 f4       	brcc	.+8      	; 0x17e2 <cf_read_sector+0xda>
    17da:	c8 01       	movw	r24, r16
    17dc:	9a 50       	subi	r25, 0x0A	; 10
    17de:	83 d2       	rcall	.+1286   	; 0x1ce6 <read_file_SWITCH_GRB>
    17e0:	0e c0       	rjmp	.+28     	; 0x17fe <cf_read_sector+0xf6>
    17e2:	c8 01       	movw	r24, r16
    17e4:	9e 50       	subi	r25, 0x0E	; 14
    17e6:	80 3c       	cpi	r24, 0xC0	; 192
    17e8:	23 e0       	ldi	r18, 0x03	; 3
    17ea:	92 07       	cpc	r25, r18
    17ec:	10 f4       	brcc	.+4      	; 0x17f2 <cf_read_sector+0xea>
    17ee:	f0 d5       	rcall	.+3040   	; 0x23d0 <eeprom_read_byte>
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <cf_read_sector+0xf6>
    17f2:	c8 01       	movw	r24, r16
    17f4:	92 51       	subi	r25, 0x12	; 18
    17f6:	82 31       	cpi	r24, 0x12	; 18
    17f8:	91 05       	cpc	r25, r1
    17fa:	20 f4       	brcc	.+8      	; 0x1804 <cf_read_sector+0xfc>
    17fc:	d3 d2       	rcall	.+1446   	; 0x1da4 <read_file_BOOTPINS_TXT>
    17fe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <cf_read_sector+0x100>
    1804:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	b3 94       	inc	r11
    180e:	8f e3       	ldi	r24, 0x3F	; 63
    1810:	8b 15       	cp	r24, r11
    1812:	08 f0       	brcs	.+2      	; 0x1816 <cf_read_sector+0x10e>
    1814:	94 cf       	rjmp	.-216    	; 0x173e <cf_read_sector+0x36>
    1816:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    181a:	8f 77       	andi	r24, 0x7F	; 127
    181c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1820:	78 94       	sei
    1822:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1826:	85 fd       	sbrc	r24, 5
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <cf_read_sector+0x130>
    182a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    182e:	89 2f       	mov	r24, r25
    1830:	81 70       	andi	r24, 0x01	; 1
    1832:	90 fd       	sbrc	r25, 0
    1834:	f6 cf       	rjmp	.-20     	; 0x1822 <cf_read_sector+0x11a>
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <cf_read_sector+0x148>
    1838:	aa 94       	dec	r10
    183a:	a1 10       	cpse	r10, r1
    183c:	7e cf       	rjmp	.-260    	; 0x173a <cf_read_sector+0x32>
    183e:	2e ef       	ldi	r18, 0xFE	; 254
    1840:	f2 1a       	sub	r15, r18
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	c8 1a       	sub	r12, r24
    1846:	d1 08       	sbc	r13, r1
    1848:	09 f0       	breq	.+2      	; 0x184c <cf_read_sector+0x144>
    184a:	74 cf       	rjmp	.-280    	; 0x1734 <cf_read_sector+0x2c>
    184c:	8d 98       	cbi	0x11, 5	; 17
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	bf 90       	pop	r11
    1866:	af 90       	pop	r10
    1868:	9f 90       	pop	r9
    186a:	08 95       	ret

0000186c <cf_write_sector>:
    186c:	5f 92       	push	r5
    186e:	6f 92       	push	r6
    1870:	7f 92       	push	r7
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	c2 54       	subi	r28, 0x42	; 66
    1890:	d1 09       	sbc	r29, r1
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	5a 01       	movw	r10, r20
    189e:	6b 01       	movw	r12, r22
    18a0:	dc 2c       	mov	r13, r12
    18a2:	cc 24       	eor	r12, r12
    18a4:	dd 0c       	add	r13, r13
    18a6:	0f b1       	in	r16, 0x0f	; 15
    18a8:	06 fb       	bst	r16, 6
    18aa:	00 27       	eor	r16, r16
    18ac:	00 f9       	bld	r16, 0
    18ae:	8d 9a       	sbi	0x11, 5	; 17
    18b0:	7e 01       	movw	r14, r28
    18b2:	21 e4       	ldi	r18, 0x41	; 65
    18b4:	e2 0e       	add	r14, r18
    18b6:	f1 1c       	adc	r15, r1
    18b8:	20 ec       	ldi	r18, 0xC0	; 192
    18ba:	82 2e       	mov	r8, r18
    18bc:	23 e0       	ldi	r18, 0x03	; 3
    18be:	92 2e       	mov	r9, r18
    18c0:	36 01       	movw	r6, r12
    18c2:	88 e0       	ldi	r24, 0x08	; 8
    18c4:	58 2e       	mov	r5, r24
    18c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ca:	85 fd       	sbrc	r24, 5
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <cf_write_sector+0x70>
    18ce:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    18d2:	89 2f       	mov	r24, r25
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	90 fd       	sbrc	r25, 0
    18d8:	f6 cf       	rjmp	.-20     	; 0x18c6 <cf_write_sector+0x5a>
    18da:	69 c0       	rjmp	.+210    	; 0x19ae <cf_write_sector+0x142>
    18dc:	f8 94       	cli
    18de:	01 11       	cpse	r16, r1
    18e0:	09 c0       	rjmp	.+18     	; 0x18f4 <cf_write_sector+0x88>
    18e2:	fe 01       	movw	r30, r28
    18e4:	31 96       	adiw	r30, 0x01	; 1
    18e6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    18ea:	81 93       	st	Z+, r24
    18ec:	ee 15       	cp	r30, r14
    18ee:	ff 05       	cpc	r31, r15
    18f0:	d1 f7       	brne	.-12     	; 0x18e6 <cf_write_sector+0x7a>
    18f2:	46 c0       	rjmp	.+140    	; 0x1980 <cf_write_sector+0x114>
    18f4:	10 e0       	ldi	r17, 0x00	; 0
    18f6:	b3 01       	movw	r22, r6
    18f8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    18fc:	e1 e0       	ldi	r30, 0x01	; 1
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	ec 0f       	add	r30, r28
    1902:	fd 1f       	adc	r31, r29
    1904:	e1 0f       	add	r30, r17
    1906:	f1 1d       	adc	r31, r1
    1908:	80 83       	st	Z, r24
    190a:	9c e7       	ldi	r25, 0x7C	; 124
    190c:	69 16       	cp	r6, r25
    190e:	94 e0       	ldi	r25, 0x04	; 4
    1910:	79 06       	cpc	r7, r25
    1912:	21 f5       	brne	.+72     	; 0x195c <cf_write_sector+0xf0>
    1914:	f7 01       	movw	r30, r14
    1916:	80 83       	st	Z, r24
    1918:	1f 5f       	subi	r17, 0xFF	; 255
    191a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    191e:	e1 e0       	ldi	r30, 0x01	; 1
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	ec 0f       	add	r30, r28
    1924:	fd 1f       	adc	r31, r29
    1926:	e1 0f       	add	r30, r17
    1928:	f1 1d       	adc	r31, r1
    192a:	80 83       	st	Z, r24
    192c:	f7 01       	movw	r30, r14
    192e:	81 83       	std	Z+1, r24	; 0x01
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	81 3c       	cpi	r24, 0xC1	; 193
    1936:	93 40       	sbci	r25, 0x03	; 3
    1938:	18 f0       	brcs	.+6      	; 0x1940 <cf_write_sector+0xd4>
    193a:	f7 01       	movw	r30, r14
    193c:	91 82       	std	Z+1, r9	; 0x01
    193e:	80 82       	st	Z, r8
    1940:	f7 01       	movw	r30, r14
    1942:	60 80       	ld	r6, Z
    1944:	71 80       	ldd	r7, Z+1	; 0x01
    1946:	c3 01       	movw	r24, r6
    1948:	4e d0       	rcall	.+156    	; 0x19e6 <set_entryfile_size>
    194a:	b3 01       	movw	r22, r6
    194c:	8e ef       	ldi	r24, 0xFE	; 254
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	63 d5       	rcall	.+2758   	; 0x2418 <eeprom_write_word>
    1952:	53 d0       	rcall	.+166    	; 0x19fa <parse_entry_file>
    1954:	a2 d3       	rcall	.+1860   	; 0x209a <get_boot_choice>
    1956:	32 d1       	rcall	.+612    	; 0x1bbc <build_bootfile_parameters>
    1958:	6d e7       	ldi	r22, 0x7D	; 125
    195a:	74 e0       	ldi	r23, 0x04	; 4
    195c:	3b 01       	movw	r6, r22
    195e:	ff ef       	ldi	r31, 0xFF	; 255
    1960:	6f 1a       	sub	r6, r31
    1962:	7f 0a       	sbc	r7, r31
    1964:	1f 5f       	subi	r17, 0xFF	; 255
    1966:	10 34       	cpi	r17, 0x40	; 64
    1968:	30 f2       	brcs	.-116    	; 0x18f6 <cf_write_sector+0x8a>
    196a:	6f 53       	subi	r22, 0x3F	; 63
    196c:	7e 40       	sbci	r23, 0x0E	; 14
    196e:	60 3c       	cpi	r22, 0xC0	; 192
    1970:	23 e0       	ldi	r18, 0x03	; 3
    1972:	72 07       	cpc	r23, r18
    1974:	28 f4       	brcc	.+10     	; 0x1980 <cf_write_sector+0x114>
    1976:	40 e4       	ldi	r20, 0x40	; 64
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	35 d5       	rcall	.+2666   	; 0x23ea <eeprom_write_block>
    1980:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1984:	8b 7f       	andi	r24, 0xFB	; 251
    1986:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    198a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    198e:	8f 77       	andi	r24, 0x7F	; 127
    1990:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1994:	78 94       	sei
    1996:	5a 94       	dec	r5
    1998:	51 10       	cpse	r5, r1
    199a:	95 cf       	rjmp	.-214    	; 0x18c6 <cf_write_sector+0x5a>
    199c:	8e ef       	ldi	r24, 0xFE	; 254
    199e:	d8 1a       	sub	r13, r24
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	a9 1a       	sub	r10, r25
    19a4:	b1 08       	sbc	r11, r1
    19a6:	09 f0       	breq	.+2      	; 0x19aa <cf_write_sector+0x13e>
    19a8:	8b cf       	rjmp	.-234    	; 0x18c0 <cf_write_sector+0x54>
    19aa:	8d 98       	cbi	0x11, 5	; 17
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	ce 5b       	subi	r28, 0xBE	; 190
    19b0:	df 4f       	sbci	r29, 0xFF	; 255
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	df 90       	pop	r13
    19ca:	cf 90       	pop	r12
    19cc:	bf 90       	pop	r11
    19ce:	af 90       	pop	r10
    19d0:	9f 90       	pop	r9
    19d2:	8f 90       	pop	r8
    19d4:	7f 90       	pop	r7
    19d6:	6f 90       	pop	r6
    19d8:	5f 90       	pop	r5
    19da:	08 95       	ret

000019dc <get_entryfile_size>:


U16 get_entryfile_size()
{
   return entry_file_size;
}
    19dc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <entry_file_size>
    19e0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <entry_file_size+0x1>
    19e4:	08 95       	ret

000019e6 <set_entryfile_size>:


void set_entryfile_size(U16 file_size)
{
   entry_file_size = file_size;
    19e6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <entry_file_size+0x1>
    19ea:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <entry_file_size>
    19ee:	08 95       	ret

000019f0 <get_bootfile_size>:


U16 get_bootfile_size()
{
    return complete_bootfile_size;
}
    19f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <complete_bootfile_size>
    19f4:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <complete_bootfile_size+0x1>
    19f8:	08 95       	ret

000019fa <parse_entry_file>:

void parse_entry_file()
{
    19fa:	9f 92       	push	r9
    19fc:	af 92       	push	r10
    19fe:	bf 92       	push	r11
    1a00:	cf 92       	push	r12
    1a02:	df 92       	push	r13
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	e3 ec       	ldi	r30, 0xC3	; 195
    1a12:	f1 e0       	ldi	r31, 0x01	; 1
    1a14:	43 ea       	ldi	r20, 0xA3	; 163
    1a16:	51 e0       	ldi	r21, 0x01	; 1
    1a18:	21 e8       	ldi	r18, 0x81	; 129
    1a1a:	31 e0       	ldi	r19, 0x01	; 1
    1a1c:	81 e6       	ldi	r24, 0x61	; 97
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	cf e3       	ldi	r28, 0x3F	; 63
    1a22:	d1 e0       	ldi	r29, 0x01	; 1
    1a24:	0f e1       	ldi	r16, 0x1F	; 31
    1a26:	11 e0       	ldi	r17, 0x01	; 1
   U8  entry_index = 1; // entry iterator - skips index 0, it's supposed to be empty (GRUB menu)

   // reset values to parse
   for(i=0; i<MAX_NUM_ENTRIES; i++)
   {
      sleep_secs_start[i] = 0;
    1a28:	11 92       	st	Z+, r1
    1a2a:	11 92       	st	Z+, r1
      sleep_secs_length[i] = 0;
    1a2c:	da 01       	movw	r26, r20
    1a2e:	1d 92       	st	X+, r1
    1a30:	1d 92       	st	X+, r1
    1a32:	ad 01       	movw	r20, r26
      highlight_color_start[i] = 0;
    1a34:	d9 01       	movw	r26, r18
    1a36:	1d 92       	st	X+, r1
    1a38:	1d 92       	st	X+, r1
    1a3a:	9d 01       	movw	r18, r26
      highlight_color_length[i] = 0;
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	1d 92       	st	X+, r1
    1a40:	1d 92       	st	X+, r1
    1a42:	cd 01       	movw	r24, r26
      entry_start[i] = 0;
    1a44:	19 92       	st	Y+, r1
    1a46:	19 92       	st	Y+, r1
      entry_length[i] = 0;
    1a48:	d8 01       	movw	r26, r16
    1a4a:	1d 92       	st	X+, r1
    1a4c:	1d 92       	st	X+, r1
    1a4e:	8d 01       	movw	r16, r26

   U16 i; // general iterator
   U8  entry_index = 1; // entry iterator - skips index 0, it's supposed to be empty (GRUB menu)

   // reset values to parse
   for(i=0; i<MAX_NUM_ENTRIES; i++)
    1a50:	b1 e0       	ldi	r27, 0x01	; 1
    1a52:	e3 3e       	cpi	r30, 0xE3	; 227
    1a54:	fb 07       	cpc	r31, r27
    1a56:	41 f7       	brne	.-48     	; 0x1a28 <parse_entry_file+0x2e>
      char sample;

      do
      {
         sample = '\0';
         if (entry_file_pos == entry_file_size)
    1a58:	c0 90 1b 01 	lds	r12, 0x011B	; 0x80011b <entry_file_size>
    1a5c:	d0 90 1c 01 	lds	r13, 0x011C	; 0x80011c <entry_file_size+0x1>
    1a60:	99 24       	eor	r9, r9
    1a62:	93 94       	inc	r9
    1a64:	c0 e0       	ldi	r28, 0x00	; 0
    1a66:	d0 e0       	ldi	r29, 0x00	; 0
            sleep_secs_length[entry_index] = line_end - (line_start + 3);
         }
         else if (sample=='2') // highlight color
         {
            highlight_color_start[entry_index]  = line_start + 3;
            highlight_color_length[entry_index] = line_end - (line_start + 3);
    1a68:	ad ef       	ldi	r26, 0xFD	; 253
    1a6a:	aa 2e       	mov	r10, r26
    1a6c:	bb 24       	eor	r11, r11
    1a6e:	ba 94       	dec	r11
    1a70:	8e 01       	movw	r16, r28
      char sample;

      do
      {
         sample = '\0';
         if (entry_file_pos == entry_file_size)
    1a72:	0c 15       	cp	r16, r12
    1a74:	1d 05       	cpc	r17, r13
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <parse_entry_file+0x80>
    1a78:	95 c0       	rjmp	.+298    	; 0x1ba4 <parse_entry_file+0x1aa>
            break;

         sample = read_entry_file(entry_file_pos++);
    1a7a:	78 01       	movw	r14, r16
    1a7c:	6f ef       	ldi	r22, 0xFF	; 255
    1a7e:	e6 1a       	sub	r14, r22
    1a80:	f6 0a       	sbc	r15, r22
    1a82:	c8 01       	movw	r24, r16
    1a84:	a5 d4       	rcall	.+2378   	; 0x23d0 <eeprom_read_byte>
      } while ((sample!='\r') && (sample!='\n'));
    1a86:	8d 30       	cpi	r24, 0x0D	; 13
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <parse_entry_file+0x98>
    1a8a:	8a 30       	cpi	r24, 0x0A	; 10
    1a8c:	51 f0       	breq	.+20     	; 0x1aa2 <parse_entry_file+0xa8>
      {
         sample = '\0';
         if (entry_file_pos == entry_file_size)
            break;

         sample = read_entry_file(entry_file_pos++);
    1a8e:	87 01       	movw	r16, r14
    1a90:	f0 cf       	rjmp	.-32     	; 0x1a72 <parse_entry_file+0x78>

      U16 line_end = entry_file_pos - 1;

      if (sample=='\r') // windows-style line end, \n should follow
      {
         if (entry_file_pos == entry_file_size)
    1a92:	ce 14       	cp	r12, r14
    1a94:	df 04       	cpc	r13, r15
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <parse_entry_file+0xa0>
    1a98:	85 c0       	rjmp	.+266    	; 0x1ba4 <parse_entry_file+0x1aa>
            break;
         else
            entry_file_pos++; // skip \n
    1a9a:	78 01       	movw	r14, r16
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	e8 0e       	add	r14, r24
      }

      // process line
      if (read_entry_file(line_start)=='#') // special parameters or comment
    1aa0:	f1 1c       	adc	r15, r1
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	95 d4       	rcall	.+2346   	; 0x23d0 <eeprom_read_byte>
      {
         //U8 par_pos = 0; 
         sample = read_entry_file(line_start+1);
    1aa6:	83 32       	cpi	r24, 0x23	; 35
    1aa8:	79 f5       	brne	.+94     	; 0x1b08 <parse_entry_file+0x10e>
    1aaa:	ce 01       	movw	r24, r28
         if (sample=='1') // sleep secs
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	90 d4       	rcall	.+2336   	; 0x23d0 <eeprom_read_byte>
         {
            sleep_secs_start[entry_index]  = line_start + 3;
    1ab0:	81 33       	cpi	r24, 0x31	; 49
    1ab2:	81 f4       	brne	.+32     	; 0x1ad4 <parse_entry_file+0xda>
    1ab4:	89 2d       	mov	r24, r9
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	fc 01       	movw	r30, r24
    1abe:	ed 53       	subi	r30, 0x3D	; 61
    1ac0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac2:	9e 01       	movw	r18, r28
    1ac4:	2d 5f       	subi	r18, 0xFD	; 253
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
            sleep_secs_length[entry_index] = line_end - (line_start + 3);
    1ac8:	31 83       	std	Z+1, r19	; 0x01
    1aca:	20 83       	st	Z, r18
    1acc:	fc 01       	movw	r30, r24
    1ace:	ed 55       	subi	r30, 0x5D	; 93
         }
         else if (sample=='2') // highlight color
    1ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad2:	12 c0       	rjmp	.+36     	; 0x1af8 <parse_entry_file+0xfe>
    1ad4:	82 33       	cpi	r24, 0x32	; 50
         {
            highlight_color_start[entry_index]  = line_start + 3;
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <parse_entry_file+0xe0>
    1ad8:	5d c0       	rjmp	.+186    	; 0x1b94 <parse_entry_file+0x19a>
    1ada:	89 2d       	mov	r24, r9
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	ef 57       	subi	r30, 0x7F	; 127
    1ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae8:	9e 01       	movw	r18, r28
    1aea:	2d 5f       	subi	r18, 0xFD	; 253
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
            highlight_color_length[entry_index] = line_end - (line_start + 3);
    1aee:	31 83       	std	Z+1, r19	; 0x01
    1af0:	20 83       	st	Z, r18
    1af2:	fc 01       	movw	r30, r24
    1af4:	ef 59       	subi	r30, 0x9F	; 159
    1af6:	fe 4f       	sbci	r31, 0xFE	; 254
    1af8:	95 01       	movw	r18, r10
    1afa:	2c 1b       	sub	r18, r28
    1afc:	3d 0b       	sbc	r19, r29
    1afe:	02 0f       	add	r16, r18
    1b00:	13 1f       	adc	r17, r19
    1b02:	11 83       	std	Z+1, r17	; 0x01
         }
         continue; // next line - also means comments with #... are skipped
      }
      else // menu entry line (can be empty line);
      {
         entry_start[entry_index]  = line_start;
    1b04:	00 83       	st	Z, r16
    1b06:	46 c0       	rjmp	.+140    	; 0x1b94 <parse_entry_file+0x19a>
    1b08:	89 2d       	mov	r24, r9
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	fc 01       	movw	r30, r24
    1b12:	e1 5c       	subi	r30, 0xC1	; 193
    1b14:	fe 4f       	sbci	r31, 0xFE	; 254
         entry_length[entry_index] = line_end - line_start;
    1b16:	d1 83       	std	Z+1, r29	; 0x01
    1b18:	c0 83       	st	Z, r28
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	e1 5e       	subi	r30, 0xE1	; 225
    1b1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b20:	0c 1b       	sub	r16, r28
    1b22:	1d 0b       	sbc	r17, r29
         entry_index++;
    1b24:	11 83       	std	Z+1, r17	; 0x01
         if (entry_index < MAX_NUM_ENTRIES)
    1b26:	00 83       	st	Z, r16
    1b28:	93 94       	inc	r9
    1b2a:	af e0       	ldi	r26, 0x0F	; 15
         {
            sleep_secs_start[entry_index]  = sleep_secs_start[entry_index - 1];
    1b2c:	a9 15       	cp	r26, r9
    1b2e:	d0 f1       	brcs	.+116    	; 0x1ba4 <parse_entry_file+0x1aa>
    1b30:	89 2d       	mov	r24, r9
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9c 01       	movw	r18, r24
    1b36:	21 50       	subi	r18, 0x01	; 1
    1b38:	31 09       	sbc	r19, r1
    1b3a:	22 0f       	add	r18, r18
    1b3c:	33 1f       	adc	r19, r19
    1b3e:	f9 01       	movw	r30, r18
    1b40:	ed 53       	subi	r30, 0x3D	; 61
    1b42:	fe 4f       	sbci	r31, 0xFE	; 254
    1b44:	40 81       	ld	r20, Z
    1b46:	51 81       	ldd	r21, Z+1	; 0x01
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	ed 53       	subi	r30, 0x3D	; 61
    1b50:	fe 4f       	sbci	r31, 0xFE	; 254
            sleep_secs_length[entry_index] = sleep_secs_length[entry_index - 1];
    1b52:	51 83       	std	Z+1, r21	; 0x01
    1b54:	40 83       	st	Z, r20
    1b56:	f9 01       	movw	r30, r18
    1b58:	ed 55       	subi	r30, 0x5D	; 93
    1b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5c:	40 81       	ld	r20, Z
    1b5e:	51 81       	ldd	r21, Z+1	; 0x01
    1b60:	fc 01       	movw	r30, r24
    1b62:	ed 55       	subi	r30, 0x5D	; 93
    1b64:	fe 4f       	sbci	r31, 0xFE	; 254
            highlight_color_start[entry_index]  = highlight_color_start[entry_index - 1];
    1b66:	51 83       	std	Z+1, r21	; 0x01
    1b68:	40 83       	st	Z, r20
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	ef 57       	subi	r30, 0x7F	; 127
    1b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b70:	40 81       	ld	r20, Z
    1b72:	51 81       	ldd	r21, Z+1	; 0x01
    1b74:	fc 01       	movw	r30, r24
    1b76:	ef 57       	subi	r30, 0x7F	; 127
    1b78:	fe 4f       	sbci	r31, 0xFE	; 254
            highlight_color_length[entry_index] = highlight_color_length[entry_index - 1];
    1b7a:	51 83       	std	Z+1, r21	; 0x01
    1b7c:	40 83       	st	Z, r20
    1b7e:	f9 01       	movw	r30, r18
    1b80:	ef 59       	subi	r30, 0x9F	; 159
    1b82:	fe 4f       	sbci	r31, 0xFE	; 254
    1b84:	20 81       	ld	r18, Z
    1b86:	31 81       	ldd	r19, Z+1	; 0x01
    1b88:	fc 01       	movw	r30, r24
    1b8a:	ef 59       	subi	r30, 0x9F	; 159
    1b8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b8e:	31 83       	std	Z+1, r19	; 0x01
         }
         continue; // next line
      }
   } while ( (entry_index < MAX_NUM_ENTRIES) &&       // not max number of entries parsed yet
             (entry_file_pos != entry_file_size) );   // not end of file yet
    1b90:	20 83       	st	Z, r18
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <parse_entry_file+0x1a0>
    1b94:	bf e0       	ldi	r27, 0x0F	; 15
            highlight_color_start[entry_index]  = highlight_color_start[entry_index - 1];
            highlight_color_length[entry_index] = highlight_color_length[entry_index - 1];
         }
         continue; // next line
      }
   } while ( (entry_index < MAX_NUM_ENTRIES) &&       // not max number of entries parsed yet
    1b96:	b9 15       	cp	r27, r9
    1b98:	28 f0       	brcs	.+10     	; 0x1ba4 <parse_entry_file+0x1aa>
    1b9a:	ec 14       	cp	r14, r12
    1b9c:	fd 04       	cpc	r15, r13
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <parse_entry_file+0x1aa>
             (entry_file_pos != entry_file_size) );   // not end of file yet
} 
    1ba0:	e7 01       	movw	r28, r14
    1ba2:	66 cf       	rjmp	.-308    	; 0x1a70 <parse_entry_file+0x76>
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	08 95       	ret

00001bbc <build_bootfile_parameters>:
void build_bootfile_parameters(U8 choice)
{

   U16 i;

   bootfile_parameters_size = 0;
    1bbc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <bootfile_parameters_size+0x1>
    1bc0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <bootfile_parameters_size>

   if ((choice==0) || (entry_length[choice]==0))
    1bc4:	88 23       	and	r24, r24
    1bc6:	71 f0       	breq	.+28     	; 0x1be4 <build_bootfile_parameters+0x28>
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	fc 01       	movw	r30, r24
    1bd0:	e1 5e       	subi	r30, 0xE1	; 225
    1bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	61 15       	cp	r22, r1
    1bda:	71 05       	cpc	r23, r1
    1bdc:	19 f0       	breq	.+6      	; 0x1be4 <build_bootfile_parameters+0x28>
    1bde:	e3 ec       	ldi	r30, 0xC3	; 195
    1be0:	f1 e0       	ldi	r31, 0x01	; 1
    1be2:	05 c0       	rjmp	.+10     	; 0x1bee <build_bootfile_parameters+0x32>
   {
      complete_bootfile_size = 0;
    1be4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <complete_bootfile_size+0x1>
    1be8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <complete_bootfile_size>
      return;
    1bec:	08 95       	ret
    1bee:	af 01       	movw	r20, r30
    1bf0:	43 5c       	subi	r20, 0xC3	; 195
    1bf2:	51 40       	sbci	r21, 0x01	; 1
   }

   // Sleep secs parameter on choice display
   for(i=0; pgm_read_byte(bootfile_string1+i)!='\0'; i++)
    1bf4:	24 91       	lpm	r18, Z
    1bf6:	31 96       	adiw	r30, 0x01	; 1
    1bf8:	21 11       	cpse	r18, r1
    1bfa:	f9 cf       	rjmp	.-14     	; 0x1bee <build_bootfile_parameters+0x32>
      bootfile_parameters_size++;

   sleep_secs_choice_offset = bootfile_parameters_size;
    1bfc:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <sleep_secs_choice_offset+0x1>
    1c00:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <sleep_secs_choice_offset>
   sleep_secs_choice_start = sleep_secs_start[choice];
    1c04:	fc 01       	movw	r30, r24
    1c06:	ed 53       	subi	r30, 0x3D	; 61
    1c08:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0a:	20 81       	ld	r18, Z
    1c0c:	31 81       	ldd	r19, Z+1	; 0x01
    1c0e:	30 93 a2 01 	sts	0x01A2, r19	; 0x8001a2 <sleep_secs_choice_start+0x1>
    1c12:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <sleep_secs_choice_start>
   bootfile_parameters_size += sleep_secs_length[choice];
    1c16:	fc 01       	movw	r30, r24
    1c18:	ed 55       	subi	r30, 0x5D	; 93
    1c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1c:	20 81       	ld	r18, Z
    1c1e:	31 81       	ldd	r19, Z+1	; 0x01
    1c20:	42 0f       	add	r20, r18
    1c22:	53 1f       	adc	r21, r19


   // highlight color parameter on choice display
   bootfile_string2_offset = bootfile_parameters_size;
    1c24:	50 93 18 01 	sts	0x0118, r21	; 0x800118 <bootfile_string2_offset+0x1>
    1c28:	40 93 17 01 	sts	0x0117, r20	; 0x800117 <bootfile_string2_offset>
   for(i=0; pgm_read_byte(bootfile_string2+i)!='\0'; i++)
    1c2c:	e6 ea       	ldi	r30, 0xA6	; 166
    1c2e:	f1 e0       	ldi	r31, 0x01	; 1
    1c30:	46 5a       	subi	r20, 0xA6	; 166
    1c32:	51 40       	sbci	r21, 0x01	; 1
    1c34:	9a 01       	movw	r18, r20
    1c36:	2e 0f       	add	r18, r30
    1c38:	3f 1f       	adc	r19, r31
    1c3a:	a4 91       	lpm	r26, Z
    1c3c:	31 96       	adiw	r30, 0x01	; 1
    1c3e:	a1 11       	cpse	r26, r1
    1c40:	f9 cf       	rjmp	.-14     	; 0x1c34 <build_bootfile_parameters+0x78>
      bootfile_parameters_size++;

   highlight_color_choice_offset = bootfile_parameters_size;
    1c42:	30 93 16 01 	sts	0x0116, r19	; 0x800116 <highlight_color_choice_offset+0x1>
    1c46:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <highlight_color_choice_offset>
   highlight_color_choice_start = highlight_color_start[choice];
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	ef 57       	subi	r30, 0x7F	; 127
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	40 81       	ld	r20, Z
    1c52:	51 81       	ldd	r21, Z+1	; 0x01
    1c54:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <highlight_color_choice_start+0x1>
    1c58:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <highlight_color_choice_start>
   bootfile_parameters_size += highlight_color_length[choice];
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	ef 59       	subi	r30, 0x9F	; 159
    1c60:	fe 4f       	sbci	r31, 0xFE	; 254
    1c62:	40 81       	ld	r20, Z
    1c64:	51 81       	ldd	r21, Z+1	; 0x01
    1c66:	42 0f       	add	r20, r18
    1c68:	53 1f       	adc	r21, r19


   // Boot choice (boot menu default)
   bootfile_string3_offset = bootfile_parameters_size;
    1c6a:	50 93 14 01 	sts	0x0114, r21	; 0x800114 <bootfile_string3_offset+0x1>
    1c6e:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <bootfile_string3_offset>
   for(i=0; pgm_read_byte(bootfile_string3+i)!='\0'; i++)
    1c72:	ef e8       	ldi	r30, 0x8F	; 143
    1c74:	f1 e0       	ldi	r31, 0x01	; 1
    1c76:	4f 58       	subi	r20, 0x8F	; 143
    1c78:	51 40       	sbci	r21, 0x01	; 1
    1c7a:	9a 01       	movw	r18, r20
    1c7c:	2e 0f       	add	r18, r30
    1c7e:	3f 1f       	adc	r19, r31
    1c80:	a4 91       	lpm	r26, Z
    1c82:	31 96       	adiw	r30, 0x01	; 1
    1c84:	a1 11       	cpse	r26, r1
    1c86:	f9 cf       	rjmp	.-14     	; 0x1c7a <build_bootfile_parameters+0xbe>
      bootfile_parameters_size++;

   entry_choice_offset = bootfile_parameters_size;
    1c88:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <entry_choice_offset+0x1>
    1c8c:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <entry_choice_offset>
   entry_choice_start = entry_start[choice];
    1c90:	fc 01       	movw	r30, r24
    1c92:	e1 5c       	subi	r30, 0xC1	; 193
    1c94:	fe 4f       	sbci	r31, 0xFE	; 254
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <entry_choice_start+0x1>
    1c9e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <entry_choice_start>
   bootfile_parameters_size += entry_length[choice];
    1ca2:	26 0f       	add	r18, r22
    1ca4:	37 1f       	adc	r19, r23


   // separator line
   bootfile_string4_offset = bootfile_parameters_size;
    1ca6:	30 93 10 01 	sts	0x0110, r19	; 0x800110 <bootfile_string4_offset+0x1>
    1caa:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <bootfile_string4_offset>
   for(i=0; pgm_read_byte(bootfile_string4+i)!='\0'; i++)
    1cae:	eb e8       	ldi	r30, 0x8B	; 139
    1cb0:	f1 e0       	ldi	r31, 0x01	; 1
    1cb2:	2b 58       	subi	r18, 0x8B	; 139
    1cb4:	31 40       	sbci	r19, 0x01	; 1
    1cb6:	c9 01       	movw	r24, r18
    1cb8:	8e 0f       	add	r24, r30
    1cba:	9f 1f       	adc	r25, r31
    1cbc:	44 91       	lpm	r20, Z
    1cbe:	31 96       	adiw	r30, 0x01	; 1
    1cc0:	41 11       	cpse	r20, r1
    1cc2:	f9 cf       	rjmp	.-14     	; 0x1cb6 <build_bootfile_parameters+0xfa>
    1cc4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <bootfile_parameters_size+0x1>
    1cc8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <bootfile_parameters_size>
      bootfile_parameters_size++;


   // Finish with template part
   bootfile_template_offset = bootfile_parameters_size;
    1ccc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <bootfile_template_offset+0x1>
    1cd0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <bootfile_template_offset>

   bootfile_template_size = &bootfile_template_end - &bootfile_template_start;
   complete_bootfile_size = bootfile_parameters_size + bootfile_template_size;
    1cd4:	8c 53       	subi	r24, 0x3C	; 60
    1cd6:	9c 4d       	sbci	r25, 0xDC	; 220
    1cd8:	86 5e       	subi	r24, 0xE6	; 230
    1cda:	90 42       	sbci	r25, 0x20	; 32
    1cdc:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <complete_bootfile_size+0x1>
    1ce0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <complete_bootfile_size>
    1ce4:	08 95       	ret

00001ce6 <read_file_SWITCH_GRB>:
}


U8 read_file_SWITCH_GRB(U16 offset)
{
    1ce6:	fc 01       	movw	r30, r24
   if ((offset) < sleep_secs_choice_offset)
    1ce8:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <sleep_secs_choice_offset>
    1cec:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <sleep_secs_choice_offset+0x1>
    1cf0:	82 17       	cp	r24, r18
    1cf2:	93 07       	cpc	r25, r19
    1cf4:	18 f4       	brcc	.+6      	; 0x1cfc <read_file_SWITCH_GRB+0x16>
      return pgm_read_byte(bootfile_string1 + offset);
    1cf6:	ed 53       	subi	r30, 0x3D	; 61
    1cf8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfa:	52 c0       	rjmp	.+164    	; 0x1da0 <read_file_SWITCH_GRB+0xba>

   if ((offset) < bootfile_string2_offset)
    1cfc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <bootfile_string2_offset>
    1d00:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <bootfile_string2_offset+0x1>
    1d04:	e8 17       	cp	r30, r24
    1d06:	f9 07       	cpc	r31, r25
    1d08:	28 f4       	brcc	.+10     	; 0x1d14 <read_file_SWITCH_GRB+0x2e>
      return read_entry_file(sleep_secs_choice_start + (offset - sleep_secs_choice_offset));
    1d0a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <sleep_secs_choice_start>
    1d0e:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <sleep_secs_choice_start+0x1>
    1d12:	17 c0       	rjmp	.+46     	; 0x1d42 <read_file_SWITCH_GRB+0x5c>

   if ((offset) < highlight_color_choice_offset)
    1d14:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <highlight_color_choice_offset>
    1d18:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <highlight_color_choice_offset+0x1>
    1d1c:	e2 17       	cp	r30, r18
    1d1e:	f3 07       	cpc	r31, r19
    1d20:	28 f4       	brcc	.+10     	; 0x1d2c <read_file_SWITCH_GRB+0x46>
      return pgm_read_byte(bootfile_string2 + (offset - bootfile_string2_offset));
    1d22:	e8 1b       	sub	r30, r24
    1d24:	f9 0b       	sbc	r31, r25
    1d26:	ea 55       	subi	r30, 0x5A	; 90
    1d28:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2a:	3a c0       	rjmp	.+116    	; 0x1da0 <read_file_SWITCH_GRB+0xba>

   if ((offset) < bootfile_string3_offset)
    1d2c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <bootfile_string3_offset>
    1d30:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <bootfile_string3_offset+0x1>
    1d34:	e8 17       	cp	r30, r24
    1d36:	f9 07       	cpc	r31, r25
    1d38:	38 f4       	brcc	.+14     	; 0x1d48 <read_file_SWITCH_GRB+0x62>
      return read_entry_file(highlight_color_choice_start + (offset - highlight_color_choice_offset));
    1d3a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <highlight_color_choice_start>
    1d3e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <highlight_color_choice_start+0x1>
    1d42:	82 1b       	sub	r24, r18
    1d44:	93 0b       	sbc	r25, r19
    1d46:	19 c0       	rjmp	.+50     	; 0x1d7a <read_file_SWITCH_GRB+0x94>

   if ((offset) < entry_choice_offset)
    1d48:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <entry_choice_offset>
    1d4c:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <entry_choice_offset+0x1>
    1d50:	e4 17       	cp	r30, r20
    1d52:	f5 07       	cpc	r31, r21
    1d54:	28 f4       	brcc	.+10     	; 0x1d60 <read_file_SWITCH_GRB+0x7a>
      return pgm_read_byte(bootfile_string3 + (offset - bootfile_string3_offset));
    1d56:	e8 1b       	sub	r30, r24
    1d58:	f9 0b       	sbc	r31, r25
    1d5a:	e1 57       	subi	r30, 0x71	; 113
    1d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5e:	20 c0       	rjmp	.+64     	; 0x1da0 <read_file_SWITCH_GRB+0xba>

   if ((offset) < bootfile_string4_offset)
    1d60:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <bootfile_string4_offset>
    1d64:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <bootfile_string4_offset+0x1>
    1d68:	e2 17       	cp	r30, r18
    1d6a:	f3 07       	cpc	r31, r19
    1d6c:	48 f4       	brcc	.+18     	; 0x1d80 <read_file_SWITCH_GRB+0x9a>
      return read_entry_file(entry_choice_start + (offset - entry_choice_offset));
    1d6e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <entry_choice_start>
    1d72:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <entry_choice_start+0x1>
    1d76:	84 1b       	sub	r24, r20
    1d78:	95 0b       	sbc	r25, r21
    1d7a:	8e 0f       	add	r24, r30
    1d7c:	9f 1f       	adc	r25, r31
    1d7e:	28 c3       	rjmp	.+1616   	; 0x23d0 <eeprom_read_byte>

   if ((offset) < bootfile_template_offset)
    1d80:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <bootfile_template_offset>
    1d84:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <bootfile_template_offset+0x1>
    1d88:	e8 17       	cp	r30, r24
    1d8a:	f9 07       	cpc	r31, r25
    1d8c:	28 f4       	brcc	.+10     	; 0x1d98 <read_file_SWITCH_GRB+0xb2>
      return pgm_read_byte(bootfile_string4 + (offset - bootfile_string4_offset));
    1d8e:	e2 1b       	sub	r30, r18
    1d90:	f3 0b       	sbc	r31, r19
    1d92:	e5 57       	subi	r30, 0x75	; 117
    1d94:	fe 4f       	sbci	r31, 0xFE	; 254
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <read_file_SWITCH_GRB+0xba>

   return pgm_read_byte((&bootfile_template_start) + (offset - bootfile_template_offset));
    1d98:	e8 1b       	sub	r30, r24
    1d9a:	f9 0b       	sbc	r31, r25
    1d9c:	ea 51       	subi	r30, 0x1A	; 26
    1d9e:	ff 4d       	sbci	r31, 0xDF	; 223
    1da0:	84 91       	lpm	r24, Z
}
    1da2:	08 95       	ret

00001da4 <read_file_BOOTPINS_TXT>:


U8 read_file_BOOTPINS_TXT(U16 offset)
{
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
   if (get_choice_mode() == Binary) // binary mode; show 4 bits and BIN suffix
    1da8:	ec 01       	movw	r28, r24
    1daa:	98 d1       	rcall	.+816    	; 0x20dc <get_choice_mode>
    1dac:	89 2b       	or	r24, r25
   {
      if (offset < 14)
    1dae:	b1 f4       	brne	.+44     	; 0x1ddc <read_file_BOOTPINS_TXT+0x38>
    1db0:	ce 30       	cpi	r28, 0x0E	; 14
    1db2:	d1 05       	cpc	r29, r1
         return pgm_read_byte(bootpins_txt_label_binary+offset);
    1db4:	20 f4       	brcc	.+8      	; 0x1dbe <read_file_BOOTPINS_TXT+0x1a>
    1db6:	fe 01       	movw	r30, r28
    1db8:	e4 58       	subi	r30, 0x84	; 132
      else
         return ((get_raw_boot_pins() >> (3 - (offset - 14)) ) & 0x01) + 0x30;
    1dba:	fe 4f       	sbci	r31, 0xFE	; 254
    1dbc:	15 c0       	rjmp	.+42     	; 0x1de8 <read_file_BOOTPINS_TXT+0x44>
    1dbe:	88 d1       	rcall	.+784    	; 0x20d0 <get_raw_boot_pins>
    1dc0:	21 e1       	ldi	r18, 0x11	; 17
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	2c 1b       	sub	r18, r28
    1dc6:	3d 0b       	sbc	r19, r29
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <read_file_BOOTPINS_TXT+0x2a>
    1dca:	96 95       	lsr	r25
    1dcc:	87 95       	ror	r24
    1dce:	2a 95       	dec	r18
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <read_file_BOOTPINS_TXT+0x26>
    1dd2:	e8 2f       	mov	r30, r24
    1dd4:	e1 70       	andi	r30, 0x01	; 1
    1dd6:	80 e3       	ldi	r24, 0x30	; 48
    1dd8:	8e 0f       	add	r24, r30
   }
   else // 1-of-n mode; show all 11 selector bits
   {
      if (offset < 7)
    1dda:	07 c0       	rjmp	.+14     	; 0x1dea <read_file_BOOTPINS_TXT+0x46>
    1ddc:	c7 30       	cpi	r28, 0x07	; 7
    1dde:	d1 05       	cpc	r29, r1
         return pgm_read_byte(bootpins_txt_label_1ofn+offset);
    1de0:	70 f7       	brcc	.-36     	; 0x1dbe <read_file_BOOTPINS_TXT+0x1a>
    1de2:	fe 01       	movw	r30, r28
    1de4:	ec 58       	subi	r30, 0x8C	; 140
    1de6:	fe 4f       	sbci	r31, 0xFE	; 254
      else                     
         return ((get_raw_boot_pins() >> (10 - (offset - 7))) & 0x01) + 0x30;
   }
}
    1de8:	84 91       	lpm	r24, Z
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <sample_all_pins>:
    filter_all_pins();
}


static U16 sample_all_pins(void)
{
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    U16 all_pins = 0;

    // assemble pin word
    all_pins |= (read_choice_pin(11));
    1e02:	b3 b0       	in	r11, 0x03	; 3
    all_pins <<= 1;
    1e04:	b5 fa       	bst	r11, 5
    1e06:	00 27       	eor	r16, r16
    1e08:	00 f9       	bld	r16, 0
    1e0a:	10 e0       	ldi	r17, 0x00	; 0
    1e0c:	00 0f       	add	r16, r16
    1e0e:	11 1f       	adc	r17, r17
    all_pins |= (read_choice_pin(10));
    1e10:	bf b0       	in	r11, 0x0f	; 15
    1e12:	bb 1c       	adc	r11, r11
    1e14:	bb 24       	eor	r11, r11
    1e16:	bb 1c       	adc	r11, r11
    1e18:	0b 29       	or	r16, r11
    all_pins <<= 1;
    1e1a:	00 0f       	add	r16, r16
    1e1c:	11 1f       	adc	r17, r17
    all_pins |= (read_choice_pin(9));
    1e1e:	b6 b0       	in	r11, 0x06	; 6
    1e20:	b6 fa       	bst	r11, 6
    1e22:	cc 24       	eor	r12, r12
    1e24:	c0 f8       	bld	r12, 0
    1e26:	d1 2c       	mov	r13, r1
    1e28:	0c 29       	or	r16, r12
    1e2a:	1d 29       	or	r17, r13
    all_pins <<= 1;
    1e2c:	00 0f       	add	r16, r16
    1e2e:	11 1f       	adc	r17, r17
    all_pins |= (read_choice_pin(8));
    1e30:	d3 b0       	in	r13, 0x03	; 3
    1e32:	d6 fa       	bst	r13, 6
    1e34:	66 27       	eor	r22, r22
    1e36:	60 f9       	bld	r22, 0
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	60 2b       	or	r22, r16
    1e3c:	71 2b       	or	r23, r17
    all_pins <<= 1;
    1e3e:	66 0f       	add	r22, r22
    1e40:	77 1f       	adc	r23, r23
    all_pins |= (read_choice_pin(7));
    1e42:	13 b1       	in	r17, 0x03	; 3
    1e44:	14 fb       	bst	r17, 4
    1e46:	ee 24       	eor	r14, r14
    1e48:	e0 f8       	bld	r14, 0
    1e4a:	f1 2c       	mov	r15, r1
    1e4c:	6e 29       	or	r22, r14
    1e4e:	7f 29       	or	r23, r15
    all_pins <<= 1;
    1e50:	66 0f       	add	r22, r22
    1e52:	77 1f       	adc	r23, r23
    all_pins |= (read_choice_pin(6));
    1e54:	19 b1       	in	r17, 0x09	; 9
    1e56:	11 1f       	adc	r17, r17
    1e58:	11 27       	eor	r17, r17
    1e5a:	11 1f       	adc	r17, r17
    1e5c:	61 2b       	or	r22, r17
    all_pins <<= 1;
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    all_pins |= (read_choice_pin(5));
    1e62:	19 b1       	in	r17, 0x09	; 9
    1e64:	16 fb       	bst	r17, 6
    1e66:	11 27       	eor	r17, r17
    1e68:	10 f9       	bld	r17, 0
    1e6a:	c1 2f       	mov	r28, r17
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	d8 2f       	mov	r29, r24
    1e70:	6c 2b       	or	r22, r28
    1e72:	7d 2b       	or	r23, r29
    all_pins <<= 1;
    1e74:	66 0f       	add	r22, r22
    1e76:	77 1f       	adc	r23, r23
    all_pins |= (read_choice_pin(4));
    1e78:	c9 b1       	in	r28, 0x09	; 9
    1e7a:	c4 fb       	bst	r28, 4
    1e7c:	44 27       	eor	r20, r20
    1e7e:	40 f9       	bld	r20, 0
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	46 2b       	or	r20, r22
    1e84:	57 2b       	or	r21, r23
    all_pins <<= 1;
    1e86:	44 0f       	add	r20, r20
    1e88:	55 1f       	adc	r21, r21
    all_pins |= (read_choice_pin(3));
    1e8a:	69 b1       	in	r22, 0x09	; 9
    1e8c:	65 fb       	bst	r22, 5
    1e8e:	aa 27       	eor	r26, r26
    1e90:	a0 f9       	bld	r26, 0
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	4a 2b       	or	r20, r26
    1e96:	5b 2b       	or	r21, r27
    all_pins <<= 1;
    1e98:	44 0f       	add	r20, r20
    1e9a:	55 1f       	adc	r21, r21
    all_pins |= (read_choice_pin(2));
    1e9c:	69 b1       	in	r22, 0x09	; 9
    1e9e:	62 fb       	bst	r22, 2
    1ea0:	22 27       	eor	r18, r18
    1ea2:	20 f9       	bld	r18, 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	24 2b       	or	r18, r20
    1ea8:	35 2b       	or	r19, r21
    all_pins <<= 1;
    1eaa:	22 0f       	add	r18, r18
    1eac:	33 1f       	adc	r19, r19
    all_pins |= (read_choice_pin(1));
    1eae:	49 b1       	in	r20, 0x09	; 9
    1eb0:	43 fb       	bst	r20, 3
    1eb2:	88 27       	eor	r24, r24
    1eb4:	80 f9       	bld	r24, 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	28 2b       	or	r18, r24
    1eba:	39 2b       	or	r19, r25

    all_pins ^= choice_mask; // invert choice pins - '1' now means tied to ground
    1ebc:	20 95       	com	r18
    1ebe:	87 e0       	ldi	r24, 0x07	; 7
    1ec0:	38 27       	eor	r19, r24

    all_pins |= (read_wrprot_pin() << WRPROT_WORD_POS);
    1ec2:	8f b1       	in	r24, 0x0f	; 15
    all_pins |= (read_mode_pin() << RDMODE_WORD_POS);
    1ec4:	93 b1       	in	r25, 0x03	; 3

    return all_pins;
    1ec6:	93 fb       	bst	r25, 3
    1ec8:	99 27       	eor	r25, r25
    1eca:	90 f9       	bld	r25, 0
    1ecc:	f9 2f       	mov	r31, r25
    1ece:	f2 95       	swap	r31
    1ed0:	ff 0f       	add	r31, r31
    1ed2:	ff 0f       	add	r31, r31
    1ed4:	f0 7c       	andi	r31, 0xC0	; 192
    1ed6:	e0 e0       	ldi	r30, 0x00	; 0
    1ed8:	82 95       	swap	r24
    1eda:	86 95       	lsr	r24
    1edc:	86 95       	lsr	r24
    1ede:	83 70       	andi	r24, 0x03	; 3
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	99 27       	eor	r25, r25
    1ee4:	86 95       	lsr	r24
    1ee6:	97 95       	ror	r25
    1ee8:	88 27       	eor	r24, r24
    1eea:	8e 2b       	or	r24, r30
    1eec:	9f 2b       	or	r25, r31
}
    1eee:	82 2b       	or	r24, r18
    1ef0:	93 2b       	or	r25, r19
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	bf 90       	pop	r11
    1f04:	08 95       	ret

00001f06 <boot_choice_init>:
// prepare port pins for boot choice
void boot_choice_init(void)
{
    // mode and choice pins are all inputs

    set_mode_input_pullup();
    1f06:	23 98       	cbi	0x04, 3	; 4
    1f08:	2b 9a       	sbi	0x05, 3	; 5

    set_choice_input_pullup(1);
    1f0a:	53 98       	cbi	0x0a, 3	; 10
    1f0c:	5b 9a       	sbi	0x0b, 3	; 11
    set_choice_input_pullup(2);
    1f0e:	52 98       	cbi	0x0a, 2	; 10
    1f10:	5a 9a       	sbi	0x0b, 2	; 11
    set_choice_input_pullup(3);
    1f12:	55 98       	cbi	0x0a, 5	; 10
    1f14:	5d 9a       	sbi	0x0b, 5	; 11
    set_choice_input_pullup(4);
    1f16:	54 98       	cbi	0x0a, 4	; 10
    1f18:	5c 9a       	sbi	0x0b, 4	; 11
    set_choice_input_pullup(5);
    1f1a:	56 98       	cbi	0x0a, 6	; 10
    1f1c:	5e 9a       	sbi	0x0b, 6	; 11
    set_choice_input_pullup(6);
    1f1e:	57 98       	cbi	0x0a, 7	; 10
    1f20:	5f 9a       	sbi	0x0b, 7	; 11
    set_choice_input_pullup(7);
    1f22:	24 98       	cbi	0x04, 4	; 4
    1f24:	2c 9a       	sbi	0x05, 4	; 5
    set_choice_input_pullup(8);
    1f26:	26 98       	cbi	0x04, 6	; 4
    1f28:	2e 9a       	sbi	0x05, 6	; 5
    set_choice_input_pullup(9);
    1f2a:	3e 98       	cbi	0x07, 6	; 7
    1f2c:	46 9a       	sbi	0x08, 6	; 8
    set_choice_input_pullup(10);
    1f2e:	87 98       	cbi	0x10, 7	; 16
    1f30:	8f 9a       	sbi	0x11, 7	; 17
    set_choice_input_pullup(11);
    1f32:	25 98       	cbi	0x04, 5	; 4
    1f34:	2d 9a       	sbi	0x05, 5	; 5


    if (read_mode_pin()==0) // tied to GND
    1f36:	1b 99       	sbic	0x03, 3	; 3
    1f38:	05 c0       	rjmp	.+10     	; 0x1f44 <boot_choice_init+0x3e>
    {
        choice_mode = Binary;
    1f3a:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <choice_mode+0x1>
    1f3e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <choice_mode>
    1f42:	06 c0       	rjmp	.+12     	; 0x1f50 <boot_choice_init+0x4a>
    }
    else
    {
        choice_mode = OneOfN;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <choice_mode+0x1>
    1f4c:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <choice_mode>
    }


    // fill variables with initial pattern
    current_input_pins = sample_all_pins();
    1f50:	4f df       	rcall	.-354    	; 0x1df0 <sample_all_pins>
    1f52:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <current_input_pins+0x1>
    1f56:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <current_input_pins>
    last_input_pins    = current_input_pins;
    1f5a:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <last_input_pins+0x1>
    1f5e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <last_input_pins>
    inputSamples[0]    = current_input_pins;
    1f62:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <inputSamples+0x1>
    1f66:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <inputSamples>
    inputSamples[1]    = current_input_pins;
    1f6a:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <inputSamples+0x3>
    1f6e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <inputSamples+0x2>
    inputSamples[2]    = current_input_pins;
    1f72:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <inputSamples+0x5>
    1f76:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <inputSamples+0x4>


    // no USB detach for now
    detach_countdown = 0;
    1f7a:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <detach_countdown+0x1>
    1f7e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <detach_countdown>

    // IRQ setup
    Disable_interrupt();

        // set timer0 counter initial value to 0
        TCNT0 = 0x00;
    1f82:	f8 94       	cli

        // compare match A for 5msec tick
        OCR0A = (FOSC/1000) * 5;
    1f84:	16 bc       	out	0x26, r1	; 38
    1f86:	80 e5       	ldi	r24, 0x50	; 80

        // clear timer on compare match A
        TCCR0A = (1 << WGM01);
    1f88:	87 bd       	out	0x27, r24	; 39
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
        // start timer0 with /1024 prescaler
        TCCR0B = (1 << CS02) | (1 << CS00);
    1f8c:	84 bd       	out	0x24, r24	; 36
    1f8e:	95 e0       	ldi	r25, 0x05	; 5

        // enable compare match interrupt A for Timer0
        TIMSK0 = (1 << OCIE0A);
    1f90:	95 bd       	out	0x25, r25	; 37
    1f92:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

    Enable_interrupt();
    1f96:	78 94       	sei
    1f98:	08 95       	ret

00001f9a <__vector_21>:
    return;
}


ISR(TIMER0_COMPA_vect)
{
    1f9a:	1f 92       	push	r1
    1f9c:	0f 92       	push	r0
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	0f 92       	push	r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	2f 93       	push	r18
    1faa:	3f 93       	push	r19
    1fac:	4f 93       	push	r20
    1fae:	5f 93       	push	r21
    1fb0:	6f 93       	push	r22
    1fb2:	7f 93       	push	r23
    1fb4:	8f 93       	push	r24
    1fb6:	9f 93       	push	r25
    1fb8:	af 93       	push	r26
    1fba:	bf 93       	push	r27
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	ef 93       	push	r30
    1fc2:	ff 93       	push	r31

// should be called from Timer IRQ (every 5ms)
static void filter_all_pins(void)
{
    // shift data and acquire new sample
    inputSamples[2] = inputSamples[1];
    1fc4:	00 91 e7 01 	lds	r16, 0x01E7	; 0x8001e7 <inputSamples+0x2>
    1fc8:	10 91 e8 01 	lds	r17, 0x01E8	; 0x8001e8 <inputSamples+0x3>
    1fcc:	10 93 ea 01 	sts	0x01EA, r17	; 0x8001ea <inputSamples+0x5>
    1fd0:	00 93 e9 01 	sts	0x01E9, r16	; 0x8001e9 <inputSamples+0x4>
    inputSamples[1] = inputSamples[0];
    1fd4:	c0 91 e5 01 	lds	r28, 0x01E5	; 0x8001e5 <inputSamples>
    1fd8:	d0 91 e6 01 	lds	r29, 0x01E6	; 0x8001e6 <inputSamples+0x1>
    1fdc:	d0 93 e8 01 	sts	0x01E8, r29	; 0x8001e8 <inputSamples+0x3>
    1fe0:	c0 93 e7 01 	sts	0x01E7, r28	; 0x8001e7 <inputSamples+0x2>
    inputSamples[0] = sample_all_pins();
    1fe4:	05 df       	rcall	.-502    	; 0x1df0 <sample_all_pins>
    1fe6:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <inputSamples+0x1>
    1fea:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <inputSamples>

    // detect 3x'1' and adjust current choice
    U16 samplesANDed = inputSamples[2] & inputSamples[1] & inputSamples[0];
    1fee:	c0 23       	and	r28, r16
    1ff0:	d1 23       	and	r29, r17
    1ff2:	8c 23       	and	r24, r28
    current_input_pins = last_input_pins | samplesANDed; // set '1' where three samples were '1'
    1ff4:	9d 23       	and	r25, r29
    1ff6:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <last_input_pins>
    1ffa:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <last_input_pins+0x1>

    // detect 3x'0' and adjust current choice
    U16 samplesORed = inputSamples[2] & inputSamples[1] & inputSamples[0];
    current_input_pins = current_input_pins & samplesORed; // set '0' where three samples were '0'
    1ffe:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <current_input_pins+0x1>
    2002:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <current_input_pins>


    if ((current_input_pins & (1 << RDMODE_WORD_POS))==0) // tied to GND
    2006:	96 fd       	sbrc	r25, 6
    {
        choice_mode = Binary;
    2008:	05 c0       	rjmp	.+10     	; 0x2014 <__vector_21+0x7a>
    200a:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <choice_mode+0x1>
    200e:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <choice_mode>
    }
    else
    {
        choice_mode = OneOfN;
    2012:	06 c0       	rjmp	.+12     	; 0x2020 <__vector_21+0x86>
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	50 93 f0 01 	sts	0x01F0, r21	; 0x8001f0 <choice_mode+0x1>
    201c:	40 93 ef 01 	sts	0x01EF, r20	; 0x8001ef <choice_mode>
    }


    // stable change triggers USB detach and wait
    if (current_input_pins != last_input_pins)
    2020:	82 17       	cp	r24, r18
    2022:	93 07       	cpc	r25, r19
    {
        detach_countdown = 41; // 40x 5msecs = 200msecs
    2024:	31 f0       	breq	.+12     	; 0x2032 <__vector_21+0x98>
    2026:	29 e2       	ldi	r18, 0x29	; 41
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	30 93 e4 01 	sts	0x01E4, r19	; 0x8001e4 <detach_countdown+0x1>
    202e:	20 93 e3 01 	sts	0x01E3, r18	; 0x8001e3 <detach_countdown>
    }
    // make stable sample the new normal
    last_input_pins = current_input_pins;
    2032:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <last_input_pins+0x1>
    2036:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <last_input_pins>

    // Keep USB detached and count down
    if (detach_countdown != 0)
    203a:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <detach_countdown>
    203e:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <detach_countdown+0x1>
    2042:	89 2b       	or	r24, r25
    {
        Usb_detach();
    2044:	a9 f0       	breq	.+42     	; 0x2070 <__vector_21+0xd6>
    2046:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    204a:	81 60       	ori	r24, 0x01	; 1
    204c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

        detach_countdown--;
    2050:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <detach_countdown>
    2054:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <detach_countdown+0x1>
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <detach_countdown+0x1>
    205e:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <detach_countdown>
        if (detach_countdown==0)
    2062:	89 2b       	or	r24, r25
            Usb_attach();
    2064:	29 f4       	brne	.+10     	; 0x2070 <__vector_21+0xd6>
    2066:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    206a:	8e 7f       	andi	r24, 0xFE	; 254
    206c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>


ISR(TIMER0_COMPA_vect)
{
    filter_all_pins();
}
    2070:	ff 91       	pop	r31
    2072:	ef 91       	pop	r30
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	bf 91       	pop	r27
    207a:	af 91       	pop	r26
    207c:	9f 91       	pop	r25
    207e:	8f 91       	pop	r24
    2080:	7f 91       	pop	r23
    2082:	6f 91       	pop	r22
    2084:	5f 91       	pop	r21
    2086:	4f 91       	pop	r20
    2088:	3f 91       	pop	r19
    208a:	2f 91       	pop	r18
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	0f 90       	pop	r0
    2096:	1f 90       	pop	r1
    2098:	18 95       	reti

0000209a <get_boot_choice>:
U8 get_boot_choice(void)
{
    U8 choice;
    U16 all_pins = 0;

    all_pins = current_input_pins & choice_mask;
    209a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <current_input_pins>
    209e:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <current_input_pins+0x1>

    if (get_choice_mode()==OneOfN)
    20a2:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <choice_mode>
    20a6:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <choice_mode+0x1>
    20aa:	21 30       	cpi	r18, 0x01	; 1
    20ac:	31 05       	cpc	r19, r1
    20ae:	61 f4       	brne	.+24     	; 0x20c8 <get_boot_choice+0x2e>
U8 get_boot_choice(void)
{
    U8 choice;
    U16 all_pins = 0;

    all_pins = current_input_pins & choice_mask;
    20b0:	9c 01       	movw	r18, r24
    20b2:	37 70       	andi	r19, 0x07	; 7
    20b4:	91 e0       	ldi	r25, 0x01	; 1

    if (get_choice_mode()==OneOfN)
    {
        for (choice = 1; choice<12; choice++)
        {
            if (all_pins & 0x1)
    20b6:	20 fd       	sbrc	r18, 0
    20b8:	09 c0       	rjmp	.+18     	; 0x20cc <get_boot_choice+0x32>
                return choice; // return first pin tied to ground
            all_pins >>= 1;
    20ba:	36 95       	lsr	r19
    20bc:	27 95       	ror	r18

    all_pins = current_input_pins & choice_mask;

    if (get_choice_mode()==OneOfN)
    {
        for (choice = 1; choice<12; choice++)
    20be:	9f 5f       	subi	r25, 0xFF	; 255
    20c0:	9c 30       	cpi	r25, 0x0C	; 12
    20c2:	c9 f7       	brne	.-14     	; 0x20b6 <get_boot_choice+0x1c>
            if (all_pins & 0x1)
                return choice; // return first pin tied to ground
            all_pins >>= 1;
        }

        return 0; // no pin tied to GND
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	08 95       	ret
    }
    else // binary mode - first 4 bits are boot choice in binary form (0x0..0xF) 
        return (all_pins &= 0x0F);
    20c8:	8f 70       	andi	r24, 0x0F	; 15
    20ca:	08 95       	ret
    20cc:	89 2f       	mov	r24, r25
}
    20ce:	08 95       	ret

000020d0 <get_raw_boot_pins>:


U16 get_raw_boot_pins(void)
{
    return current_input_pins & choice_mask;
    20d0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <current_input_pins>
    20d4:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <current_input_pins+0x1>
}
    20d8:	97 70       	andi	r25, 0x07	; 7
    20da:	08 95       	ret

000020dc <get_choice_mode>:


pin_mode get_choice_mode(void)
{
    return choice_mode;
}
    20dc:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <choice_mode>
    20e0:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <choice_mode+0x1>
    20e4:	08 95       	ret

000020e6 <bootfile_template_start>:
    20e6:	23 23       	and	r18, r19
    20e8:	23 20       	and	r2, r3
    20ea:	4f 4e       	sbci	r20, 0xEF	; 239
    20ec:	4c 59       	subi	r20, 0x9C	; 156
    20ee:	20 43       	sbci	r18, 0x30	; 48
    20f0:	48 41       	sbci	r20, 0x18	; 24
    20f2:	4e 47       	sbci	r20, 0x7E	; 126
    20f4:	45 20       	and	r4, r5
    20f6:	42 45       	sbci	r20, 0x52	; 82
    20f8:	4c 4f       	sbci	r20, 0xFC	; 252
    20fa:	57 20       	and	r5, r7
    20fc:	49 46       	sbci	r20, 0x69	; 105
    20fe:	20 59       	subi	r18, 0x90	; 144
    2100:	4f 55       	subi	r20, 0x5F	; 95
    2102:	20 4b       	sbci	r18, 0xB0	; 176
    2104:	4e 4f       	sbci	r20, 0xFE	; 254
    2106:	57 20       	and	r5, r7
    2108:	57 48       	sbci	r21, 0x87	; 135
    210a:	41 54       	subi	r20, 0x41	; 65
    210c:	20 59       	subi	r18, 0x90	; 144
    210e:	4f 55       	subi	r20, 0x5F	; 95
    2110:	27 52       	subi	r18, 0x27	; 39
    2112:	45 20       	and	r4, r5
    2114:	44 4f       	sbci	r20, 0xF4	; 244
    2116:	49 4e       	sbci	r20, 0xE9	; 233
    2118:	47 20       	and	r4, r7
    211a:	23 23       	and	r18, r19
    211c:	23 0a       	sbc	r2, r19
    211e:	0a 23       	and	r16, r26
    2120:	20 6d       	ori	r18, 0xD0	; 208
    2122:	61 6b       	ori	r22, 0xB1	; 177
    2124:	65 20       	and	r6, r5
    2126:	62 6f       	ori	r22, 0xF2	; 242
    2128:	6f 74       	andi	r22, 0x4F	; 79
    212a:	20 64       	ori	r18, 0x40	; 64
    212c:	65 66       	ori	r22, 0x65	; 101
    212e:	61 75       	andi	r22, 0x51	; 81
    2130:	6c 74       	andi	r22, 0x4C	; 76
    2132:	20 0a       	sbc	r2, r16
    2134:	73 65       	ori	r23, 0x53	; 83
    2136:	74 20       	and	r7, r4
    2138:	64 65       	ori	r22, 0x54	; 84
    213a:	66 61       	ori	r22, 0x16	; 22
    213c:	75 6c       	ori	r23, 0xC5	; 197
    213e:	74 3d       	cpi	r23, 0xD4	; 212
    2140:	22 24       	eor	r2, r2
    2142:	67 72       	andi	r22, 0x27	; 39
    2144:	75 62       	ori	r23, 0x25	; 37
    2146:	73 77       	andi	r23, 0x73	; 115
    2148:	69 74       	andi	r22, 0x49	; 73
    214a:	63 68       	ori	r22, 0x83	; 131
    214c:	5f 63       	ori	r21, 0x3F	; 63
    214e:	68 6f       	ori	r22, 0xF8	; 248
    2150:	69 63       	ori	r22, 0x39	; 57
    2152:	65 22       	and	r6, r21
    2154:	0a 0a       	sbc	r0, r26
    2156:	23 20       	and	r2, r3
    2158:	73 75       	andi	r23, 0x53	; 83
    215a:	70 70       	andi	r23, 0x00	; 0
    215c:	72 65       	ori	r23, 0x52	; 82
    215e:	73 73       	andi	r23, 0x33	; 51
    2160:	20 6d       	ori	r18, 0xD0	; 208
    2162:	65 6e       	ori	r22, 0xE5	; 229
    2164:	75 20       	and	r7, r5
    2166:	64 69       	ori	r22, 0x94	; 148
    2168:	73 70       	andi	r23, 0x03	; 3
    216a:	6c 61       	ori	r22, 0x1C	; 28
    216c:	79 0a       	sbc	r7, r25
    216e:	73 65       	ori	r23, 0x53	; 83
    2170:	74 20       	and	r7, r4
    2172:	74 69       	ori	r23, 0x94	; 148
    2174:	6d 65       	ori	r22, 0x5D	; 93
    2176:	6f 75       	andi	r22, 0x5F	; 95
    2178:	74 5f       	subi	r23, 0xF4	; 244
    217a:	73 74       	andi	r23, 0x43	; 67
    217c:	79 6c       	ori	r23, 0xC9	; 201
    217e:	65 3d       	cpi	r22, 0xD5	; 213
    2180:	6d 65       	ori	r22, 0x5D	; 93
    2182:	6e 75       	andi	r22, 0x5E	; 94
    2184:	0a 73       	andi	r16, 0x3A	; 58
    2186:	65 74       	andi	r22, 0x45	; 69
    2188:	20 74       	andi	r18, 0x40	; 64
    218a:	69 6d       	ori	r22, 0xD9	; 217
    218c:	65 6f       	ori	r22, 0xF5	; 245
    218e:	75 74       	andi	r23, 0x45	; 69
    2190:	3d 30       	cpi	r19, 0x0D	; 13
    2192:	0a 0a       	sbc	r0, r26
    2194:	23 20       	and	r2, r3
    2196:	70 72       	andi	r23, 0x20	; 32
    2198:	69 6e       	ori	r22, 0xE9	; 233
    219a:	74 20       	and	r7, r4
    219c:	62 6f       	ori	r22, 0xF2	; 242
    219e:	6f 74       	andi	r22, 0x4F	; 79
    21a0:	20 63       	ori	r18, 0x30	; 48
    21a2:	68 6f       	ori	r22, 0xF8	; 248
    21a4:	69 63       	ori	r22, 0x39	; 57
    21a6:	65 20       	and	r6, r5
    21a8:	0a 63       	ori	r16, 0x3A	; 58
    21aa:	6c 65       	ori	r22, 0x5C	; 92
    21ac:	61 72       	andi	r22, 0x21	; 33
    21ae:	0a 0a       	sbc	r0, r26
    21b0:	65 63       	ori	r22, 0x35	; 53
    21b2:	68 6f       	ori	r22, 0xF8	; 248
    21b4:	20 27       	eor	r18, r16
    21b6:	50 72       	andi	r21, 0x20	; 32
    21b8:	65 73       	andi	r22, 0x35	; 53
    21ba:	73 20       	and	r7, r3
    21bc:	45 53       	subi	r20, 0x35	; 53
    21be:	43 20       	and	r4, r3
    21c0:	66 6f       	ori	r22, 0xF6	; 246
    21c2:	72 20       	and	r7, r2
    21c4:	62 6f       	ori	r22, 0xF2	; 242
    21c6:	6f 74       	andi	r22, 0x4F	; 79
    21c8:	20 6d       	ori	r18, 0xD0	; 208
    21ca:	65 6e       	ori	r22, 0xE5	; 229
    21cc:	75 27       	eor	r23, r21
    21ce:	0a 65       	ori	r16, 0x5A	; 90
    21d0:	63 68       	ori	r22, 0x83	; 131
    21d2:	6f 0a       	sbc	r6, r31
    21d4:	65 63       	ori	r22, 0x35	; 53
    21d6:	68 6f       	ori	r22, 0xF8	; 248
    21d8:	20 2d       	mov	r18, r0
    21da:	6e 20       	and	r6, r14
    21dc:	27 42       	sbci	r18, 0x27	; 39
    21de:	6f 6f       	ori	r22, 0xFF	; 255
    21e0:	74 69       	ori	r23, 0x94	; 148
    21e2:	6e 67       	ori	r22, 0x7E	; 126
    21e4:	20 27       	eor	r18, r16
    21e6:	0a 0a       	sbc	r0, r26
    21e8:	6f 6c       	ori	r22, 0xCF	; 207
    21ea:	64 5f       	subi	r22, 0xF4	; 244
    21ec:	63 6f       	ori	r22, 0xF3	; 243
    21ee:	6c 6f       	ori	r22, 0xFC	; 252
    21f0:	72 3d       	cpi	r23, 0xD2	; 210
    21f2:	22 24       	eor	r2, r2
    21f4:	63 6f       	ori	r22, 0xF3	; 243
    21f6:	6c 6f       	ori	r22, 0xFC	; 252
    21f8:	72 5f       	subi	r23, 0xF2	; 242
    21fa:	6e 6f       	ori	r22, 0xFE	; 254
    21fc:	72 6d       	ori	r23, 0xD2	; 210
    21fe:	61 6c       	ori	r22, 0xC1	; 193
    2200:	22 20       	and	r2, r2
    2202:	20 20       	and	r2, r0
    2204:	20 20       	and	r2, r0
    2206:	20 20       	and	r2, r0
    2208:	20 20       	and	r2, r0
    220a:	20 20       	and	r2, r0
    220c:	20 20       	and	r2, r0
    220e:	20 20       	and	r2, r0
    2210:	20 20       	and	r2, r0
    2212:	20 20       	and	r2, r0
    2214:	20 20       	and	r2, r0
    2216:	20 20       	and	r2, r0
    2218:	20 23       	and	r18, r16
    221a:	20 73       	andi	r18, 0x30	; 48
    221c:	61 76       	andi	r22, 0x61	; 97
    221e:	65 20       	and	r6, r5
    2220:	6e 6f       	ori	r22, 0xFE	; 254
    2222:	72 6d       	ori	r23, 0xD2	; 210
    2224:	61 6c       	ori	r22, 0xC1	; 193
    2226:	20 63       	ori	r18, 0x30	; 48
    2228:	6f 6c       	ori	r22, 0xCF	; 207
    222a:	6f 72       	andi	r22, 0x2F	; 47
    222c:	0a 69       	ori	r16, 0x9A	; 154
    222e:	66 20       	and	r6, r6
    2230:	5b 20       	and	r5, r11
    2232:	2d 6e       	ori	r18, 0xED	; 237
    2234:	20 22       	and	r2, r16
    2236:	24 7b       	andi	r18, 0xB4	; 180
    2238:	67 72       	andi	r22, 0x27	; 39
    223a:	75 62       	ori	r23, 0x25	; 37
    223c:	73 77       	andi	r23, 0x73	; 115
    223e:	69 74       	andi	r22, 0x49	; 73
    2240:	63 68       	ori	r22, 0x83	; 131
    2242:	5f 63       	ori	r21, 0x3F	; 63
    2244:	68 6f       	ori	r22, 0xF8	; 248
    2246:	69 63       	ori	r22, 0x39	; 57
    2248:	65 5f       	subi	r22, 0xF5	; 245
    224a:	63 6f       	ori	r22, 0xF3	; 243
    224c:	6c 6f       	ori	r22, 0xFC	; 252
    224e:	72 7d       	andi	r23, 0xD2	; 210
    2250:	22 20       	and	r2, r2
    2252:	5d 3b       	cpi	r21, 0xBD	; 189
    2254:	20 74       	andi	r18, 0x40	; 64
    2256:	68 65       	ori	r22, 0x58	; 88
    2258:	6e 0a       	sbc	r6, r30
    225a:	20 20       	and	r2, r0
    225c:	20 73       	andi	r18, 0x30	; 48
    225e:	65 74       	andi	r22, 0x45	; 69
    2260:	20 63       	ori	r18, 0x30	; 48
    2262:	6f 6c       	ori	r22, 0xCF	; 207
    2264:	6f 72       	andi	r22, 0x2F	; 47
    2266:	5f 6e       	ori	r21, 0xEF	; 239
    2268:	6f 72       	andi	r22, 0x2F	; 47
    226a:	6d 61       	ori	r22, 0x1D	; 29
    226c:	6c 3d       	cpi	r22, 0xDC	; 220
    226e:	22 24       	eor	r2, r2
    2270:	67 72       	andi	r22, 0x27	; 39
    2272:	75 62       	ori	r23, 0x25	; 37
    2274:	73 77       	andi	r23, 0x73	; 115
    2276:	69 74       	andi	r22, 0x49	; 73
    2278:	63 68       	ori	r22, 0x83	; 131
    227a:	5f 63       	ori	r21, 0x3F	; 63
    227c:	68 6f       	ori	r22, 0xF8	; 248
    227e:	69 63       	ori	r22, 0x39	; 57
    2280:	65 5f       	subi	r22, 0xF5	; 245
    2282:	63 6f       	ori	r22, 0xF3	; 243
    2284:	6c 6f       	ori	r22, 0xFC	; 252
    2286:	72 22       	and	r7, r18
    2288:	20 20       	and	r2, r0
    228a:	20 23       	and	r18, r16
    228c:	20 68       	ori	r18, 0x80	; 128
    228e:	69 67       	ori	r22, 0x79	; 121
    2290:	68 6c       	ori	r22, 0xC8	; 200
    2292:	69 67       	ori	r22, 0x79	; 121
    2294:	68 74       	andi	r22, 0x48	; 72
    2296:	20 69       	ori	r18, 0x90	; 144
    2298:	66 20       	and	r6, r6
    229a:	64 65       	ori	r22, 0x54	; 84
    229c:	66 69       	ori	r22, 0x96	; 150
    229e:	6e 65       	ori	r22, 0x5E	; 94
    22a0:	64 0a       	sbc	r6, r20
    22a2:	66 69       	ori	r22, 0x96	; 150
    22a4:	0a 0a       	sbc	r0, r26
    22a6:	65 63       	ori	r22, 0x35	; 53
    22a8:	68 6f       	ori	r22, 0xF8	; 248
    22aa:	20 24       	eor	r2, r0
    22ac:	67 72       	andi	r22, 0x27	; 39
    22ae:	75 62       	ori	r23, 0x25	; 37
    22b0:	73 77       	andi	r23, 0x73	; 115
    22b2:	69 74       	andi	r22, 0x49	; 73
    22b4:	63 68       	ori	r22, 0x83	; 131
    22b6:	5f 63       	ori	r21, 0x3F	; 63
    22b8:	68 6f       	ori	r22, 0xF8	; 248
    22ba:	69 63       	ori	r22, 0x39	; 57
    22bc:	65 0a       	sbc	r6, r21
    22be:	0a 73       	andi	r16, 0x3A	; 58
    22c0:	65 74       	andi	r22, 0x45	; 69
    22c2:	20 63       	ori	r18, 0x30	; 48
    22c4:	6f 6c       	ori	r22, 0xCF	; 207
    22c6:	6f 72       	andi	r22, 0x2F	; 47
    22c8:	5f 6e       	ori	r21, 0xEF	; 239
    22ca:	6f 72       	andi	r22, 0x2F	; 47
    22cc:	6d 61       	ori	r22, 0x1D	; 29
    22ce:	6c 3d       	cpi	r22, 0xDC	; 220
    22d0:	22 24       	eor	r2, r2
    22d2:	6f 6c       	ori	r22, 0xCF	; 207
    22d4:	64 5f       	subi	r22, 0xF4	; 244
    22d6:	63 6f       	ori	r22, 0xF3	; 243
    22d8:	6c 6f       	ori	r22, 0xFC	; 252
    22da:	72 22       	and	r7, r18
    22dc:	20 20       	and	r2, r0
    22de:	20 20       	and	r2, r0
    22e0:	20 20       	and	r2, r0
    22e2:	20 20       	and	r2, r0
    22e4:	20 20       	and	r2, r0
    22e6:	20 20       	and	r2, r0
    22e8:	20 20       	and	r2, r0
    22ea:	20 20       	and	r2, r0
    22ec:	20 20       	and	r2, r0
    22ee:	20 20       	and	r2, r0
    22f0:	23 20       	and	r2, r3
    22f2:	72 65       	ori	r23, 0x52	; 82
    22f4:	73 74       	andi	r23, 0x43	; 67
    22f6:	6f 72       	andi	r22, 0x2F	; 47
    22f8:	65 20       	and	r6, r5
    22fa:	6e 6f       	ori	r22, 0xFE	; 254
    22fc:	72 6d       	ori	r23, 0xD2	; 210
    22fe:	61 6c       	ori	r22, 0xC1	; 193
    2300:	20 63       	ori	r18, 0x30	; 48
    2302:	6f 6c       	ori	r22, 0xCF	; 207
    2304:	6f 72       	andi	r22, 0x2F	; 47
    2306:	0a 65       	ori	r16, 0x5A	; 90
    2308:	63 68       	ori	r22, 0x83	; 131
    230a:	6f 20       	and	r6, r15
    230c:	2d 6e       	ori	r18, 0xED	; 237
    230e:	20 27       	eor	r18, r16
    2310:	63 6f       	ori	r22, 0xF3	; 243
    2312:	6e 74       	andi	r22, 0x4E	; 78
    2314:	69 6e       	ori	r22, 0xE9	; 233
    2316:	75 65       	ori	r23, 0x55	; 85
    2318:	73 20       	and	r7, r3
    231a:	69 6e       	ori	r22, 0xE9	; 233
    231c:	20 27       	eor	r18, r16
    231e:	0a 0a       	sbc	r0, r26
    2320:	23 20       	and	r2, r3
    2322:	77 61       	ori	r23, 0x17	; 23
    2324:	69 74       	andi	r22, 0x49	; 73
    2326:	20 66       	ori	r18, 0x60	; 96
    2328:	6f 72       	andi	r22, 0x2F	; 47
    232a:	20 73       	andi	r18, 0x30	; 48
    232c:	70 65       	ori	r23, 0x50	; 80
    232e:	63 69       	ori	r22, 0x93	; 147
    2330:	66 69       	ori	r22, 0x96	; 150
    2332:	65 64       	ori	r22, 0x45	; 69
    2334:	20 6e       	ori	r18, 0xE0	; 224
    2336:	75 6d       	ori	r23, 0xD5	; 213
    2338:	20 6f       	ori	r18, 0xF0	; 240
    233a:	66 20       	and	r6, r6
    233c:	73 65       	ori	r23, 0x53	; 83
    233e:	63 6f       	ori	r22, 0xF3	; 243
    2340:	6e 64       	ori	r22, 0x4E	; 78
    2342:	73 0a       	sbc	r7, r19
    2344:	69 66       	ori	r22, 0x69	; 105
    2346:	20 73       	andi	r18, 0x30	; 48
    2348:	6c 65       	ori	r22, 0x5C	; 92
    234a:	65 70       	andi	r22, 0x05	; 5
    234c:	20 2d       	mov	r18, r0
    234e:	2d 69       	ori	r18, 0x9D	; 157
    2350:	6e 74       	andi	r22, 0x4E	; 78
    2352:	65 72       	andi	r22, 0x25	; 37
    2354:	72 75       	andi	r23, 0x52	; 82
    2356:	70 74       	andi	r23, 0x40	; 64
    2358:	69 62       	ori	r22, 0x29	; 41
    235a:	6c 65       	ori	r22, 0x5C	; 92
    235c:	20 2d       	mov	r18, r0
    235e:	2d 76       	andi	r18, 0x6D	; 109
    2360:	65 72       	andi	r22, 0x25	; 37
    2362:	62 6f       	ori	r22, 0xF2	; 242
    2364:	73 65       	ori	r23, 0x53	; 83
    2366:	20 24       	eor	r2, r0
    2368:	67 72       	andi	r22, 0x27	; 39
    236a:	75 62       	ori	r23, 0x25	; 37
    236c:	73 77       	andi	r23, 0x73	; 115
    236e:	69 74       	andi	r22, 0x49	; 73
    2370:	63 68       	ori	r22, 0x83	; 131
    2372:	5f 73       	andi	r21, 0x3F	; 63
    2374:	6c 65       	ori	r22, 0x5C	; 92
    2376:	65 70       	andi	r22, 0x05	; 5
    2378:	5f 73       	andi	r21, 0x3F	; 63
    237a:	65 63       	ori	r22, 0x35	; 53
    237c:	73 0a       	sbc	r7, r19
    237e:	74 68       	ori	r23, 0x84	; 132
    2380:	65 6e       	ori	r22, 0xE5	; 229
    2382:	0a 20       	and	r0, r10
    2384:	20 20       	and	r2, r0
    2386:	63 6c       	ori	r22, 0xC3	; 195
    2388:	65 61       	ori	r22, 0x15	; 21
    238a:	72 0a       	sbc	r7, r18
    238c:	65 6c       	ori	r22, 0xC5	; 197
    238e:	73 65       	ori	r23, 0x53	; 83
    2390:	0a 20       	and	r0, r10
    2392:	20 20       	and	r2, r0
    2394:	75 6e       	ori	r23, 0xE5	; 229
    2396:	73 65       	ori	r23, 0x53	; 83
    2398:	74 20       	and	r7, r4
    239a:	74 69       	ori	r23, 0x94	; 148
    239c:	6d 65       	ori	r22, 0x5D	; 93
    239e:	6f 75       	andi	r22, 0x5F	; 95
    23a0:	74 0a       	sbc	r7, r20
    23a2:	66 69       	ori	r22, 0x96	; 150
    23a4:	0a 0a       	sbc	r0, r26
    23a6:	23 20       	and	r2, r3
    23a8:	72 65       	ori	r23, 0x52	; 82
    23aa:	74 75       	andi	r23, 0x54	; 84
    23ac:	72 6e       	ori	r23, 0xE2	; 226
    23ae:	20 74       	andi	r18, 0x40	; 64
    23b0:	6f 20       	and	r6, r15
    23b2:	67 72       	andi	r22, 0x27	; 39
    23b4:	75 62       	ori	r23, 0x25	; 37
    23b6:	2e 63       	ori	r18, 0x3E	; 62
    23b8:	66 67       	ori	r22, 0x76	; 118
    23ba:	20 61       	ori	r18, 0x10	; 16
    23bc:	6e 64       	ori	r22, 0x4E	; 78
    23be:	20 62       	ori	r18, 0x20	; 32
    23c0:	6f 6f       	ori	r22, 0xFF	; 255
    23c2:	74 0a       	sbc	r7, r20

000023c4 <__tablejump2__>:
    23c4:	ee 0f       	add	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	05 90       	lpm	r0, Z+
    23ca:	f4 91       	lpm	r31, Z
    23cc:	e0 2d       	mov	r30, r0
    23ce:	09 94       	ijmp

000023d0 <eeprom_read_byte>:
    23d0:	f9 99       	sbic	0x1f, 1	; 31
    23d2:	fe cf       	rjmp	.-4      	; 0x23d0 <eeprom_read_byte>
    23d4:	92 bd       	out	0x22, r25	; 34
    23d6:	81 bd       	out	0x21, r24	; 33
    23d8:	f8 9a       	sbi	0x1f, 0	; 31
    23da:	99 27       	eor	r25, r25
    23dc:	80 b5       	in	r24, 0x20	; 32
    23de:	08 95       	ret

000023e0 <eeprom_read_word>:
    23e0:	a8 e1       	ldi	r26, 0x18	; 24
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	42 e0       	ldi	r20, 0x02	; 2
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	1c c0       	rjmp	.+56     	; 0x2422 <eeprom_read_blraw>

000023ea <eeprom_write_block>:
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <eeprom_write_block+0xa>
    23f0:	2d 91       	ld	r18, X+
    23f2:	05 d0       	rcall	.+10     	; 0x23fe <eeprom_write_r18>
    23f4:	41 50       	subi	r20, 0x01	; 1
    23f6:	50 40       	sbci	r21, 0x00	; 0
    23f8:	d8 f7       	brcc	.-10     	; 0x23f0 <eeprom_write_block+0x6>
    23fa:	08 95       	ret

000023fc <eeprom_write_byte>:
    23fc:	26 2f       	mov	r18, r22

000023fe <eeprom_write_r18>:
    23fe:	f9 99       	sbic	0x1f, 1	; 31
    2400:	fe cf       	rjmp	.-4      	; 0x23fe <eeprom_write_r18>
    2402:	1f ba       	out	0x1f, r1	; 31
    2404:	92 bd       	out	0x22, r25	; 34
    2406:	81 bd       	out	0x21, r24	; 33
    2408:	20 bd       	out	0x20, r18	; 32
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	fa 9a       	sbi	0x1f, 2	; 31
    2410:	f9 9a       	sbi	0x1f, 1	; 31
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	08 95       	ret

00002418 <eeprom_write_word>:
    2418:	f1 df       	rcall	.-30     	; 0x23fc <eeprom_write_byte>
    241a:	27 2f       	mov	r18, r23
    241c:	f0 cf       	rjmp	.-32     	; 0x23fe <eeprom_write_r18>

0000241e <eeprom_read_block>:
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22

00002422 <eeprom_read_blraw>:
    2422:	fc 01       	movw	r30, r24
    2424:	f9 99       	sbic	0x1f, 1	; 31
    2426:	fe cf       	rjmp	.-4      	; 0x2424 <eeprom_read_blraw+0x2>
    2428:	06 c0       	rjmp	.+12     	; 0x2436 <eeprom_read_blraw+0x14>
    242a:	f2 bd       	out	0x22, r31	; 34
    242c:	e1 bd       	out	0x21, r30	; 33
    242e:	f8 9a       	sbi	0x1f, 0	; 31
    2430:	31 96       	adiw	r30, 0x01	; 1
    2432:	00 b4       	in	r0, 0x20	; 32
    2434:	0d 92       	st	X+, r0
    2436:	41 50       	subi	r20, 0x01	; 1
    2438:	50 40       	sbci	r21, 0x00	; 0
    243a:	b8 f7       	brcc	.-18     	; 0x242a <eeprom_read_blraw+0x8>
    243c:	08 95       	ret

0000243e <_exit>:
    243e:	f8 94       	cli

00002440 <__stop_program>:
    2440:	ff cf       	rjmp	.-2      	; 0x2440 <__stop_program>
